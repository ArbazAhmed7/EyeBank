//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransportManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class secoffEntities : DbContext
    {
        public secoffEntities()
            : base("name=secoffEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tblAdminFormManagement> tblAdminFormManagements { get; set; }
        public DbSet<tblAutoRefTest> tblAutoRefTests { get; set; }
        public DbSet<tblAutoRefTestStudent> tblAutoRefTestStudents { get; set; }
        public DbSet<tblAutoRefTestStudentAuditTrail> tblAutoRefTestStudentAuditTrails { get; set; }
        public DbSet<tblAutoRefTestTeacher> tblAutoRefTestTeachers { get; set; }
        public DbSet<tblAutoRefTestTeacherAuditTrail> tblAutoRefTestTeacherAuditTrails { get; set; }
        public DbSet<tblClass> tblClasses { get; set; }
        public DbSet<tblFormManagement> tblFormManagements { get; set; }
        public DbSet<tblGender> tblGenders { get; set; }
        public DbSet<tblGenderForSchool> tblGenderForSchools { get; set; }
        public DbSet<tblGlassDespenseStudent> tblGlassDespenseStudents { get; set; }
        public DbSet<tblInLawsPatent> tblInLawsPatents { get; set; }
        public DbSet<tblMedicine> tblMedicines { get; set; }
        public DbSet<tblOptometristMasterStudent> tblOptometristMasterStudents { get; set; }
        public DbSet<tblOptometristMasterStudentAuditTrail> tblOptometristMasterStudentAuditTrails { get; set; }
        public DbSet<tblOptometristMasterTeacher> tblOptometristMasterTeachers { get; set; }
        public DbSet<tblOptometristMasterTeacherAuditTrail> tblOptometristMasterTeacherAuditTrails { get; set; }
        public DbSet<tblRole> tblRoles { get; set; }
        public DbSet<tblRoleManagement> tblRoleManagements { get; set; }
        public DbSet<tblSchoolAuditTrail> tblSchoolAuditTrails { get; set; }
        public DbSet<tblSchoolImage> tblSchoolImages { get; set; }
        public DbSet<tblSection> tblSections { get; set; }
        public DbSet<tblStudentAuditTrail> tblStudentAuditTrails { get; set; }
        public DbSet<tblStudentImage> tblStudentImages { get; set; }
        public DbSet<tblTeacherAuditTrail> tblTeacherAuditTrails { get; set; }
        public DbSet<tblTeacherImage> tblTeacherImages { get; set; }
        public DbSet<tblTitle> tblTitles { get; set; }
        public DbSet<tblTreatmentStudentAuditTrail> tblTreatmentStudentAuditTrails { get; set; }
        public DbSet<tblTreatmentTeacherAuditTrail> tblTreatmentTeacherAuditTrails { get; set; }
        public DbSet<tblUser> tblUsers { get; set; }
        public DbSet<tblUserLog> tblUserLogs { get; set; }
        public DbSet<tblUserManagement> tblUserManagements { get; set; }
        public DbSet<tblUserRole> tblUserRoles { get; set; }
        public DbSet<tblVisitForSquintAssessmentStudent> tblVisitForSquintAssessmentStudents { get; set; }
        public DbSet<vw_AdminForms> vw_AdminForms { get; set; }
        public DbSet<tblGlassDespenseTeacher> tblGlassDespenseTeachers { get; set; }
        public DbSet<tblHospital> tblHospitals { get; set; }
        public DbSet<tblYearlyTarget> tblYearlyTargets { get; set; }
        public DbSet<tblStudent> tblStudents { get; set; }
        public DbSet<tblTeacher> tblTeachers { get; set; }
        public DbSet<tblVisitforSurgeryStudent> tblVisitforSurgeryStudents { get; set; }
        public DbSet<tblVisitAfterSurgeryStudent> tblVisitAfterSurgeryStudents { get; set; }
        public DbSet<tblMedicineFurtherAssessmentStudent> tblMedicineFurtherAssessmentStudents { get; set; }
        public DbSet<tblDoctor> tblDoctors { get; set; }
        public DbSet<tblSchool> tblSchools { get; set; }
        public DbSet<tblVisitforPreSurgeryStudent> tblVisitforPreSurgeryStudents { get; set; }
        public DbSet<tblVisitforSurgeryTeacher> tblVisitforSurgeryTeachers { get; set; }
        public DbSet<tblTreatmentStudent> tblTreatmentStudents { get; set; }
        public DbSet<tblTreatmentTeacher> tblTreatmentTeachers { get; set; }
        public DbSet<tblVisitSixMonthStudent> tblVisitSixMonthStudents { get; set; }
        public DbSet<tblCycloRefractionStudent> tblCycloRefractionStudents { get; set; }
        public DbSet<tblVisitFundoscopyStudent> tblVisitFundoscopyStudents { get; set; }
        public DbSet<tblVisitForFurtherAssessmentStudent> tblVisitForFurtherAssessmentStudents { get; set; }
    
        [EdmFunction("secoffEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string listOfValues, string valueSeparator)
        {
            var listOfValuesParameter = listOfValues != null ?
                new ObjectParameter("ListOfValues", listOfValues) :
                new ObjectParameter("ListOfValues", typeof(string));
    
            var valueSeparatorParameter = valueSeparator != null ?
                new ObjectParameter("ValueSeparator", valueSeparator) :
                new ObjectParameter("ValueSeparator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[secoffEntities].[Split](@ListOfValues, @ValueSeparator)", listOfValuesParameter, valueSeparatorParameter);
        }
    
        public virtual ObjectResult<sp_AssignRoleToUser_Result> sp_AssignRoleToUser(Nullable<int> userAutoId, Nullable<int> roleAutoId)
        {
            var userAutoIdParameter = userAutoId.HasValue ?
                new ObjectParameter("UserAutoId", userAutoId) :
                new ObjectParameter("UserAutoId", typeof(int));
    
            var roleAutoIdParameter = roleAutoId.HasValue ?
                new ObjectParameter("RoleAutoId", roleAutoId) :
                new ObjectParameter("RoleAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AssignRoleToUser_Result>("sp_AssignRoleToUser", userAutoIdParameter, roleAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_AutoRefTest_StudentVisit_Result> sp_AutoRefTest_StudentVisit(Nullable<int> studentAutoId, Nullable<System.DateTime> transactionDate)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AutoRefTest_StudentVisit_Result>("sp_AutoRefTest_StudentVisit", studentAutoIdParameter, transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_AutoRefTest_TeacherVisit_Result> sp_AutoRefTest_TeacherVisit(Nullable<int> teacherAutoId, Nullable<System.DateTime> transactionDate)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AutoRefTest_TeacherVisit_Result>("sp_AutoRefTest_TeacherVisit", teacherAutoIdParameter, transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_AutoRefTest_TestSummary_Result> sp_AutoRefTest_TestSummary(Nullable<System.DateTime> testDate)
        {
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("TestDate", testDate) :
                new ObjectParameter("TestDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AutoRefTest_TestSummary_Result>("sp_AutoRefTest_TestSummary", testDateParameter);
        }
    
        public virtual ObjectResult<sp_ChangePassword_Result> sp_ChangePassword(string userId, string oldPassword, string newPassword)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChangePassword_Result>("sp_ChangePassword", userIdParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<sp_Comboboxes_GetDetail_Result> sp_Comboboxes_GetDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Comboboxes_GetDetail_Result>("sp_Comboboxes_GetDetail");
        }
    
        public virtual int sp_CompreshensiveStudentReport_ClassWise(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompreshensiveStudentReport_ClassWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_CompreshensiveStudentReport_SchoolWise(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompreshensiveStudentReport_SchoolWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_CompreshensiveStudentReport_SectionWise(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompreshensiveStudentReport_SectionWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_CompreshensiveStudentReport_StudentWise(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompreshensiveStudentReport_StudentWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_CompreshensiveTeacherReport_SchoolWise(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompreshensiveTeacherReport_SchoolWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_CompreshensiveTeacherReport_StudentWise(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompreshensiveTeacherReport_StudentWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_DeletePhotoFormWise(string formID, Nullable<int> autoKeyID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            var autoKeyIDParameter = autoKeyID.HasValue ?
                new ObjectParameter("AutoKeyID", autoKeyID) :
                new ObjectParameter("AutoKeyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeletePhotoFormWise", formIDParameter, autoKeyIDParameter);
        }
    
        public virtual ObjectResult<sp_ForgotPass_ChangePass_Result> sp_ForgotPass_ChangePass(string userId, string newPassword)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ForgotPass_ChangePass_Result>("sp_ForgotPass_ChangePass", userIdParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<sp_ForgotPassGetUserEmail_Result> sp_ForgotPassGetUserEmail(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ForgotPassGetUserEmail_Result>("sp_ForgotPassGetUserEmail", userIDParameter);
        }
    
        public virtual ObjectResult<sp_ForgotPassSavePIN_Result> sp_ForgotPassSavePIN(string userID, string pIN)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ForgotPassSavePIN_Result>("sp_ForgotPassSavePIN", userIDParameter, pINParameter);
        }
    
        public virtual ObjectResult<sp_ForgotPassValidatePIN_Result> sp_ForgotPassValidatePIN(string userID, string pIN)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ForgotPassValidatePIN_Result>("sp_ForgotPassValidatePIN", userIDParameter, pINParameter);
        }
    
        public virtual ObjectResult<sp_GetAllFormsData_Result> sp_GetAllFormsData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllFormsData_Result>("sp_GetAllFormsData");
        }
    
        public virtual ObjectResult<sp_GetAllPhotosFormWise_Result> sp_GetAllPhotosFormWise(string formID, Nullable<int> autoKeyID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            var autoKeyIDParameter = autoKeyID.HasValue ?
                new ObjectParameter("AutoKeyID", autoKeyID) :
                new ObjectParameter("AutoKeyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllPhotosFormWise_Result>("sp_GetAllPhotosFormWise", formIDParameter, autoKeyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAutoComplete_Result> sp_GetAutoComplete(string term, string termType, Nullable<int> id)
        {
            var termParameter = term != null ?
                new ObjectParameter("Term", term) :
                new ObjectParameter("Term", typeof(string));
    
            var termTypeParameter = termType != null ?
                new ObjectParameter("TermType", termType) :
                new ObjectParameter("TermType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAutoComplete_Result>("sp_GetAutoComplete", termParameter, termTypeParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_GetAutoCompleteESMS_Result> sp_GetAutoCompleteESMS(string term, string termType, Nullable<int> id)
        {
            var termParameter = term != null ?
                new ObjectParameter("Term", term) :
                new ObjectParameter("Term", typeof(string));
    
            var termTypeParameter = termType != null ?
                new ObjectParameter("TermType", termType) :
                new ObjectParameter("TermType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAutoCompleteESMS_Result>("sp_GetAutoCompleteESMS", termParameter, termTypeParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Result> sp_GetLookupData(string formID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Result>("sp_GetLookupData", formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Class_Result> sp_GetLookupData_Class(string formID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Class_Result>("sp_GetLookupData_Class", formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_ClassSection_Result> sp_GetLookupData_ClassSection(string formID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_ClassSection_Result>("sp_GetLookupData_ClassSection", formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_School_Result> sp_GetLookupData_School(string formID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_School_Result>("sp_GetLookupData_School", formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_Result> sp_GetLookupData_Student(Nullable<int> schoolAutoId, Nullable<int> classAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_Result>("sp_GetLookupData_Student", schoolAutoIdParameter, classAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Teacher_Result> sp_GetLookupData_Teacher(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Teacher_Result>("sp_GetLookupData_Teacher", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Transaction_Result> sp_GetLookupData_Transaction(string formID, string whereClause)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Transaction_Result>("sp_GetLookupData_Transaction", formIDParameter, whereClauseParameter);
        }
    
        public virtual ObjectResult<sp_GetMenu_Result> sp_GetMenu(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMenu_Result>("sp_GetMenu", useridParameter);
        }
    
        public virtual ObjectResult<sp_GetSpecificFormsData_Result> sp_GetSpecificFormsData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSpecificFormsData_Result>("sp_GetSpecificFormsData");
        }
    
        public virtual ObjectResult<sp_RoleManagement_DeleteRoleDetailEntry_Result> sp_RoleManagement_DeleteRoleDetailEntry(Nullable<int> roleMgmtAutoId)
        {
            var roleMgmtAutoIdParameter = roleMgmtAutoId.HasValue ?
                new ObjectParameter("RoleMgmtAutoId", roleMgmtAutoId) :
                new ObjectParameter("RoleMgmtAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RoleManagement_DeleteRoleDetailEntry_Result>("sp_RoleManagement_DeleteRoleDetailEntry", roleMgmtAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_RoleManagement_DeleteRoleMaster_Result> sp_RoleManagement_DeleteRoleMaster(Nullable<int> roleAutoID)
        {
            var roleAutoIDParameter = roleAutoID.HasValue ?
                new ObjectParameter("RoleAutoID", roleAutoID) :
                new ObjectParameter("RoleAutoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RoleManagement_DeleteRoleMaster_Result>("sp_RoleManagement_DeleteRoleMaster", roleAutoIDParameter);
        }
    
        public virtual ObjectResult<sp_RoleManagement_GetDetail_Result> sp_RoleManagement_GetDetail(Nullable<int> roleAutoId)
        {
            var roleAutoIdParameter = roleAutoId.HasValue ?
                new ObjectParameter("RoleAutoId", roleAutoId) :
                new ObjectParameter("RoleAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RoleManagement_GetDetail_Result>("sp_RoleManagement_GetDetail", roleAutoIdParameter);
        }
    
        public virtual int sp_RoleManagement_UpdateRolesToUser(Nullable<int> roleAutoID)
        {
            var roleAutoIDParameter = roleAutoID.HasValue ?
                new ObjectParameter("RoleAutoID", roleAutoID) :
                new ObjectParameter("RoleAutoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RoleManagement_UpdateRolesToUser", roleAutoIDParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTest_Delete_Result> sp_tblAutoRefTest_Delete(Nullable<int> autoRefId)
        {
            var autoRefIdParameter = autoRefId.HasValue ?
                new ObjectParameter("AutoRefId", autoRefId) :
                new ObjectParameter("AutoRefId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTest_Delete_Result>("sp_tblAutoRefTest_Delete", autoRefIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTest_GetDetail_Result> sp_tblAutoRefTest_GetDetail(Nullable<int> autoRefId)
        {
            var autoRefIdParameter = autoRefId.HasValue ?
                new ObjectParameter("AutoRefId", autoRefId) :
                new ObjectParameter("AutoRefId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTest_GetDetail_Result>("sp_tblAutoRefTest_GetDetail", autoRefIdParameter);
        }
    
        public virtual ObjectResult<string> sp_tblAutoRefTest_GetMaxCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_tblAutoRefTest_GetMaxCode");
        }
    
        public virtual ObjectResult<sp_tblAutoRefTest_InsertUpdate_Result> sp_tblAutoRefTest_InsertUpdate(Nullable<int> autoRefId, string autoRefTransId, Nullable<System.DateTime> autoRefTransDate, Nullable<int> studentAutoId, Nullable<int> teacherAutoId, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var autoRefIdParameter = autoRefId.HasValue ?
                new ObjectParameter("AutoRefId", autoRefId) :
                new ObjectParameter("AutoRefId", typeof(int));
    
            var autoRefTransIdParameter = autoRefTransId != null ?
                new ObjectParameter("AutoRefTransId", autoRefTransId) :
                new ObjectParameter("AutoRefTransId", typeof(string));
    
            var autoRefTransDateParameter = autoRefTransDate.HasValue ?
                new ObjectParameter("AutoRefTransDate", autoRefTransDate) :
                new ObjectParameter("AutoRefTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTest_InsertUpdate_Result>("sp_tblAutoRefTest_InsertUpdate", autoRefIdParameter, autoRefTransIdParameter, autoRefTransDateParameter, studentAutoIdParameter, teacherAutoIdParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestStudent_Delete_Result> sp_tblAutoRefTestStudent_Delete(Nullable<int> autoRefStudentId)
        {
            var autoRefStudentIdParameter = autoRefStudentId.HasValue ?
                new ObjectParameter("AutoRefStudentId", autoRefStudentId) :
                new ObjectParameter("AutoRefStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestStudent_Delete_Result>("sp_tblAutoRefTestStudent_Delete", autoRefStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestStudent_GetCurrentDateTest_Result> sp_tblAutoRefTestStudent_GetCurrentDateTest(Nullable<int> studentAutoId, Nullable<System.DateTime> autoRefStudentTransDate)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var autoRefStudentTransDateParameter = autoRefStudentTransDate.HasValue ?
                new ObjectParameter("AutoRefStudentTransDate", autoRefStudentTransDate) :
                new ObjectParameter("AutoRefStudentTransDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestStudent_GetCurrentDateTest_Result>("sp_tblAutoRefTestStudent_GetCurrentDateTest", studentAutoIdParameter, autoRefStudentTransDateParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestStudent_GetDetail_Result> sp_tblAutoRefTestStudent_GetDetail(Nullable<int> autoRefStudentId)
        {
            var autoRefStudentIdParameter = autoRefStudentId.HasValue ?
                new ObjectParameter("AutoRefStudentId", autoRefStudentId) :
                new ObjectParameter("AutoRefStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestStudent_GetDetail_Result>("sp_tblAutoRefTestStudent_GetDetail", autoRefStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestStudent_GetGridData_Result> sp_tblAutoRefTestStudent_GetGridData(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestStudent_GetGridData_Result>("sp_tblAutoRefTestStudent_GetGridData", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<string> sp_tblAutoRefTestStudent_GetMaxCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_tblAutoRefTestStudent_GetMaxCode");
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestStudent_GetPreviousTest_Result> sp_tblAutoRefTestStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestStudent_GetPreviousTest_Result>("sp_tblAutoRefTestStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestStudent_GetTestDetail_Grid_Result> sp_tblAutoRefTestStudent_GetTestDetail_Grid(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestStudent_GetTestDetail_Grid_Result>("sp_tblAutoRefTestStudent_GetTestDetail_Grid", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestStudent_InsertUpdate_Result> sp_tblAutoRefTestStudent_InsertUpdate(Nullable<int> autoRefStudentId, string autoRefStudentTransId, Nullable<System.DateTime> autoRefStudentTransDate, Nullable<int> studentAutoId, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var autoRefStudentIdParameter = autoRefStudentId.HasValue ?
                new ObjectParameter("AutoRefStudentId", autoRefStudentId) :
                new ObjectParameter("AutoRefStudentId", typeof(int));
    
            var autoRefStudentTransIdParameter = autoRefStudentTransId != null ?
                new ObjectParameter("AutoRefStudentTransId", autoRefStudentTransId) :
                new ObjectParameter("AutoRefStudentTransId", typeof(string));
    
            var autoRefStudentTransDateParameter = autoRefStudentTransDate.HasValue ?
                new ObjectParameter("AutoRefStudentTransDate", autoRefStudentTransDate) :
                new ObjectParameter("AutoRefStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestStudent_InsertUpdate_Result>("sp_tblAutoRefTestStudent_InsertUpdate", autoRefStudentIdParameter, autoRefStudentTransIdParameter, autoRefStudentTransDateParameter, studentAutoIdParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestTeacher_Delete_Result> sp_tblAutoRefTestTeacher_Delete(Nullable<int> autoRefTeacherId)
        {
            var autoRefTeacherIdParameter = autoRefTeacherId.HasValue ?
                new ObjectParameter("AutoRefTeacherId", autoRefTeacherId) :
                new ObjectParameter("AutoRefTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestTeacher_Delete_Result>("sp_tblAutoRefTestTeacher_Delete", autoRefTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestTeacher_GetDetail_Result> sp_tblAutoRefTestTeacher_GetDetail(Nullable<int> autoRefTeacherId)
        {
            var autoRefTeacherIdParameter = autoRefTeacherId.HasValue ?
                new ObjectParameter("AutoRefTeacherId", autoRefTeacherId) :
                new ObjectParameter("AutoRefTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestTeacher_GetDetail_Result>("sp_tblAutoRefTestTeacher_GetDetail", autoRefTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestTeacher_GetGridData_Result> sp_tblAutoRefTestTeacher_GetGridData(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestTeacher_GetGridData_Result>("sp_tblAutoRefTestTeacher_GetGridData", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<string> sp_tblAutoRefTestTeacher_GetMaxCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_tblAutoRefTestTeacher_GetMaxCode");
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestTeacher_GetPreviousTest_Result> sp_tblAutoRefTestTeacher_GetPreviousTest(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestTeacher_GetPreviousTest_Result>("sp_tblAutoRefTestTeacher_GetPreviousTest", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestTeacher_GetTestDetail_Grid_Result> sp_tblAutoRefTestTeacher_GetTestDetail_Grid(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestTeacher_GetTestDetail_Grid_Result>("sp_tblAutoRefTestTeacher_GetTestDetail_Grid", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestTeacher_InsertUpdate_Result> sp_tblAutoRefTestTeacher_InsertUpdate(Nullable<int> autoRefTeacherId, string autoRefTeacherTransId, Nullable<System.DateTime> autoRefTeacherTransDate, Nullable<int> teacherAutoId, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var autoRefTeacherIdParameter = autoRefTeacherId.HasValue ?
                new ObjectParameter("AutoRefTeacherId", autoRefTeacherId) :
                new ObjectParameter("AutoRefTeacherId", typeof(int));
    
            var autoRefTeacherTransIdParameter = autoRefTeacherTransId != null ?
                new ObjectParameter("AutoRefTeacherTransId", autoRefTeacherTransId) :
                new ObjectParameter("AutoRefTeacherTransId", typeof(string));
    
            var autoRefTeacherTransDateParameter = autoRefTeacherTransDate.HasValue ?
                new ObjectParameter("AutoRefTeacherTransDate", autoRefTeacherTransDate) :
                new ObjectParameter("AutoRefTeacherTransDate", typeof(System.DateTime));
    
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestTeacher_InsertUpdate_Result>("sp_tblAutoRefTestTeacher_InsertUpdate", autoRefTeacherIdParameter, autoRefTeacherTransIdParameter, autoRefTeacherTransDateParameter, teacherAutoIdParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblClass_Delete_Result> sp_tblClass_Delete(Nullable<int> classAutoId)
        {
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblClass_Delete_Result>("sp_tblClass_Delete", classAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblClass_GetDetail_Result> sp_tblClass_GetDetail(Nullable<int> classAutoId)
        {
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblClass_GetDetail_Result>("sp_tblClass_GetDetail", classAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblClass_InsertUpdate_Result> sp_tblClass_InsertUpdate(Nullable<int> classAutoId, string classNo, string classSection, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var classNoParameter = classNo != null ?
                new ObjectParameter("ClassNo", classNo) :
                new ObjectParameter("ClassNo", typeof(string));
    
            var classSectionParameter = classSection != null ?
                new ObjectParameter("ClassSection", classSection) :
                new ObjectParameter("ClassSection", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblClass_InsertUpdate_Result>("sp_tblClass_InsertUpdate", classAutoIdParameter, classNoParameter, classSectionParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblCycloRefractionStudent_Delete_Result> sp_tblCycloRefractionStudent_Delete(Nullable<int> cycloRefractionStudentId)
        {
            var cycloRefractionStudentIdParameter = cycloRefractionStudentId.HasValue ?
                new ObjectParameter("CycloRefractionStudentId", cycloRefractionStudentId) :
                new ObjectParameter("CycloRefractionStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblCycloRefractionStudent_Delete_Result>("sp_tblCycloRefractionStudent_Delete", cycloRefractionStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblCycloRefractionStudent_GetPreviousTest_Result> sp_tblCycloRefractionStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblCycloRefractionStudent_GetPreviousTest_Result>("sp_tblCycloRefractionStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblHospital_Delete_Result> sp_tblHospital_Delete(Nullable<int> hospitalAutoId)
        {
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblHospital_Delete_Result>("sp_tblHospital_Delete", hospitalAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblMedicine_Delete_Result> sp_tblMedicine_Delete(Nullable<int> medicineAutoId)
        {
            var medicineAutoIdParameter = medicineAutoId.HasValue ?
                new ObjectParameter("MedicineAutoId", medicineAutoId) :
                new ObjectParameter("MedicineAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicine_Delete_Result>("sp_tblMedicine_Delete", medicineAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblMedicine_GetDetail_Result> sp_tblMedicine_GetDetail(Nullable<int> medicineAutoId)
        {
            var medicineAutoIdParameter = medicineAutoId.HasValue ?
                new ObjectParameter("MedicineAutoId", medicineAutoId) :
                new ObjectParameter("MedicineAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicine_GetDetail_Result>("sp_tblMedicine_GetDetail", medicineAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblMedicine_InsertUpdate_Result> sp_tblMedicine_InsertUpdate(Nullable<int> medicineAutoId, string medicineDescription)
        {
            var medicineAutoIdParameter = medicineAutoId.HasValue ?
                new ObjectParameter("MedicineAutoId", medicineAutoId) :
                new ObjectParameter("MedicineAutoId", typeof(int));
    
            var medicineDescriptionParameter = medicineDescription != null ?
                new ObjectParameter("MedicineDescription", medicineDescription) :
                new ObjectParameter("MedicineDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicine_InsertUpdate_Result>("sp_tblMedicine_InsertUpdate", medicineAutoIdParameter, medicineDescriptionParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterStudent_Delete_Result> sp_tblOptometristMasterStudent_Delete(Nullable<int> optometristStudentId)
        {
            var optometristStudentIdParameter = optometristStudentId.HasValue ?
                new ObjectParameter("OptometristStudentId", optometristStudentId) :
                new ObjectParameter("OptometristStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterStudent_Delete_Result>("sp_tblOptometristMasterStudent_Delete", optometristStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterStudent_GetLastTest_Result> sp_tblOptometristMasterStudent_GetLastTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterStudent_GetLastTest_Result>("sp_tblOptometristMasterStudent_GetLastTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterStudent_GetPreviousTest_Result> sp_tblOptometristMasterStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterStudent_GetPreviousTest_Result>("sp_tblOptometristMasterStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterStudent_GetTransactionData_Result> sp_tblOptometristMasterStudent_GetTransactionData(Nullable<int> studentAutoId, Nullable<System.DateTime> optometristStudentTransDate)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var optometristStudentTransDateParameter = optometristStudentTransDate.HasValue ?
                new ObjectParameter("OptometristStudentTransDate", optometristStudentTransDate) :
                new ObjectParameter("OptometristStudentTransDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterStudent_GetTransactionData_Result>("sp_tblOptometristMasterStudent_GetTransactionData", studentAutoIdParameter, optometristStudentTransDateParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterStudent_InsertUpdate_Result> sp_tblOptometristMasterStudent_InsertUpdate(Nullable<int> optometristStudentId, Nullable<System.DateTime> optometristStudentTransDate, Nullable<int> studentAutoId, Nullable<int> hasChiefComplain, string chiefComplainRemarks, Nullable<int> hasOccularHistory, string occularHistoryRemarks, Nullable<int> hasMedicalHistory, string medicalHistoryRemarks, Nullable<int> distanceVision_RightEye_Unaided, Nullable<int> distanceVision_RightEye_WithGlasses, Nullable<int> distanceVision_RightEye_PinHole, Nullable<int> nearVision_RightEye, Nullable<int> needCycloRefraction_RightEye, string needCycloRefractionRemarks_RightEye, Nullable<int> distanceVision_LeftEye_Unaided, Nullable<int> distanceVision_LeftEye_WithGlasses, Nullable<int> distanceVision_LeftEye_PinHole, Nullable<int> nearVision_LeftEye, Nullable<int> needCycloRefraction_LeftEye, string needCycloRefractionRemarks_LeftEye, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> visualAcuity_RightEye, Nullable<int> visualAcuity_LeftEye, Nullable<int> squint_VA, Nullable<int> amblyopic_VA, Nullable<int> douchrome, string achromatopsia, Nullable<int> retinoScopy_RightEye, string cycloplegicRefraction_RightEye, string condition_RightEye, string meridian1_RightEye, string meridian2_RightEye, string finalPrescription_RightEye, Nullable<int> retinoScopy_LeftEye, string cycloplegicRefraction_LeftEye, string condition_LeftEye, string meridian1_LeftEye, string meridian2_LeftEye, string finalPrescription_LeftEye, Nullable<int> hirchberg_Distance, Nullable<int> hirchberg_Near, Nullable<int> ophthalmoscope_RightEye, Nullable<int> pupillaryReactions_RightEye, Nullable<int> coverUncovertTest_RightEye, string coverUncovertTestRemarks_RightEye, string extraOccularMuscleRemarks_RightEye, Nullable<int> ophthalmoscope_LeftEye, Nullable<int> pupillaryReactions_LeftEye, Nullable<int> coverUncovertTest_LeftEye, string coverUncovertTestRemarks_LeftEye, string extraOccularMuscleRemarks_LeftEye, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var optometristStudentIdParameter = optometristStudentId.HasValue ?
                new ObjectParameter("OptometristStudentId", optometristStudentId) :
                new ObjectParameter("OptometristStudentId", typeof(int));
    
            var optometristStudentTransDateParameter = optometristStudentTransDate.HasValue ?
                new ObjectParameter("OptometristStudentTransDate", optometristStudentTransDate) :
                new ObjectParameter("OptometristStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var hasChiefComplainParameter = hasChiefComplain.HasValue ?
                new ObjectParameter("HasChiefComplain", hasChiefComplain) :
                new ObjectParameter("HasChiefComplain", typeof(int));
    
            var chiefComplainRemarksParameter = chiefComplainRemarks != null ?
                new ObjectParameter("ChiefComplainRemarks", chiefComplainRemarks) :
                new ObjectParameter("ChiefComplainRemarks", typeof(string));
    
            var hasOccularHistoryParameter = hasOccularHistory.HasValue ?
                new ObjectParameter("HasOccularHistory", hasOccularHistory) :
                new ObjectParameter("HasOccularHistory", typeof(int));
    
            var occularHistoryRemarksParameter = occularHistoryRemarks != null ?
                new ObjectParameter("OccularHistoryRemarks", occularHistoryRemarks) :
                new ObjectParameter("OccularHistoryRemarks", typeof(string));
    
            var hasMedicalHistoryParameter = hasMedicalHistory.HasValue ?
                new ObjectParameter("HasMedicalHistory", hasMedicalHistory) :
                new ObjectParameter("HasMedicalHistory", typeof(int));
    
            var medicalHistoryRemarksParameter = medicalHistoryRemarks != null ?
                new ObjectParameter("MedicalHistoryRemarks", medicalHistoryRemarks) :
                new ObjectParameter("MedicalHistoryRemarks", typeof(string));
    
            var distanceVision_RightEye_UnaidedParameter = distanceVision_RightEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_Unaided", distanceVision_RightEye_Unaided) :
                new ObjectParameter("DistanceVision_RightEye_Unaided", typeof(int));
    
            var distanceVision_RightEye_WithGlassesParameter = distanceVision_RightEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", distanceVision_RightEye_WithGlasses) :
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", typeof(int));
    
            var distanceVision_RightEye_PinHoleParameter = distanceVision_RightEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_PinHole", distanceVision_RightEye_PinHole) :
                new ObjectParameter("DistanceVision_RightEye_PinHole", typeof(int));
    
            var nearVision_RightEyeParameter = nearVision_RightEye.HasValue ?
                new ObjectParameter("NearVision_RightEye", nearVision_RightEye) :
                new ObjectParameter("NearVision_RightEye", typeof(int));
    
            var needCycloRefraction_RightEyeParameter = needCycloRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedCycloRefraction_RightEye", needCycloRefraction_RightEye) :
                new ObjectParameter("NeedCycloRefraction_RightEye", typeof(int));
    
            var needCycloRefractionRemarks_RightEyeParameter = needCycloRefractionRemarks_RightEye != null ?
                new ObjectParameter("NeedCycloRefractionRemarks_RightEye", needCycloRefractionRemarks_RightEye) :
                new ObjectParameter("NeedCycloRefractionRemarks_RightEye", typeof(string));
    
            var distanceVision_LeftEye_UnaidedParameter = distanceVision_LeftEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_Unaided", distanceVision_LeftEye_Unaided) :
                new ObjectParameter("DistanceVision_LeftEye_Unaided", typeof(int));
    
            var distanceVision_LeftEye_WithGlassesParameter = distanceVision_LeftEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", distanceVision_LeftEye_WithGlasses) :
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", typeof(int));
    
            var distanceVision_LeftEye_PinHoleParameter = distanceVision_LeftEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_PinHole", distanceVision_LeftEye_PinHole) :
                new ObjectParameter("DistanceVision_LeftEye_PinHole", typeof(int));
    
            var nearVision_LeftEyeParameter = nearVision_LeftEye.HasValue ?
                new ObjectParameter("NearVision_LeftEye", nearVision_LeftEye) :
                new ObjectParameter("NearVision_LeftEye", typeof(int));
    
            var needCycloRefraction_LeftEyeParameter = needCycloRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedCycloRefraction_LeftEye", needCycloRefraction_LeftEye) :
                new ObjectParameter("NeedCycloRefraction_LeftEye", typeof(int));
    
            var needCycloRefractionRemarks_LeftEyeParameter = needCycloRefractionRemarks_LeftEye != null ?
                new ObjectParameter("NeedCycloRefractionRemarks_LeftEye", needCycloRefractionRemarks_LeftEye) :
                new ObjectParameter("NeedCycloRefractionRemarks_LeftEye", typeof(string));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var visualAcuity_RightEyeParameter = visualAcuity_RightEye.HasValue ?
                new ObjectParameter("VisualAcuity_RightEye", visualAcuity_RightEye) :
                new ObjectParameter("VisualAcuity_RightEye", typeof(int));
    
            var visualAcuity_LeftEyeParameter = visualAcuity_LeftEye.HasValue ?
                new ObjectParameter("VisualAcuity_LeftEye", visualAcuity_LeftEye) :
                new ObjectParameter("VisualAcuity_LeftEye", typeof(int));
    
            var squint_VAParameter = squint_VA.HasValue ?
                new ObjectParameter("Squint_VA", squint_VA) :
                new ObjectParameter("Squint_VA", typeof(int));
    
            var amblyopic_VAParameter = amblyopic_VA.HasValue ?
                new ObjectParameter("Amblyopic_VA", amblyopic_VA) :
                new ObjectParameter("Amblyopic_VA", typeof(int));
    
            var douchromeParameter = douchrome.HasValue ?
                new ObjectParameter("Douchrome", douchrome) :
                new ObjectParameter("Douchrome", typeof(int));
    
            var achromatopsiaParameter = achromatopsia != null ?
                new ObjectParameter("Achromatopsia", achromatopsia) :
                new ObjectParameter("Achromatopsia", typeof(string));
    
            var retinoScopy_RightEyeParameter = retinoScopy_RightEye.HasValue ?
                new ObjectParameter("RetinoScopy_RightEye", retinoScopy_RightEye) :
                new ObjectParameter("RetinoScopy_RightEye", typeof(int));
    
            var cycloplegicRefraction_RightEyeParameter = cycloplegicRefraction_RightEye != null ?
                new ObjectParameter("CycloplegicRefraction_RightEye", cycloplegicRefraction_RightEye) :
                new ObjectParameter("CycloplegicRefraction_RightEye", typeof(string));
    
            var condition_RightEyeParameter = condition_RightEye != null ?
                new ObjectParameter("Condition_RightEye", condition_RightEye) :
                new ObjectParameter("Condition_RightEye", typeof(string));
    
            var meridian1_RightEyeParameter = meridian1_RightEye != null ?
                new ObjectParameter("Meridian1_RightEye", meridian1_RightEye) :
                new ObjectParameter("Meridian1_RightEye", typeof(string));
    
            var meridian2_RightEyeParameter = meridian2_RightEye != null ?
                new ObjectParameter("Meridian2_RightEye", meridian2_RightEye) :
                new ObjectParameter("Meridian2_RightEye", typeof(string));
    
            var finalPrescription_RightEyeParameter = finalPrescription_RightEye != null ?
                new ObjectParameter("FinalPrescription_RightEye", finalPrescription_RightEye) :
                new ObjectParameter("FinalPrescription_RightEye", typeof(string));
    
            var retinoScopy_LeftEyeParameter = retinoScopy_LeftEye.HasValue ?
                new ObjectParameter("RetinoScopy_LeftEye", retinoScopy_LeftEye) :
                new ObjectParameter("RetinoScopy_LeftEye", typeof(int));
    
            var cycloplegicRefraction_LeftEyeParameter = cycloplegicRefraction_LeftEye != null ?
                new ObjectParameter("CycloplegicRefraction_LeftEye", cycloplegicRefraction_LeftEye) :
                new ObjectParameter("CycloplegicRefraction_LeftEye", typeof(string));
    
            var condition_LeftEyeParameter = condition_LeftEye != null ?
                new ObjectParameter("Condition_LeftEye", condition_LeftEye) :
                new ObjectParameter("Condition_LeftEye", typeof(string));
    
            var meridian1_LeftEyeParameter = meridian1_LeftEye != null ?
                new ObjectParameter("Meridian1_LeftEye", meridian1_LeftEye) :
                new ObjectParameter("Meridian1_LeftEye", typeof(string));
    
            var meridian2_LeftEyeParameter = meridian2_LeftEye != null ?
                new ObjectParameter("Meridian2_LeftEye", meridian2_LeftEye) :
                new ObjectParameter("Meridian2_LeftEye", typeof(string));
    
            var finalPrescription_LeftEyeParameter = finalPrescription_LeftEye != null ?
                new ObjectParameter("FinalPrescription_LeftEye", finalPrescription_LeftEye) :
                new ObjectParameter("FinalPrescription_LeftEye", typeof(string));
    
            var hirchberg_DistanceParameter = hirchberg_Distance.HasValue ?
                new ObjectParameter("Hirchberg_Distance", hirchberg_Distance) :
                new ObjectParameter("Hirchberg_Distance", typeof(int));
    
            var hirchberg_NearParameter = hirchberg_Near.HasValue ?
                new ObjectParameter("Hirchberg_Near", hirchberg_Near) :
                new ObjectParameter("Hirchberg_Near", typeof(int));
    
            var ophthalmoscope_RightEyeParameter = ophthalmoscope_RightEye.HasValue ?
                new ObjectParameter("Ophthalmoscope_RightEye", ophthalmoscope_RightEye) :
                new ObjectParameter("Ophthalmoscope_RightEye", typeof(int));
    
            var pupillaryReactions_RightEyeParameter = pupillaryReactions_RightEye.HasValue ?
                new ObjectParameter("PupillaryReactions_RightEye", pupillaryReactions_RightEye) :
                new ObjectParameter("PupillaryReactions_RightEye", typeof(int));
    
            var coverUncovertTest_RightEyeParameter = coverUncovertTest_RightEye.HasValue ?
                new ObjectParameter("CoverUncovertTest_RightEye", coverUncovertTest_RightEye) :
                new ObjectParameter("CoverUncovertTest_RightEye", typeof(int));
    
            var coverUncovertTestRemarks_RightEyeParameter = coverUncovertTestRemarks_RightEye != null ?
                new ObjectParameter("CoverUncovertTestRemarks_RightEye", coverUncovertTestRemarks_RightEye) :
                new ObjectParameter("CoverUncovertTestRemarks_RightEye", typeof(string));
    
            var extraOccularMuscleRemarks_RightEyeParameter = extraOccularMuscleRemarks_RightEye != null ?
                new ObjectParameter("ExtraOccularMuscleRemarks_RightEye", extraOccularMuscleRemarks_RightEye) :
                new ObjectParameter("ExtraOccularMuscleRemarks_RightEye", typeof(string));
    
            var ophthalmoscope_LeftEyeParameter = ophthalmoscope_LeftEye.HasValue ?
                new ObjectParameter("Ophthalmoscope_LeftEye", ophthalmoscope_LeftEye) :
                new ObjectParameter("Ophthalmoscope_LeftEye", typeof(int));
    
            var pupillaryReactions_LeftEyeParameter = pupillaryReactions_LeftEye.HasValue ?
                new ObjectParameter("PupillaryReactions_LeftEye", pupillaryReactions_LeftEye) :
                new ObjectParameter("PupillaryReactions_LeftEye", typeof(int));
    
            var coverUncovertTest_LeftEyeParameter = coverUncovertTest_LeftEye.HasValue ?
                new ObjectParameter("CoverUncovertTest_LeftEye", coverUncovertTest_LeftEye) :
                new ObjectParameter("CoverUncovertTest_LeftEye", typeof(int));
    
            var coverUncovertTestRemarks_LeftEyeParameter = coverUncovertTestRemarks_LeftEye != null ?
                new ObjectParameter("CoverUncovertTestRemarks_LeftEye", coverUncovertTestRemarks_LeftEye) :
                new ObjectParameter("CoverUncovertTestRemarks_LeftEye", typeof(string));
    
            var extraOccularMuscleRemarks_LeftEyeParameter = extraOccularMuscleRemarks_LeftEye != null ?
                new ObjectParameter("ExtraOccularMuscleRemarks_LeftEye", extraOccularMuscleRemarks_LeftEye) :
                new ObjectParameter("ExtraOccularMuscleRemarks_LeftEye", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterStudent_InsertUpdate_Result>("sp_tblOptometristMasterStudent_InsertUpdate", optometristStudentIdParameter, optometristStudentTransDateParameter, studentAutoIdParameter, hasChiefComplainParameter, chiefComplainRemarksParameter, hasOccularHistoryParameter, occularHistoryRemarksParameter, hasMedicalHistoryParameter, medicalHistoryRemarksParameter, distanceVision_RightEye_UnaidedParameter, distanceVision_RightEye_WithGlassesParameter, distanceVision_RightEye_PinHoleParameter, nearVision_RightEyeParameter, needCycloRefraction_RightEyeParameter, needCycloRefractionRemarks_RightEyeParameter, distanceVision_LeftEye_UnaidedParameter, distanceVision_LeftEye_WithGlassesParameter, distanceVision_LeftEye_PinHoleParameter, nearVision_LeftEyeParameter, needCycloRefraction_LeftEyeParameter, needCycloRefractionRemarks_LeftEyeParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, visualAcuity_RightEyeParameter, visualAcuity_LeftEyeParameter, squint_VAParameter, amblyopic_VAParameter, douchromeParameter, achromatopsiaParameter, retinoScopy_RightEyeParameter, cycloplegicRefraction_RightEyeParameter, condition_RightEyeParameter, meridian1_RightEyeParameter, meridian2_RightEyeParameter, finalPrescription_RightEyeParameter, retinoScopy_LeftEyeParameter, cycloplegicRefraction_LeftEyeParameter, condition_LeftEyeParameter, meridian1_LeftEyeParameter, meridian2_LeftEyeParameter, finalPrescription_LeftEyeParameter, hirchberg_DistanceParameter, hirchberg_NearParameter, ophthalmoscope_RightEyeParameter, pupillaryReactions_RightEyeParameter, coverUncovertTest_RightEyeParameter, coverUncovertTestRemarks_RightEyeParameter, extraOccularMuscleRemarks_RightEyeParameter, ophthalmoscope_LeftEyeParameter, pupillaryReactions_LeftEyeParameter, coverUncovertTest_LeftEyeParameter, coverUncovertTestRemarks_LeftEyeParameter, extraOccularMuscleRemarks_LeftEyeParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterTeacher_Delete_Result> sp_tblOptometristMasterTeacher_Delete(Nullable<int> optometristTeacherId)
        {
            var optometristTeacherIdParameter = optometristTeacherId.HasValue ?
                new ObjectParameter("OptometristTeacherId", optometristTeacherId) :
                new ObjectParameter("OptometristTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterTeacher_Delete_Result>("sp_tblOptometristMasterTeacher_Delete", optometristTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterTeacher_GetLastTest_Result> sp_tblOptometristMasterTeacher_GetLastTest(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterTeacher_GetLastTest_Result>("sp_tblOptometristMasterTeacher_GetLastTest", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterTeacher_GetPreviousTest_Result> sp_tblOptometristMasterTeacher_GetPreviousTest(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterTeacher_GetPreviousTest_Result>("sp_tblOptometristMasterTeacher_GetPreviousTest", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterTeacher_InsertUpdate_Result> sp_tblOptometristMasterTeacher_InsertUpdate(Nullable<int> optometristTeacherId, Nullable<System.DateTime> optometristTeacherTransDate, Nullable<int> teacherAutoId, Nullable<int> hasChiefComplain, string chiefComplainRemarks, Nullable<int> hasOccularHistory, string occularHistoryRemarks, Nullable<int> hasMedicalHistory, string medicalHistoryRemarks, Nullable<int> distanceVision_RightEye_Unaided, Nullable<int> distanceVision_RightEye_WithGlasses, Nullable<int> distanceVision_RightEye_PinHole, Nullable<int> nearVision_RightEye, Nullable<int> needCycloRefraction_RightEye, string needCycloRefractionRemarks_RightEye, Nullable<int> distanceVision_LeftEye_Unaided, Nullable<int> distanceVision_LeftEye_WithGlasses, Nullable<int> distanceVision_LeftEye_PinHole, Nullable<int> nearVision_LeftEye, Nullable<int> needCycloRefraction_LeftEye, string needCycloRefractionRemarks_LeftEye, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> visualAcuity_RightEye, Nullable<int> visualAcuity_LeftEye, Nullable<int> squint_VA, Nullable<int> amblyopic_VA, Nullable<int> douchrome, string achromatopsia, Nullable<int> retinoScopy_RightEye, string cycloplegicRefraction_RightEye, string condition_RightEye, string meridian1_RightEye, string meridian2_RightEye, string finalPrescription_RightEye, Nullable<int> retinoScopy_LeftEye, string cycloplegicRefraction_LeftEye, string condition_LeftEye, string meridian1_LeftEye, string meridian2_LeftEye, string finalPrescription_LeftEye, Nullable<int> hirchberg_Distance, Nullable<int> hirchberg_Near, Nullable<int> ophthalmoscope_RightEye, Nullable<int> pupillaryReactions_RightEye, Nullable<int> coverUncovertTest_RightEye, string coverUncovertTestRemarks_RightEye, string extraOccularMuscleRemarks_RightEye, Nullable<int> ophthalmoscope_LeftEye, Nullable<int> pupillaryReactions_LeftEye, Nullable<int> coverUncovertTest_LeftEye, string coverUncovertTestRemarks_LeftEye, string extraOccularMuscleRemarks_LeftEye, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var optometristTeacherIdParameter = optometristTeacherId.HasValue ?
                new ObjectParameter("OptometristTeacherId", optometristTeacherId) :
                new ObjectParameter("OptometristTeacherId", typeof(int));
    
            var optometristTeacherTransDateParameter = optometristTeacherTransDate.HasValue ?
                new ObjectParameter("OptometristTeacherTransDate", optometristTeacherTransDate) :
                new ObjectParameter("OptometristTeacherTransDate", typeof(System.DateTime));
    
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var hasChiefComplainParameter = hasChiefComplain.HasValue ?
                new ObjectParameter("HasChiefComplain", hasChiefComplain) :
                new ObjectParameter("HasChiefComplain", typeof(int));
    
            var chiefComplainRemarksParameter = chiefComplainRemarks != null ?
                new ObjectParameter("ChiefComplainRemarks", chiefComplainRemarks) :
                new ObjectParameter("ChiefComplainRemarks", typeof(string));
    
            var hasOccularHistoryParameter = hasOccularHistory.HasValue ?
                new ObjectParameter("HasOccularHistory", hasOccularHistory) :
                new ObjectParameter("HasOccularHistory", typeof(int));
    
            var occularHistoryRemarksParameter = occularHistoryRemarks != null ?
                new ObjectParameter("OccularHistoryRemarks", occularHistoryRemarks) :
                new ObjectParameter("OccularHistoryRemarks", typeof(string));
    
            var hasMedicalHistoryParameter = hasMedicalHistory.HasValue ?
                new ObjectParameter("HasMedicalHistory", hasMedicalHistory) :
                new ObjectParameter("HasMedicalHistory", typeof(int));
    
            var medicalHistoryRemarksParameter = medicalHistoryRemarks != null ?
                new ObjectParameter("MedicalHistoryRemarks", medicalHistoryRemarks) :
                new ObjectParameter("MedicalHistoryRemarks", typeof(string));
    
            var distanceVision_RightEye_UnaidedParameter = distanceVision_RightEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_Unaided", distanceVision_RightEye_Unaided) :
                new ObjectParameter("DistanceVision_RightEye_Unaided", typeof(int));
    
            var distanceVision_RightEye_WithGlassesParameter = distanceVision_RightEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", distanceVision_RightEye_WithGlasses) :
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", typeof(int));
    
            var distanceVision_RightEye_PinHoleParameter = distanceVision_RightEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_PinHole", distanceVision_RightEye_PinHole) :
                new ObjectParameter("DistanceVision_RightEye_PinHole", typeof(int));
    
            var nearVision_RightEyeParameter = nearVision_RightEye.HasValue ?
                new ObjectParameter("NearVision_RightEye", nearVision_RightEye) :
                new ObjectParameter("NearVision_RightEye", typeof(int));
    
            var needCycloRefraction_RightEyeParameter = needCycloRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedCycloRefraction_RightEye", needCycloRefraction_RightEye) :
                new ObjectParameter("NeedCycloRefraction_RightEye", typeof(int));
    
            var needCycloRefractionRemarks_RightEyeParameter = needCycloRefractionRemarks_RightEye != null ?
                new ObjectParameter("NeedCycloRefractionRemarks_RightEye", needCycloRefractionRemarks_RightEye) :
                new ObjectParameter("NeedCycloRefractionRemarks_RightEye", typeof(string));
    
            var distanceVision_LeftEye_UnaidedParameter = distanceVision_LeftEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_Unaided", distanceVision_LeftEye_Unaided) :
                new ObjectParameter("DistanceVision_LeftEye_Unaided", typeof(int));
    
            var distanceVision_LeftEye_WithGlassesParameter = distanceVision_LeftEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", distanceVision_LeftEye_WithGlasses) :
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", typeof(int));
    
            var distanceVision_LeftEye_PinHoleParameter = distanceVision_LeftEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_PinHole", distanceVision_LeftEye_PinHole) :
                new ObjectParameter("DistanceVision_LeftEye_PinHole", typeof(int));
    
            var nearVision_LeftEyeParameter = nearVision_LeftEye.HasValue ?
                new ObjectParameter("NearVision_LeftEye", nearVision_LeftEye) :
                new ObjectParameter("NearVision_LeftEye", typeof(int));
    
            var needCycloRefraction_LeftEyeParameter = needCycloRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedCycloRefraction_LeftEye", needCycloRefraction_LeftEye) :
                new ObjectParameter("NeedCycloRefraction_LeftEye", typeof(int));
    
            var needCycloRefractionRemarks_LeftEyeParameter = needCycloRefractionRemarks_LeftEye != null ?
                new ObjectParameter("NeedCycloRefractionRemarks_LeftEye", needCycloRefractionRemarks_LeftEye) :
                new ObjectParameter("NeedCycloRefractionRemarks_LeftEye", typeof(string));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var visualAcuity_RightEyeParameter = visualAcuity_RightEye.HasValue ?
                new ObjectParameter("VisualAcuity_RightEye", visualAcuity_RightEye) :
                new ObjectParameter("VisualAcuity_RightEye", typeof(int));
    
            var visualAcuity_LeftEyeParameter = visualAcuity_LeftEye.HasValue ?
                new ObjectParameter("VisualAcuity_LeftEye", visualAcuity_LeftEye) :
                new ObjectParameter("VisualAcuity_LeftEye", typeof(int));
    
            var squint_VAParameter = squint_VA.HasValue ?
                new ObjectParameter("Squint_VA", squint_VA) :
                new ObjectParameter("Squint_VA", typeof(int));
    
            var amblyopic_VAParameter = amblyopic_VA.HasValue ?
                new ObjectParameter("Amblyopic_VA", amblyopic_VA) :
                new ObjectParameter("Amblyopic_VA", typeof(int));
    
            var douchromeParameter = douchrome.HasValue ?
                new ObjectParameter("Douchrome", douchrome) :
                new ObjectParameter("Douchrome", typeof(int));
    
            var achromatopsiaParameter = achromatopsia != null ?
                new ObjectParameter("Achromatopsia", achromatopsia) :
                new ObjectParameter("Achromatopsia", typeof(string));
    
            var retinoScopy_RightEyeParameter = retinoScopy_RightEye.HasValue ?
                new ObjectParameter("RetinoScopy_RightEye", retinoScopy_RightEye) :
                new ObjectParameter("RetinoScopy_RightEye", typeof(int));
    
            var cycloplegicRefraction_RightEyeParameter = cycloplegicRefraction_RightEye != null ?
                new ObjectParameter("CycloplegicRefraction_RightEye", cycloplegicRefraction_RightEye) :
                new ObjectParameter("CycloplegicRefraction_RightEye", typeof(string));
    
            var condition_RightEyeParameter = condition_RightEye != null ?
                new ObjectParameter("Condition_RightEye", condition_RightEye) :
                new ObjectParameter("Condition_RightEye", typeof(string));
    
            var meridian1_RightEyeParameter = meridian1_RightEye != null ?
                new ObjectParameter("Meridian1_RightEye", meridian1_RightEye) :
                new ObjectParameter("Meridian1_RightEye", typeof(string));
    
            var meridian2_RightEyeParameter = meridian2_RightEye != null ?
                new ObjectParameter("Meridian2_RightEye", meridian2_RightEye) :
                new ObjectParameter("Meridian2_RightEye", typeof(string));
    
            var finalPrescription_RightEyeParameter = finalPrescription_RightEye != null ?
                new ObjectParameter("FinalPrescription_RightEye", finalPrescription_RightEye) :
                new ObjectParameter("FinalPrescription_RightEye", typeof(string));
    
            var retinoScopy_LeftEyeParameter = retinoScopy_LeftEye.HasValue ?
                new ObjectParameter("RetinoScopy_LeftEye", retinoScopy_LeftEye) :
                new ObjectParameter("RetinoScopy_LeftEye", typeof(int));
    
            var cycloplegicRefraction_LeftEyeParameter = cycloplegicRefraction_LeftEye != null ?
                new ObjectParameter("CycloplegicRefraction_LeftEye", cycloplegicRefraction_LeftEye) :
                new ObjectParameter("CycloplegicRefraction_LeftEye", typeof(string));
    
            var condition_LeftEyeParameter = condition_LeftEye != null ?
                new ObjectParameter("Condition_LeftEye", condition_LeftEye) :
                new ObjectParameter("Condition_LeftEye", typeof(string));
    
            var meridian1_LeftEyeParameter = meridian1_LeftEye != null ?
                new ObjectParameter("Meridian1_LeftEye", meridian1_LeftEye) :
                new ObjectParameter("Meridian1_LeftEye", typeof(string));
    
            var meridian2_LeftEyeParameter = meridian2_LeftEye != null ?
                new ObjectParameter("Meridian2_LeftEye", meridian2_LeftEye) :
                new ObjectParameter("Meridian2_LeftEye", typeof(string));
    
            var finalPrescription_LeftEyeParameter = finalPrescription_LeftEye != null ?
                new ObjectParameter("FinalPrescription_LeftEye", finalPrescription_LeftEye) :
                new ObjectParameter("FinalPrescription_LeftEye", typeof(string));
    
            var hirchberg_DistanceParameter = hirchberg_Distance.HasValue ?
                new ObjectParameter("Hirchberg_Distance", hirchberg_Distance) :
                new ObjectParameter("Hirchberg_Distance", typeof(int));
    
            var hirchberg_NearParameter = hirchberg_Near.HasValue ?
                new ObjectParameter("Hirchberg_Near", hirchberg_Near) :
                new ObjectParameter("Hirchberg_Near", typeof(int));
    
            var ophthalmoscope_RightEyeParameter = ophthalmoscope_RightEye.HasValue ?
                new ObjectParameter("Ophthalmoscope_RightEye", ophthalmoscope_RightEye) :
                new ObjectParameter("Ophthalmoscope_RightEye", typeof(int));
    
            var pupillaryReactions_RightEyeParameter = pupillaryReactions_RightEye.HasValue ?
                new ObjectParameter("PupillaryReactions_RightEye", pupillaryReactions_RightEye) :
                new ObjectParameter("PupillaryReactions_RightEye", typeof(int));
    
            var coverUncovertTest_RightEyeParameter = coverUncovertTest_RightEye.HasValue ?
                new ObjectParameter("CoverUncovertTest_RightEye", coverUncovertTest_RightEye) :
                new ObjectParameter("CoverUncovertTest_RightEye", typeof(int));
    
            var coverUncovertTestRemarks_RightEyeParameter = coverUncovertTestRemarks_RightEye != null ?
                new ObjectParameter("CoverUncovertTestRemarks_RightEye", coverUncovertTestRemarks_RightEye) :
                new ObjectParameter("CoverUncovertTestRemarks_RightEye", typeof(string));
    
            var extraOccularMuscleRemarks_RightEyeParameter = extraOccularMuscleRemarks_RightEye != null ?
                new ObjectParameter("ExtraOccularMuscleRemarks_RightEye", extraOccularMuscleRemarks_RightEye) :
                new ObjectParameter("ExtraOccularMuscleRemarks_RightEye", typeof(string));
    
            var ophthalmoscope_LeftEyeParameter = ophthalmoscope_LeftEye.HasValue ?
                new ObjectParameter("Ophthalmoscope_LeftEye", ophthalmoscope_LeftEye) :
                new ObjectParameter("Ophthalmoscope_LeftEye", typeof(int));
    
            var pupillaryReactions_LeftEyeParameter = pupillaryReactions_LeftEye.HasValue ?
                new ObjectParameter("PupillaryReactions_LeftEye", pupillaryReactions_LeftEye) :
                new ObjectParameter("PupillaryReactions_LeftEye", typeof(int));
    
            var coverUncovertTest_LeftEyeParameter = coverUncovertTest_LeftEye.HasValue ?
                new ObjectParameter("CoverUncovertTest_LeftEye", coverUncovertTest_LeftEye) :
                new ObjectParameter("CoverUncovertTest_LeftEye", typeof(int));
    
            var coverUncovertTestRemarks_LeftEyeParameter = coverUncovertTestRemarks_LeftEye != null ?
                new ObjectParameter("CoverUncovertTestRemarks_LeftEye", coverUncovertTestRemarks_LeftEye) :
                new ObjectParameter("CoverUncovertTestRemarks_LeftEye", typeof(string));
    
            var extraOccularMuscleRemarks_LeftEyeParameter = extraOccularMuscleRemarks_LeftEye != null ?
                new ObjectParameter("ExtraOccularMuscleRemarks_LeftEye", extraOccularMuscleRemarks_LeftEye) :
                new ObjectParameter("ExtraOccularMuscleRemarks_LeftEye", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterTeacher_InsertUpdate_Result>("sp_tblOptometristMasterTeacher_InsertUpdate", optometristTeacherIdParameter, optometristTeacherTransDateParameter, teacherAutoIdParameter, hasChiefComplainParameter, chiefComplainRemarksParameter, hasOccularHistoryParameter, occularHistoryRemarksParameter, hasMedicalHistoryParameter, medicalHistoryRemarksParameter, distanceVision_RightEye_UnaidedParameter, distanceVision_RightEye_WithGlassesParameter, distanceVision_RightEye_PinHoleParameter, nearVision_RightEyeParameter, needCycloRefraction_RightEyeParameter, needCycloRefractionRemarks_RightEyeParameter, distanceVision_LeftEye_UnaidedParameter, distanceVision_LeftEye_WithGlassesParameter, distanceVision_LeftEye_PinHoleParameter, nearVision_LeftEyeParameter, needCycloRefraction_LeftEyeParameter, needCycloRefractionRemarks_LeftEyeParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, visualAcuity_RightEyeParameter, visualAcuity_LeftEyeParameter, squint_VAParameter, amblyopic_VAParameter, douchromeParameter, achromatopsiaParameter, retinoScopy_RightEyeParameter, cycloplegicRefraction_RightEyeParameter, condition_RightEyeParameter, meridian1_RightEyeParameter, meridian2_RightEyeParameter, finalPrescription_RightEyeParameter, retinoScopy_LeftEyeParameter, cycloplegicRefraction_LeftEyeParameter, condition_LeftEyeParameter, meridian1_LeftEyeParameter, meridian2_LeftEyeParameter, finalPrescription_LeftEyeParameter, hirchberg_DistanceParameter, hirchberg_NearParameter, ophthalmoscope_RightEyeParameter, pupillaryReactions_RightEyeParameter, coverUncovertTest_RightEyeParameter, coverUncovertTestRemarks_RightEyeParameter, extraOccularMuscleRemarks_RightEyeParameter, ophthalmoscope_LeftEyeParameter, pupillaryReactions_LeftEyeParameter, coverUncovertTest_LeftEyeParameter, coverUncovertTestRemarks_LeftEyeParameter, extraOccularMuscleRemarks_LeftEyeParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblSection_Delete_Result> sp_tblSection_Delete(Nullable<int> sectionAutoId)
        {
            var sectionAutoIdParameter = sectionAutoId.HasValue ?
                new ObjectParameter("SectionAutoId", sectionAutoId) :
                new ObjectParameter("SectionAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSection_Delete_Result>("sp_tblSection_Delete", sectionAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblSection_GetDetail_Result> sp_tblSection_GetDetail(Nullable<int> sectionAutoId)
        {
            var sectionAutoIdParameter = sectionAutoId.HasValue ?
                new ObjectParameter("SectionAutoId", sectionAutoId) :
                new ObjectParameter("SectionAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSection_GetDetail_Result>("sp_tblSection_GetDetail", sectionAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblSection_GetSummary_Result> sp_tblSection_GetSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSection_GetSummary_Result>("sp_tblSection_GetSummary");
        }
    
        public virtual ObjectResult<sp_tblSection_InsertUpdate_Result> sp_tblSection_InsertUpdate(Nullable<int> sectionAutoId, string classSection)
        {
            var sectionAutoIdParameter = sectionAutoId.HasValue ?
                new ObjectParameter("SectionAutoId", sectionAutoId) :
                new ObjectParameter("SectionAutoId", typeof(int));
    
            var classSectionParameter = classSection != null ?
                new ObjectParameter("ClassSection", classSection) :
                new ObjectParameter("ClassSection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSection_InsertUpdate_Result>("sp_tblSection_InsertUpdate", sectionAutoIdParameter, classSectionParameter);
        }
    
        public virtual ObjectResult<sp_tblStudent_Delete_Result> sp_tblStudent_Delete(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblStudent_Delete_Result>("sp_tblStudent_Delete", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<string> sp_tblStudent_GetMaxCode(string schoolCode)
        {
            var schoolCodeParameter = schoolCode != null ?
                new ObjectParameter("SchoolCode", schoolCode) :
                new ObjectParameter("SchoolCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_tblStudent_GetMaxCode", schoolCodeParameter);
        }
    
        public virtual ObjectResult<sp_tblStudentImage_Delete_Result> sp_tblStudentImage_Delete(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblStudentImage_Delete_Result>("sp_tblStudentImage_Delete", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblStudentImage_GetAllImages_Result> sp_tblStudentImage_GetAllImages(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblStudentImage_GetAllImages_Result>("sp_tblStudentImage_GetAllImages", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblStudentImage_GetDetail_Result> sp_tblStudentImage_GetDetail(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblStudentImage_GetDetail_Result>("sp_tblStudentImage_GetDetail", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblStudentImage_InsertUpdate_Result> sp_tblStudentImage_InsertUpdate(Nullable<int> studentAutoId, byte[] studentPic, string fileType, Nullable<int> fileSize, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var studentPicParameter = studentPic != null ?
                new ObjectParameter("StudentPic", studentPic) :
                new ObjectParameter("StudentPic", typeof(byte[]));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblStudentImage_InsertUpdate_Result>("sp_tblStudentImage_InsertUpdate", studentAutoIdParameter, studentPicParameter, fileTypeParameter, fileSizeParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblTeacher_Delete_Result> sp_tblTeacher_Delete(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTeacher_Delete_Result>("sp_tblTeacher_Delete", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<string> sp_tblTeacher_GetMaxCode(string schoolCode)
        {
            var schoolCodeParameter = schoolCode != null ?
                new ObjectParameter("SchoolCode", schoolCode) :
                new ObjectParameter("SchoolCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_tblTeacher_GetMaxCode", schoolCodeParameter);
        }
    
        public virtual ObjectResult<sp_tblTeacherImage_Delete_Result> sp_tblTeacherImage_Delete(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTeacherImage_Delete_Result>("sp_tblTeacherImage_Delete", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTeacherImage_GetDetail_Result> sp_tblTeacherImage_GetDetail(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTeacherImage_GetDetail_Result>("sp_tblTeacherImage_GetDetail", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTeacherImage_InsertUpdate_Result> sp_tblTeacherImage_InsertUpdate(Nullable<int> teacherAutoId, byte[] teacherPic, string fileType, Nullable<int> fileSize, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var teacherPicParameter = teacherPic != null ?
                new ObjectParameter("TeacherPic", teacherPic) :
                new ObjectParameter("TeacherPic", typeof(byte[]));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTeacherImage_InsertUpdate_Result>("sp_tblTeacherImage_InsertUpdate", teacherAutoIdParameter, teacherPicParameter, fileTypeParameter, fileSizeParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudent_GetPreviousTest_Result> sp_tblTreatmentStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudent_GetPreviousTest_Result>("sp_tblTreatmentStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentTeacher_Delete_Result> sp_tblTreatmentTeacher_Delete(Nullable<int> treatmentTeacherId)
        {
            var treatmentTeacherIdParameter = treatmentTeacherId.HasValue ?
                new ObjectParameter("TreatmentTeacherId", treatmentTeacherId) :
                new ObjectParameter("TreatmentTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentTeacher_Delete_Result>("sp_tblTreatmentTeacher_Delete", treatmentTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentTeacher_GetPreviousTest_Result> sp_tblTreatmentTeacher_GetPreviousTest(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentTeacher_GetPreviousTest_Result>("sp_tblTreatmentTeacher_GetPreviousTest", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblUser_Delete_Result> sp_tblUser_Delete(Nullable<int> userAutoId)
        {
            var userAutoIdParameter = userAutoId.HasValue ?
                new ObjectParameter("UserAutoId", userAutoId) :
                new ObjectParameter("UserAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblUser_Delete_Result>("sp_tblUser_Delete", userAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblUser_GetDetail_Result> sp_tblUser_GetDetail(Nullable<int> userAutoId)
        {
            var userAutoIdParameter = userAutoId.HasValue ?
                new ObjectParameter("UserAutoId", userAutoId) :
                new ObjectParameter("UserAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblUser_GetDetail_Result>("sp_tblUser_GetDetail", userAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblUser_GetSummary_Result> sp_tblUser_GetSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblUser_GetSummary_Result>("sp_tblUser_GetSummary");
        }
    
        public virtual ObjectResult<sp_tblUser_InsertUpdate_Result> sp_tblUser_InsertUpdate(Nullable<int> userAutoId, string userId, string password, string username, string email)
        {
            var userAutoIdParameter = userAutoId.HasValue ?
                new ObjectParameter("UserAutoId", userAutoId) :
                new ObjectParameter("UserAutoId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblUser_InsertUpdate_Result>("sp_tblUser_InsertUpdate", userAutoIdParameter, userIdParameter, passwordParameter, usernameParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_tblUser_UpdateActiveStatus_Result> sp_tblUser_UpdateActiveStatus(Nullable<int> userAutoId, Nullable<bool> isActive)
        {
            var userAutoIdParameter = userAutoId.HasValue ?
                new ObjectParameter("UserAutoId", userAutoId) :
                new ObjectParameter("UserAutoId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblUser_UpdateActiveStatus_Result>("sp_tblUser_UpdateActiveStatus", userAutoIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitAfterSurgeryStudent_Delete_Result> sp_tblVisitAfterSurgeryStudent_Delete(Nullable<int> visitAfterSurgeryStudentId)
        {
            var visitAfterSurgeryStudentIdParameter = visitAfterSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitAfterSurgeryStudentId", visitAfterSurgeryStudentId) :
                new ObjectParameter("VisitAfterSurgeryStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitAfterSurgeryStudent_Delete_Result>("sp_tblVisitAfterSurgeryStudent_Delete", visitAfterSurgeryStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitAfterSurgeryStudent_GetPreviousTest_Result> sp_tblVisitAfterSurgeryStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitAfterSurgeryStudent_GetPreviousTest_Result>("sp_tblVisitAfterSurgeryStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForSquintAssessmentStudent_Delete_Result> sp_tblVisitForSquintAssessmentStudent_Delete(Nullable<int> visitForSquintAssessmentStudentId)
        {
            var visitForSquintAssessmentStudentIdParameter = visitForSquintAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForSquintAssessmentStudentId", visitForSquintAssessmentStudentId) :
                new ObjectParameter("VisitForSquintAssessmentStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForSquintAssessmentStudent_Delete_Result>("sp_tblVisitForSquintAssessmentStudent_Delete", visitForSquintAssessmentStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForSquintAssessmentStudent_GetDetail_Result> sp_tblVisitForSquintAssessmentStudent_GetDetail(Nullable<int> visitForSquintAssessmentStudentId)
        {
            var visitForSquintAssessmentStudentIdParameter = visitForSquintAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForSquintAssessmentStudentId", visitForSquintAssessmentStudentId) :
                new ObjectParameter("VisitForSquintAssessmentStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForSquintAssessmentStudent_GetDetail_Result>("sp_tblVisitForSquintAssessmentStudent_GetDetail", visitForSquintAssessmentStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForSquintAssessmentStudent_GetPreviousTest_Result> sp_tblVisitForSquintAssessmentStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForSquintAssessmentStudent_GetPreviousTest_Result>("sp_tblVisitForSquintAssessmentStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForSquintAssessmentStudent_InsertUpdate_Result> sp_tblVisitForSquintAssessmentStudent_InsertUpdate(Nullable<int> visitForSquintAssessmentStudentId, Nullable<System.DateTime> visitForSquintAssessmentStudentTransDate, Nullable<int> studentAutoId, Nullable<int> hospitalAutoId, Nullable<int> doctorAutoId_Ophthalmologist, Nullable<int> doctorAutoId_Orthoptist, string squintDiagnosis_RightEye, string squintDiagnosisRemarks_RightEye, string squintDiagnosis_LeftEye, string squintDiagnosisRemarks_LeftEye, string remarks_Others, string suggestedTreatment_RightEye, string suggestedTreatment_LeftEye, Nullable<int> visit_RoutineCheck, Nullable<System.DateTime> visit_RoutineCheckDate, Nullable<int> visit_FundoScopy, Nullable<System.DateTime> visit_FundoScopyDate, Nullable<int> visit_SquintAssessment, Nullable<System.DateTime> squintAssessmentDate, Nullable<int> visit_FurtherAssessment, Nullable<System.DateTime> furtherAssessmentDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitForSquintAssessmentStudentIdParameter = visitForSquintAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForSquintAssessmentStudentId", visitForSquintAssessmentStudentId) :
                new ObjectParameter("VisitForSquintAssessmentStudentId", typeof(int));
    
            var visitForSquintAssessmentStudentTransDateParameter = visitForSquintAssessmentStudentTransDate.HasValue ?
                new ObjectParameter("VisitForSquintAssessmentStudentTransDate", visitForSquintAssessmentStudentTransDate) :
                new ObjectParameter("VisitForSquintAssessmentStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var doctorAutoId_OphthalmologistParameter = doctorAutoId_Ophthalmologist.HasValue ?
                new ObjectParameter("DoctorAutoId_Ophthalmologist", doctorAutoId_Ophthalmologist) :
                new ObjectParameter("DoctorAutoId_Ophthalmologist", typeof(int));
    
            var doctorAutoId_OrthoptistParameter = doctorAutoId_Orthoptist.HasValue ?
                new ObjectParameter("DoctorAutoId_Orthoptist", doctorAutoId_Orthoptist) :
                new ObjectParameter("DoctorAutoId_Orthoptist", typeof(int));
    
            var squintDiagnosis_RightEyeParameter = squintDiagnosis_RightEye != null ?
                new ObjectParameter("SquintDiagnosis_RightEye", squintDiagnosis_RightEye) :
                new ObjectParameter("SquintDiagnosis_RightEye", typeof(string));
    
            var squintDiagnosisRemarks_RightEyeParameter = squintDiagnosisRemarks_RightEye != null ?
                new ObjectParameter("SquintDiagnosisRemarks_RightEye", squintDiagnosisRemarks_RightEye) :
                new ObjectParameter("SquintDiagnosisRemarks_RightEye", typeof(string));
    
            var squintDiagnosis_LeftEyeParameter = squintDiagnosis_LeftEye != null ?
                new ObjectParameter("SquintDiagnosis_LeftEye", squintDiagnosis_LeftEye) :
                new ObjectParameter("SquintDiagnosis_LeftEye", typeof(string));
    
            var squintDiagnosisRemarks_LeftEyeParameter = squintDiagnosisRemarks_LeftEye != null ?
                new ObjectParameter("SquintDiagnosisRemarks_LeftEye", squintDiagnosisRemarks_LeftEye) :
                new ObjectParameter("SquintDiagnosisRemarks_LeftEye", typeof(string));
    
            var remarks_OthersParameter = remarks_Others != null ?
                new ObjectParameter("Remarks_Others", remarks_Others) :
                new ObjectParameter("Remarks_Others", typeof(string));
    
            var suggestedTreatment_RightEyeParameter = suggestedTreatment_RightEye != null ?
                new ObjectParameter("SuggestedTreatment_RightEye", suggestedTreatment_RightEye) :
                new ObjectParameter("SuggestedTreatment_RightEye", typeof(string));
    
            var suggestedTreatment_LeftEyeParameter = suggestedTreatment_LeftEye != null ?
                new ObjectParameter("SuggestedTreatment_LeftEye", suggestedTreatment_LeftEye) :
                new ObjectParameter("SuggestedTreatment_LeftEye", typeof(string));
    
            var visit_RoutineCheckParameter = visit_RoutineCheck.HasValue ?
                new ObjectParameter("Visit_RoutineCheck", visit_RoutineCheck) :
                new ObjectParameter("Visit_RoutineCheck", typeof(int));
    
            var visit_RoutineCheckDateParameter = visit_RoutineCheckDate.HasValue ?
                new ObjectParameter("Visit_RoutineCheckDate", visit_RoutineCheckDate) :
                new ObjectParameter("Visit_RoutineCheckDate", typeof(System.DateTime));
    
            var visit_FundoScopyParameter = visit_FundoScopy.HasValue ?
                new ObjectParameter("Visit_FundoScopy", visit_FundoScopy) :
                new ObjectParameter("Visit_FundoScopy", typeof(int));
    
            var visit_FundoScopyDateParameter = visit_FundoScopyDate.HasValue ?
                new ObjectParameter("Visit_FundoScopyDate", visit_FundoScopyDate) :
                new ObjectParameter("Visit_FundoScopyDate", typeof(System.DateTime));
    
            var visit_SquintAssessmentParameter = visit_SquintAssessment.HasValue ?
                new ObjectParameter("Visit_SquintAssessment", visit_SquintAssessment) :
                new ObjectParameter("Visit_SquintAssessment", typeof(int));
    
            var squintAssessmentDateParameter = squintAssessmentDate.HasValue ?
                new ObjectParameter("SquintAssessmentDate", squintAssessmentDate) :
                new ObjectParameter("SquintAssessmentDate", typeof(System.DateTime));
    
            var visit_FurtherAssessmentParameter = visit_FurtherAssessment.HasValue ?
                new ObjectParameter("Visit_FurtherAssessment", visit_FurtherAssessment) :
                new ObjectParameter("Visit_FurtherAssessment", typeof(int));
    
            var furtherAssessmentDateParameter = furtherAssessmentDate.HasValue ?
                new ObjectParameter("FurtherAssessmentDate", furtherAssessmentDate) :
                new ObjectParameter("FurtherAssessmentDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForSquintAssessmentStudent_InsertUpdate_Result>("sp_tblVisitForSquintAssessmentStudent_InsertUpdate", visitForSquintAssessmentStudentIdParameter, visitForSquintAssessmentStudentTransDateParameter, studentAutoIdParameter, hospitalAutoIdParameter, doctorAutoId_OphthalmologistParameter, doctorAutoId_OrthoptistParameter, squintDiagnosis_RightEyeParameter, squintDiagnosisRemarks_RightEyeParameter, squintDiagnosis_LeftEyeParameter, squintDiagnosisRemarks_LeftEyeParameter, remarks_OthersParameter, suggestedTreatment_RightEyeParameter, suggestedTreatment_LeftEyeParameter, visit_RoutineCheckParameter, visit_RoutineCheckDateParameter, visit_FundoScopyParameter, visit_FundoScopyDateParameter, visit_SquintAssessmentParameter, squintAssessmentDateParameter, visit_FurtherAssessmentParameter, furtherAssessmentDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryStudent_Delete_Result> sp_tblVisitforSurgeryStudent_Delete(Nullable<int> visitforSurgeryStudentId)
        {
            var visitforSurgeryStudentIdParameter = visitforSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitforSurgeryStudentId", visitforSurgeryStudentId) :
                new ObjectParameter("VisitforSurgeryStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryStudent_Delete_Result>("sp_tblVisitforSurgeryStudent_Delete", visitforSurgeryStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryStudent_GetPreviousTest_Result> sp_tblVisitforSurgeryStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryStudent_GetPreviousTest_Result>("sp_tblVisitforSurgeryStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitSixMonthStudent_Delete_Result> sp_tblVisitSixMonthStudent_Delete(Nullable<int> visitSixMonthStudentId)
        {
            var visitSixMonthStudentIdParameter = visitSixMonthStudentId.HasValue ?
                new ObjectParameter("VisitSixMonthStudentId", visitSixMonthStudentId) :
                new ObjectParameter("VisitSixMonthStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitSixMonthStudent_Delete_Result>("sp_tblVisitSixMonthStudent_Delete", visitSixMonthStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitSixMonthStudent_GetPreviousTest_Result> sp_tblVisitSixMonthStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitSixMonthStudent_GetPreviousTest_Result>("sp_tblVisitSixMonthStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_UserLogOut_Result> sp_UserLogOut(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogOut_Result>("sp_UserLogOut", userNameParameter);
        }
    
        public virtual ObjectResult<sp_UserManagement_GetAssignedRoles_Result> sp_UserManagement_GetAssignedRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserManagement_GetAssignedRoles_Result>("sp_UserManagement_GetAssignedRoles");
        }
    
        public virtual ObjectResult<sp_UserManagement_RemoveAssignedRoleToUser_Result> sp_UserManagement_RemoveAssignedRoleToUser(Nullable<int> userRoleID)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserManagement_RemoveAssignedRoleToUser_Result>("sp_UserManagement_RemoveAssignedRoleToUser", userRoleIDParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseStudent_Delete_Result> sp_tblGlassDespenseStudent_Delete(Nullable<int> glassDespenseStudentId)
        {
            var glassDespenseStudentIdParameter = glassDespenseStudentId.HasValue ?
                new ObjectParameter("GlassDespenseStudentId", glassDespenseStudentId) :
                new ObjectParameter("GlassDespenseStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseStudent_Delete_Result>("sp_tblGlassDespenseStudent_Delete", glassDespenseStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseStudent_GetDetail_Result> sp_tblGlassDespenseStudent_GetDetail(Nullable<int> glassDespenseStudentId)
        {
            var glassDespenseStudentIdParameter = glassDespenseStudentId.HasValue ?
                new ObjectParameter("GlassDespenseStudentId", glassDespenseStudentId) :
                new ObjectParameter("GlassDespenseStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseStudent_GetDetail_Result>("sp_tblGlassDespenseStudent_GetDetail", glassDespenseStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseStudent_InsertUpdate_Result> sp_tblGlassDespenseStudent_InsertUpdate(Nullable<int> glassDespenseStudentId, Nullable<System.DateTime> glassDespenseStudentTransDate, Nullable<int> studentAutoId, Nullable<int> visionwithGlasses_RightEye, Nullable<int> visionwithGlasses_LeftEye, Nullable<int> studentSatisficaion, Nullable<int> unsatisfied, string unsatisfied_Remarks, Nullable<int> unsatisfied_Reason, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> followupRequired, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var glassDespenseStudentIdParameter = glassDespenseStudentId.HasValue ?
                new ObjectParameter("GlassDespenseStudentId", glassDespenseStudentId) :
                new ObjectParameter("GlassDespenseStudentId", typeof(int));
    
            var glassDespenseStudentTransDateParameter = glassDespenseStudentTransDate.HasValue ?
                new ObjectParameter("GlassDespenseStudentTransDate", glassDespenseStudentTransDate) :
                new ObjectParameter("GlassDespenseStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var visionwithGlasses_RightEyeParameter = visionwithGlasses_RightEye.HasValue ?
                new ObjectParameter("VisionwithGlasses_RightEye", visionwithGlasses_RightEye) :
                new ObjectParameter("VisionwithGlasses_RightEye", typeof(int));
    
            var visionwithGlasses_LeftEyeParameter = visionwithGlasses_LeftEye.HasValue ?
                new ObjectParameter("VisionwithGlasses_LeftEye", visionwithGlasses_LeftEye) :
                new ObjectParameter("VisionwithGlasses_LeftEye", typeof(int));
    
            var studentSatisficaionParameter = studentSatisficaion.HasValue ?
                new ObjectParameter("StudentSatisficaion", studentSatisficaion) :
                new ObjectParameter("StudentSatisficaion", typeof(int));
    
            var unsatisfiedParameter = unsatisfied.HasValue ?
                new ObjectParameter("Unsatisfied", unsatisfied) :
                new ObjectParameter("Unsatisfied", typeof(int));
    
            var unsatisfied_RemarksParameter = unsatisfied_Remarks != null ?
                new ObjectParameter("Unsatisfied_Remarks", unsatisfied_Remarks) :
                new ObjectParameter("Unsatisfied_Remarks", typeof(string));
    
            var unsatisfied_ReasonParameter = unsatisfied_Reason.HasValue ?
                new ObjectParameter("Unsatisfied_Reason", unsatisfied_Reason) :
                new ObjectParameter("Unsatisfied_Reason", typeof(int));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var followupRequiredParameter = followupRequired.HasValue ?
                new ObjectParameter("FollowupRequired", followupRequired) :
                new ObjectParameter("FollowupRequired", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseStudent_InsertUpdate_Result>("sp_tblGlassDespenseStudent_InsertUpdate", glassDespenseStudentIdParameter, glassDespenseStudentTransDateParameter, studentAutoIdParameter, visionwithGlasses_RightEyeParameter, visionwithGlasses_LeftEyeParameter, studentSatisficaionParameter, unsatisfiedParameter, unsatisfied_RemarksParameter, unsatisfied_ReasonParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, followupRequiredParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblAutoRefTestTeacher_GetCurrentDateTest_Result> sp_tblAutoRefTestTeacher_GetCurrentDateTest(Nullable<int> teacherAutoId, Nullable<System.DateTime> autoRefTeacherTransDate)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var autoRefTeacherTransDateParameter = autoRefTeacherTransDate.HasValue ?
                new ObjectParameter("AutoRefTeacherTransDate", autoRefTeacherTransDate) :
                new ObjectParameter("AutoRefTeacherTransDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblAutoRefTestTeacher_GetCurrentDateTest_Result>("sp_tblAutoRefTestTeacher_GetCurrentDateTest", teacherAutoIdParameter, autoRefTeacherTransDateParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseStudent_GetPreviousTest_Result> sp_tblGlassDespenseStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseStudent_GetPreviousTest_Result>("sp_tblGlassDespenseStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseTeacher_Delete_Result> sp_tblGlassDespenseTeacher_Delete(Nullable<int> glassDespenseTeacherId)
        {
            var glassDespenseTeacherIdParameter = glassDespenseTeacherId.HasValue ?
                new ObjectParameter("GlassDespenseTeacherId", glassDespenseTeacherId) :
                new ObjectParameter("GlassDespenseTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseTeacher_Delete_Result>("sp_tblGlassDespenseTeacher_Delete", glassDespenseTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseTeacher_GetDetail_Result> sp_tblGlassDespenseTeacher_GetDetail(Nullable<int> glassDespenseTeacherId)
        {
            var glassDespenseTeacherIdParameter = glassDespenseTeacherId.HasValue ?
                new ObjectParameter("GlassDespenseTeacherId", glassDespenseTeacherId) :
                new ObjectParameter("GlassDespenseTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseTeacher_GetDetail_Result>("sp_tblGlassDespenseTeacher_GetDetail", glassDespenseTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseTeacher_GetPreviousTest_Result> sp_tblGlassDespenseTeacher_GetPreviousTest(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseTeacher_GetPreviousTest_Result>("sp_tblGlassDespenseTeacher_GetPreviousTest", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblGlassDespenseTeacher_InsertUpdate_Result> sp_tblGlassDespenseTeacher_InsertUpdate(Nullable<int> glassDespenseTeacherId, Nullable<System.DateTime> glassDespenseTeacherTransDate, Nullable<int> teacherAutoId, Nullable<int> visionwithGlasses_RightEye, Nullable<int> visionwithGlasses_LeftEye, Nullable<int> studentSatisficaion, Nullable<int> unsatisfied, string unsatisfied_Remarks, Nullable<int> unsatisfied_Reason, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> followupRequired, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var glassDespenseTeacherIdParameter = glassDespenseTeacherId.HasValue ?
                new ObjectParameter("GlassDespenseTeacherId", glassDespenseTeacherId) :
                new ObjectParameter("GlassDespenseTeacherId", typeof(int));
    
            var glassDespenseTeacherTransDateParameter = glassDespenseTeacherTransDate.HasValue ?
                new ObjectParameter("GlassDespenseTeacherTransDate", glassDespenseTeacherTransDate) :
                new ObjectParameter("GlassDespenseTeacherTransDate", typeof(System.DateTime));
    
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var visionwithGlasses_RightEyeParameter = visionwithGlasses_RightEye.HasValue ?
                new ObjectParameter("VisionwithGlasses_RightEye", visionwithGlasses_RightEye) :
                new ObjectParameter("VisionwithGlasses_RightEye", typeof(int));
    
            var visionwithGlasses_LeftEyeParameter = visionwithGlasses_LeftEye.HasValue ?
                new ObjectParameter("VisionwithGlasses_LeftEye", visionwithGlasses_LeftEye) :
                new ObjectParameter("VisionwithGlasses_LeftEye", typeof(int));
    
            var studentSatisficaionParameter = studentSatisficaion.HasValue ?
                new ObjectParameter("StudentSatisficaion", studentSatisficaion) :
                new ObjectParameter("StudentSatisficaion", typeof(int));
    
            var unsatisfiedParameter = unsatisfied.HasValue ?
                new ObjectParameter("Unsatisfied", unsatisfied) :
                new ObjectParameter("Unsatisfied", typeof(int));
    
            var unsatisfied_RemarksParameter = unsatisfied_Remarks != null ?
                new ObjectParameter("Unsatisfied_Remarks", unsatisfied_Remarks) :
                new ObjectParameter("Unsatisfied_Remarks", typeof(string));
    
            var unsatisfied_ReasonParameter = unsatisfied_Reason.HasValue ?
                new ObjectParameter("Unsatisfied_Reason", unsatisfied_Reason) :
                new ObjectParameter("Unsatisfied_Reason", typeof(int));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var followupRequiredParameter = followupRequired.HasValue ?
                new ObjectParameter("FollowupRequired", followupRequired) :
                new ObjectParameter("FollowupRequired", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblGlassDespenseTeacher_InsertUpdate_Result>("sp_tblGlassDespenseTeacher_InsertUpdate", glassDespenseTeacherIdParameter, glassDespenseTeacherTransDateParameter, teacherAutoIdParameter, visionwithGlasses_RightEyeParameter, visionwithGlasses_LeftEyeParameter, studentSatisficaionParameter, unsatisfiedParameter, unsatisfied_RemarksParameter, unsatisfied_ReasonParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, followupRequiredParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterTeacher_GetTransactionData_Result> sp_tblOptometristMasterTeacher_GetTransactionData(Nullable<int> teacherAutoId, Nullable<System.DateTime> optometristTeacherTransDate)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var optometristTeacherTransDateParameter = optometristTeacherTransDate.HasValue ?
                new ObjectParameter("OptometristTeacherTransDate", optometristTeacherTransDate) :
                new ObjectParameter("OptometristTeacherTransDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterTeacher_GetTransactionData_Result>("sp_tblOptometristMasterTeacher_GetTransactionData", teacherAutoIdParameter, optometristTeacherTransDateParameter);
        }
    
        public virtual ObjectResult<sp_SchoolWiseVisitDate_Result> sp_SchoolWiseVisitDate(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SchoolWiseVisitDate_Result>("sp_SchoolWiseVisitDate", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblHospital_GetDetail_Result> sp_tblHospital_GetDetail(Nullable<int> hospitalAutoId)
        {
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblHospital_GetDetail_Result>("sp_tblHospital_GetDetail", hospitalAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_Dashboard_Result> sp_Dashboard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Dashboard_Result>("sp_Dashboard");
        }
    
        public virtual ObjectResult<sp_AutoRefTest_TestDetail_Result> sp_AutoRefTest_TestDetail(Nullable<System.DateTime> testDate)
        {
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("TestDate", testDate) :
                new ObjectParameter("TestDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AutoRefTest_TestDetail_Result>("sp_AutoRefTest_TestDetail", testDateParameter);
        }
    
        public virtual ObjectResult<sp_Optometrist_TestDetail_Result> sp_Optometrist_TestDetail(Nullable<System.DateTime> testDate)
        {
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("TestDate", testDate) :
                new ObjectParameter("TestDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Optometrist_TestDetail_Result>("sp_Optometrist_TestDetail", testDateParameter);
        }
    
        public virtual ObjectResult<sp_tblYearlyTarget_Delete_Result> sp_tblYearlyTarget_Delete(Nullable<int> targetAutoId)
        {
            var targetAutoIdParameter = targetAutoId.HasValue ?
                new ObjectParameter("TargetAutoId", targetAutoId) :
                new ObjectParameter("TargetAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblYearlyTarget_Delete_Result>("sp_tblYearlyTarget_Delete", targetAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblYearlyTarget_GetDetail_Result> sp_tblYearlyTarget_GetDetail(Nullable<int> targetAutoId)
        {
            var targetAutoIdParameter = targetAutoId.HasValue ?
                new ObjectParameter("TargetAutoId", targetAutoId) :
                new ObjectParameter("TargetAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblYearlyTarget_GetDetail_Result>("sp_tblYearlyTarget_GetDetail", targetAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblYearlyTarget_GetSummary_Result> sp_tblYearlyTarget_GetSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblYearlyTarget_GetSummary_Result>("sp_tblYearlyTarget_GetSummary");
        }
    
        public virtual ObjectResult<sp_tblYearlyTarget_InsertUpdate_Result> sp_tblYearlyTarget_InsertUpdate(Nullable<int> targetAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> target)
        {
            var targetAutoIdParameter = targetAutoId.HasValue ?
                new ObjectParameter("TargetAutoId", targetAutoId) :
                new ObjectParameter("TargetAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var targetParameter = target.HasValue ?
                new ObjectParameter("Target", target) :
                new ObjectParameter("Target", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblYearlyTarget_InsertUpdate_Result>("sp_tblYearlyTarget_InsertUpdate", targetAutoIdParameter, dateFromParameter, dateToParameter, targetParameter);
        }
    
        public virtual ObjectResult<sp_tblStudent_GetDetail_Result> sp_tblStudent_GetDetail(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblStudent_GetDetail_Result>("sp_tblStudent_GetDetail", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblStudent_InsertUpdate_Result> sp_tblStudent_InsertUpdate(Nullable<int> studentAutoId, Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> sectionAutoId, string studentCode, string studentName, string studentRegNo, string fatherName, Nullable<int> age, Nullable<int> genderAutoId, Nullable<int> decreasedVision, Nullable<int> wearGlasses, Nullable<int> religion, Nullable<int> hasOccularHistory, string occularHistoryRemarks, Nullable<int> hasMedicalHistory, string medicalHistoryRemarks, Nullable<int> hasChiefComplain, string chiefComplainRemarks, Nullable<System.DateTime> studentTestDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var sectionAutoIdParameter = sectionAutoId.HasValue ?
                new ObjectParameter("SectionAutoId", sectionAutoId) :
                new ObjectParameter("SectionAutoId", typeof(int));
    
            var studentCodeParameter = studentCode != null ?
                new ObjectParameter("StudentCode", studentCode) :
                new ObjectParameter("StudentCode", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentRegNoParameter = studentRegNo != null ?
                new ObjectParameter("StudentRegNo", studentRegNo) :
                new ObjectParameter("StudentRegNo", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderAutoIdParameter = genderAutoId.HasValue ?
                new ObjectParameter("GenderAutoId", genderAutoId) :
                new ObjectParameter("GenderAutoId", typeof(int));
    
            var decreasedVisionParameter = decreasedVision.HasValue ?
                new ObjectParameter("DecreasedVision", decreasedVision) :
                new ObjectParameter("DecreasedVision", typeof(int));
    
            var wearGlassesParameter = wearGlasses.HasValue ?
                new ObjectParameter("WearGlasses", wearGlasses) :
                new ObjectParameter("WearGlasses", typeof(int));
    
            var religionParameter = religion.HasValue ?
                new ObjectParameter("Religion", religion) :
                new ObjectParameter("Religion", typeof(int));
    
            var hasOccularHistoryParameter = hasOccularHistory.HasValue ?
                new ObjectParameter("HasOccularHistory", hasOccularHistory) :
                new ObjectParameter("HasOccularHistory", typeof(int));
    
            var occularHistoryRemarksParameter = occularHistoryRemarks != null ?
                new ObjectParameter("OccularHistoryRemarks", occularHistoryRemarks) :
                new ObjectParameter("OccularHistoryRemarks", typeof(string));
    
            var hasMedicalHistoryParameter = hasMedicalHistory.HasValue ?
                new ObjectParameter("HasMedicalHistory", hasMedicalHistory) :
                new ObjectParameter("HasMedicalHistory", typeof(int));
    
            var medicalHistoryRemarksParameter = medicalHistoryRemarks != null ?
                new ObjectParameter("MedicalHistoryRemarks", medicalHistoryRemarks) :
                new ObjectParameter("MedicalHistoryRemarks", typeof(string));
    
            var hasChiefComplainParameter = hasChiefComplain.HasValue ?
                new ObjectParameter("HasChiefComplain", hasChiefComplain) :
                new ObjectParameter("HasChiefComplain", typeof(int));
    
            var chiefComplainRemarksParameter = chiefComplainRemarks != null ?
                new ObjectParameter("ChiefComplainRemarks", chiefComplainRemarks) :
                new ObjectParameter("ChiefComplainRemarks", typeof(string));
    
            var studentTestDateParameter = studentTestDate.HasValue ?
                new ObjectParameter("StudentTestDate", studentTestDate) :
                new ObjectParameter("StudentTestDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblStudent_InsertUpdate_Result>("sp_tblStudent_InsertUpdate", studentAutoIdParameter, schoolAutoIdParameter, classAutoIdParameter, sectionAutoIdParameter, studentCodeParameter, studentNameParameter, studentRegNoParameter, fatherNameParameter, ageParameter, genderAutoIdParameter, decreasedVisionParameter, wearGlassesParameter, religionParameter, hasOccularHistoryParameter, occularHistoryRemarksParameter, hasMedicalHistoryParameter, medicalHistoryRemarksParameter, hasChiefComplainParameter, chiefComplainRemarksParameter, studentTestDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblTeacher_GetDetail_Result> sp_tblTeacher_GetDetail(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTeacher_GetDetail_Result>("sp_tblTeacher_GetDetail", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTeacher_InsertUpdate_Result> sp_tblTeacher_InsertUpdate(Nullable<int> teacherAutoId, Nullable<int> schoolAutoId, string teacherCode, string teacherName, string teacherRegNo, Nullable<int> inLawsPatentAutoId, string fatherName, Nullable<int> age, Nullable<int> genderAutoId, Nullable<int> decreasedVision, Nullable<int> wearGlasses, Nullable<int> religion, Nullable<int> hasOccularHistory, string occularHistoryRemarks, Nullable<int> hasMedicalHistory, string medicalHistoryRemarks, Nullable<int> hasChiefComplain, string chiefComplainRemarks, Nullable<System.DateTime> teacherTestDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var teacherCodeParameter = teacherCode != null ?
                new ObjectParameter("TeacherCode", teacherCode) :
                new ObjectParameter("TeacherCode", typeof(string));
    
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var teacherRegNoParameter = teacherRegNo != null ?
                new ObjectParameter("TeacherRegNo", teacherRegNo) :
                new ObjectParameter("TeacherRegNo", typeof(string));
    
            var inLawsPatentAutoIdParameter = inLawsPatentAutoId.HasValue ?
                new ObjectParameter("InLawsPatentAutoId", inLawsPatentAutoId) :
                new ObjectParameter("InLawsPatentAutoId", typeof(int));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderAutoIdParameter = genderAutoId.HasValue ?
                new ObjectParameter("GenderAutoId", genderAutoId) :
                new ObjectParameter("GenderAutoId", typeof(int));
    
            var decreasedVisionParameter = decreasedVision.HasValue ?
                new ObjectParameter("DecreasedVision", decreasedVision) :
                new ObjectParameter("DecreasedVision", typeof(int));
    
            var wearGlassesParameter = wearGlasses.HasValue ?
                new ObjectParameter("WearGlasses", wearGlasses) :
                new ObjectParameter("WearGlasses", typeof(int));
    
            var religionParameter = religion.HasValue ?
                new ObjectParameter("Religion", religion) :
                new ObjectParameter("Religion", typeof(int));
    
            var hasOccularHistoryParameter = hasOccularHistory.HasValue ?
                new ObjectParameter("HasOccularHistory", hasOccularHistory) :
                new ObjectParameter("HasOccularHistory", typeof(int));
    
            var occularHistoryRemarksParameter = occularHistoryRemarks != null ?
                new ObjectParameter("OccularHistoryRemarks", occularHistoryRemarks) :
                new ObjectParameter("OccularHistoryRemarks", typeof(string));
    
            var hasMedicalHistoryParameter = hasMedicalHistory.HasValue ?
                new ObjectParameter("HasMedicalHistory", hasMedicalHistory) :
                new ObjectParameter("HasMedicalHistory", typeof(int));
    
            var medicalHistoryRemarksParameter = medicalHistoryRemarks != null ?
                new ObjectParameter("MedicalHistoryRemarks", medicalHistoryRemarks) :
                new ObjectParameter("MedicalHistoryRemarks", typeof(string));
    
            var hasChiefComplainParameter = hasChiefComplain.HasValue ?
                new ObjectParameter("HasChiefComplain", hasChiefComplain) :
                new ObjectParameter("HasChiefComplain", typeof(int));
    
            var chiefComplainRemarksParameter = chiefComplainRemarks != null ?
                new ObjectParameter("ChiefComplainRemarks", chiefComplainRemarks) :
                new ObjectParameter("ChiefComplainRemarks", typeof(string));
    
            var teacherTestDateParameter = teacherTestDate.HasValue ?
                new ObjectParameter("TeacherTestDate", teacherTestDate) :
                new ObjectParameter("TeacherTestDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTeacher_InsertUpdate_Result>("sp_tblTeacher_InsertUpdate", teacherAutoIdParameter, schoolAutoIdParameter, teacherCodeParameter, teacherNameParameter, teacherRegNoParameter, inLawsPatentAutoIdParameter, fatherNameParameter, ageParameter, genderAutoIdParameter, decreasedVisionParameter, wearGlassesParameter, religionParameter, hasOccularHistoryParameter, occularHistoryRemarksParameter, hasMedicalHistoryParameter, medicalHistoryRemarksParameter, hasChiefComplainParameter, chiefComplainRemarksParameter, teacherTestDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryStudent_GetDetail_Result> sp_tblVisitforSurgeryStudent_GetDetail(Nullable<int> visitforSurgeryStudentId)
        {
            var visitforSurgeryStudentIdParameter = visitforSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitforSurgeryStudentId", visitforSurgeryStudentId) :
                new ObjectParameter("VisitforSurgeryStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryStudent_GetDetail_Result>("sp_tblVisitforSurgeryStudent_GetDetail", visitforSurgeryStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryStudent_InsertUpdate_Result> sp_tblVisitforSurgeryStudent_InsertUpdate(Nullable<int> visitforSurgeryStudentId, Nullable<System.DateTime> visitforSurgeryStudentTransDate, Nullable<int> studentAutoId, Nullable<int> hospitalAutoId, Nullable<int> doctorAutoId_Ophthalmologist, Nullable<int> doctorAutoId_Orthoptist, Nullable<int> doctorAutoId_Surgeon, Nullable<int> doctorAutoId_Optometrist, string surgery_RightEye, string surgeryRemarks_RightEye, string surgery_LeftEye, string surgeryRemarks_LeftEye, string remarks_Surgeon, Nullable<System.DateTime> followupDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitforSurgeryStudentIdParameter = visitforSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitforSurgeryStudentId", visitforSurgeryStudentId) :
                new ObjectParameter("VisitforSurgeryStudentId", typeof(int));
    
            var visitforSurgeryStudentTransDateParameter = visitforSurgeryStudentTransDate.HasValue ?
                new ObjectParameter("VisitforSurgeryStudentTransDate", visitforSurgeryStudentTransDate) :
                new ObjectParameter("VisitforSurgeryStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var doctorAutoId_OphthalmologistParameter = doctorAutoId_Ophthalmologist.HasValue ?
                new ObjectParameter("DoctorAutoId_Ophthalmologist", doctorAutoId_Ophthalmologist) :
                new ObjectParameter("DoctorAutoId_Ophthalmologist", typeof(int));
    
            var doctorAutoId_OrthoptistParameter = doctorAutoId_Orthoptist.HasValue ?
                new ObjectParameter("DoctorAutoId_Orthoptist", doctorAutoId_Orthoptist) :
                new ObjectParameter("DoctorAutoId_Orthoptist", typeof(int));
    
            var doctorAutoId_SurgeonParameter = doctorAutoId_Surgeon.HasValue ?
                new ObjectParameter("DoctorAutoId_Surgeon", doctorAutoId_Surgeon) :
                new ObjectParameter("DoctorAutoId_Surgeon", typeof(int));
    
            var doctorAutoId_OptometristParameter = doctorAutoId_Optometrist.HasValue ?
                new ObjectParameter("DoctorAutoId_Optometrist", doctorAutoId_Optometrist) :
                new ObjectParameter("DoctorAutoId_Optometrist", typeof(int));
    
            var surgery_RightEyeParameter = surgery_RightEye != null ?
                new ObjectParameter("Surgery_RightEye", surgery_RightEye) :
                new ObjectParameter("Surgery_RightEye", typeof(string));
    
            var surgeryRemarks_RightEyeParameter = surgeryRemarks_RightEye != null ?
                new ObjectParameter("SurgeryRemarks_RightEye", surgeryRemarks_RightEye) :
                new ObjectParameter("SurgeryRemarks_RightEye", typeof(string));
    
            var surgery_LeftEyeParameter = surgery_LeftEye != null ?
                new ObjectParameter("Surgery_LeftEye", surgery_LeftEye) :
                new ObjectParameter("Surgery_LeftEye", typeof(string));
    
            var surgeryRemarks_LeftEyeParameter = surgeryRemarks_LeftEye != null ?
                new ObjectParameter("SurgeryRemarks_LeftEye", surgeryRemarks_LeftEye) :
                new ObjectParameter("SurgeryRemarks_LeftEye", typeof(string));
    
            var remarks_SurgeonParameter = remarks_Surgeon != null ?
                new ObjectParameter("Remarks_Surgeon", remarks_Surgeon) :
                new ObjectParameter("Remarks_Surgeon", typeof(string));
    
            var followupDateParameter = followupDate.HasValue ?
                new ObjectParameter("FollowupDate", followupDate) :
                new ObjectParameter("FollowupDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryStudent_InsertUpdate_Result>("sp_tblVisitforSurgeryStudent_InsertUpdate", visitforSurgeryStudentIdParameter, visitforSurgeryStudentTransDateParameter, studentAutoIdParameter, hospitalAutoIdParameter, doctorAutoId_OphthalmologistParameter, doctorAutoId_OrthoptistParameter, doctorAutoId_SurgeonParameter, doctorAutoId_OptometristParameter, surgery_RightEyeParameter, surgeryRemarks_RightEyeParameter, surgery_LeftEyeParameter, surgeryRemarks_LeftEyeParameter, remarks_SurgeonParameter, followupDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_GetLastSurgeryDetail_Result> sp_GetLastSurgeryDetail(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLastSurgeryDetail_Result>("sp_GetLastSurgeryDetail", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_GetDashboardRights_Result> sp_GetDashboardRights(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDashboardRights_Result>("sp_GetDashboardRights", useridParameter);
        }
    
        public virtual ObjectResult<sp_CycloRefractionReport_Result> sp_CycloRefractionReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CycloRefractionReport_Result>("sp_CycloRefractionReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_GlassDispense_Result> sp_DailyReport_School_GlassDispense(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_GlassDispense_Result>("sp_DailyReport_School_GlassDispense", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_RemainingAutoRef_Result> sp_DailyReport_School_RemainingAutoRef(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_RemainingAutoRef_Result>("sp_DailyReport_School_RemainingAutoRef", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_RemainingOptometrist_Result> sp_DailyReport_School_RemainingOptometrist(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_RemainingOptometrist_Result>("sp_DailyReport_School_RemainingOptometrist", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_EyeGlassPrescription_Student_Result> sp_EyeGlassPrescription_Student(string studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId != null ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EyeGlassPrescription_Student_Result>("sp_EyeGlassPrescription_Student", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_EyeGlassPrescription_Teacher_Result> sp_EyeGlassPrescription_Teacher(string teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId != null ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EyeGlassPrescription_Teacher_Result>("sp_EyeGlassPrescription_Teacher", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_RefractedErrors_GlassesnotprovidedReport_Result> sp_RefractedErrors_GlassesnotprovidedReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RefractedErrors_GlassesnotprovidedReport_Result>("sp_RefractedErrors_GlassesnotprovidedReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_RefractedErrors_GlassesprovidedReport_Result> sp_RefractedErrors_GlassesprovidedReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RefractedErrors_GlassesprovidedReport_Result>("sp_RefractedErrors_GlassesprovidedReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_ReportforRefractedError_Student_Result> sp_ReportforRefractedError_Student(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> reportType, Nullable<int> refractedError)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(int));
    
            var refractedErrorParameter = refractedError.HasValue ?
                new ObjectParameter("RefractedError", refractedError) :
                new ObjectParameter("RefractedError", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforRefractedError_Student_Result>("sp_ReportforRefractedError_Student", schoolAutoIdParameter, dateFromParameter, dateToParameter, reportTypeParameter, refractedErrorParameter);
        }
    
        public virtual ObjectResult<sp_SchoolList_Result> sp_SchoolList(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SchoolList_Result>("sp_SchoolList", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitAfterSurgeryStudent_GetDetail_Result> sp_tblVisitAfterSurgeryStudent_GetDetail(Nullable<int> visitAfterSurgeryStudentId)
        {
            var visitAfterSurgeryStudentIdParameter = visitAfterSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitAfterSurgeryStudentId", visitAfterSurgeryStudentId) :
                new ObjectParameter("VisitAfterSurgeryStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitAfterSurgeryStudent_GetDetail_Result>("sp_tblVisitAfterSurgeryStudent_GetDetail", visitAfterSurgeryStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitAfterSurgeryStudent_InsertUpdate_Result> sp_tblVisitAfterSurgeryStudent_InsertUpdate(Nullable<int> visitAfterSurgeryStudentId, Nullable<System.DateTime> visitAfterSurgeryStudentTransDate, Nullable<int> studentAutoId, Nullable<int> distanceVision_RightEye_Unaided, Nullable<int> distanceVision_RightEye_WithGlasses, Nullable<int> distanceVision_RightEye_PinHole, Nullable<int> nearVision_RightEye, Nullable<int> distanceVision_LeftEye_Unaided, Nullable<int> distanceVision_LeftEye_WithGlasses, Nullable<int> distanceVision_LeftEye_PinHole, Nullable<int> nearVision_LeftEye, string right_Spherical_Status_AutoRef, Nullable<decimal> right_Spherical_Points_AutoRef, string right_Cyclinderical_Status_AutoRef, Nullable<decimal> right_Cyclinderical_Points_AutoRef, Nullable<int> right_Axix_From_AutoRef, Nullable<int> right_Axix_To_AutoRef, string left_Spherical_Status_AutoRef, Nullable<decimal> left_Spherical_Points_AutoRef, string left_Cyclinderical_Status_AutoRef, Nullable<decimal> left_Cyclinderical_Points_AutoRef, Nullable<int> left_Axix_From_AutoRef, Nullable<int> left_Axix_To_AutoRef, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> postOPTCondition, Nullable<int> squintPostOPTCondition, string medicinePrescribed, string surgeon_Remarks, Nullable<int> nextVisit, Nullable<System.DateTime> nextVisitDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitAfterSurgeryStudentIdParameter = visitAfterSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitAfterSurgeryStudentId", visitAfterSurgeryStudentId) :
                new ObjectParameter("VisitAfterSurgeryStudentId", typeof(int));
    
            var visitAfterSurgeryStudentTransDateParameter = visitAfterSurgeryStudentTransDate.HasValue ?
                new ObjectParameter("VisitAfterSurgeryStudentTransDate", visitAfterSurgeryStudentTransDate) :
                new ObjectParameter("VisitAfterSurgeryStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var distanceVision_RightEye_UnaidedParameter = distanceVision_RightEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_Unaided", distanceVision_RightEye_Unaided) :
                new ObjectParameter("DistanceVision_RightEye_Unaided", typeof(int));
    
            var distanceVision_RightEye_WithGlassesParameter = distanceVision_RightEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", distanceVision_RightEye_WithGlasses) :
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", typeof(int));
    
            var distanceVision_RightEye_PinHoleParameter = distanceVision_RightEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_PinHole", distanceVision_RightEye_PinHole) :
                new ObjectParameter("DistanceVision_RightEye_PinHole", typeof(int));
    
            var nearVision_RightEyeParameter = nearVision_RightEye.HasValue ?
                new ObjectParameter("NearVision_RightEye", nearVision_RightEye) :
                new ObjectParameter("NearVision_RightEye", typeof(int));
    
            var distanceVision_LeftEye_UnaidedParameter = distanceVision_LeftEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_Unaided", distanceVision_LeftEye_Unaided) :
                new ObjectParameter("DistanceVision_LeftEye_Unaided", typeof(int));
    
            var distanceVision_LeftEye_WithGlassesParameter = distanceVision_LeftEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", distanceVision_LeftEye_WithGlasses) :
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", typeof(int));
    
            var distanceVision_LeftEye_PinHoleParameter = distanceVision_LeftEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_PinHole", distanceVision_LeftEye_PinHole) :
                new ObjectParameter("DistanceVision_LeftEye_PinHole", typeof(int));
    
            var nearVision_LeftEyeParameter = nearVision_LeftEye.HasValue ?
                new ObjectParameter("NearVision_LeftEye", nearVision_LeftEye) :
                new ObjectParameter("NearVision_LeftEye", typeof(int));
    
            var right_Spherical_Status_AutoRefParameter = right_Spherical_Status_AutoRef != null ?
                new ObjectParameter("Right_Spherical_Status_AutoRef", right_Spherical_Status_AutoRef) :
                new ObjectParameter("Right_Spherical_Status_AutoRef", typeof(string));
    
            var right_Spherical_Points_AutoRefParameter = right_Spherical_Points_AutoRef.HasValue ?
                new ObjectParameter("Right_Spherical_Points_AutoRef", right_Spherical_Points_AutoRef) :
                new ObjectParameter("Right_Spherical_Points_AutoRef", typeof(decimal));
    
            var right_Cyclinderical_Status_AutoRefParameter = right_Cyclinderical_Status_AutoRef != null ?
                new ObjectParameter("Right_Cyclinderical_Status_AutoRef", right_Cyclinderical_Status_AutoRef) :
                new ObjectParameter("Right_Cyclinderical_Status_AutoRef", typeof(string));
    
            var right_Cyclinderical_Points_AutoRefParameter = right_Cyclinderical_Points_AutoRef.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points_AutoRef", right_Cyclinderical_Points_AutoRef) :
                new ObjectParameter("Right_Cyclinderical_Points_AutoRef", typeof(decimal));
    
            var right_Axix_From_AutoRefParameter = right_Axix_From_AutoRef.HasValue ?
                new ObjectParameter("Right_Axix_From_AutoRef", right_Axix_From_AutoRef) :
                new ObjectParameter("Right_Axix_From_AutoRef", typeof(int));
    
            var right_Axix_To_AutoRefParameter = right_Axix_To_AutoRef.HasValue ?
                new ObjectParameter("Right_Axix_To_AutoRef", right_Axix_To_AutoRef) :
                new ObjectParameter("Right_Axix_To_AutoRef", typeof(int));
    
            var left_Spherical_Status_AutoRefParameter = left_Spherical_Status_AutoRef != null ?
                new ObjectParameter("Left_Spherical_Status_AutoRef", left_Spherical_Status_AutoRef) :
                new ObjectParameter("Left_Spherical_Status_AutoRef", typeof(string));
    
            var left_Spherical_Points_AutoRefParameter = left_Spherical_Points_AutoRef.HasValue ?
                new ObjectParameter("Left_Spherical_Points_AutoRef", left_Spherical_Points_AutoRef) :
                new ObjectParameter("Left_Spherical_Points_AutoRef", typeof(decimal));
    
            var left_Cyclinderical_Status_AutoRefParameter = left_Cyclinderical_Status_AutoRef != null ?
                new ObjectParameter("Left_Cyclinderical_Status_AutoRef", left_Cyclinderical_Status_AutoRef) :
                new ObjectParameter("Left_Cyclinderical_Status_AutoRef", typeof(string));
    
            var left_Cyclinderical_Points_AutoRefParameter = left_Cyclinderical_Points_AutoRef.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points_AutoRef", left_Cyclinderical_Points_AutoRef) :
                new ObjectParameter("Left_Cyclinderical_Points_AutoRef", typeof(decimal));
    
            var left_Axix_From_AutoRefParameter = left_Axix_From_AutoRef.HasValue ?
                new ObjectParameter("Left_Axix_From_AutoRef", left_Axix_From_AutoRef) :
                new ObjectParameter("Left_Axix_From_AutoRef", typeof(int));
    
            var left_Axix_To_AutoRefParameter = left_Axix_To_AutoRef.HasValue ?
                new ObjectParameter("Left_Axix_To_AutoRef", left_Axix_To_AutoRef) :
                new ObjectParameter("Left_Axix_To_AutoRef", typeof(int));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var postOPTConditionParameter = postOPTCondition.HasValue ?
                new ObjectParameter("PostOPTCondition", postOPTCondition) :
                new ObjectParameter("PostOPTCondition", typeof(int));
    
            var squintPostOPTConditionParameter = squintPostOPTCondition.HasValue ?
                new ObjectParameter("SquintPostOPTCondition", squintPostOPTCondition) :
                new ObjectParameter("SquintPostOPTCondition", typeof(int));
    
            var medicinePrescribedParameter = medicinePrescribed != null ?
                new ObjectParameter("MedicinePrescribed", medicinePrescribed) :
                new ObjectParameter("MedicinePrescribed", typeof(string));
    
            var surgeon_RemarksParameter = surgeon_Remarks != null ?
                new ObjectParameter("Surgeon_Remarks", surgeon_Remarks) :
                new ObjectParameter("Surgeon_Remarks", typeof(string));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(int));
    
            var nextVisitDateParameter = nextVisitDate.HasValue ?
                new ObjectParameter("NextVisitDate", nextVisitDate) :
                new ObjectParameter("NextVisitDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitAfterSurgeryStudent_InsertUpdate_Result>("sp_tblVisitAfterSurgeryStudent_InsertUpdate", visitAfterSurgeryStudentIdParameter, visitAfterSurgeryStudentTransDateParameter, studentAutoIdParameter, distanceVision_RightEye_UnaidedParameter, distanceVision_RightEye_WithGlassesParameter, distanceVision_RightEye_PinHoleParameter, nearVision_RightEyeParameter, distanceVision_LeftEye_UnaidedParameter, distanceVision_LeftEye_WithGlassesParameter, distanceVision_LeftEye_PinHoleParameter, nearVision_LeftEyeParameter, right_Spherical_Status_AutoRefParameter, right_Spherical_Points_AutoRefParameter, right_Cyclinderical_Status_AutoRefParameter, right_Cyclinderical_Points_AutoRefParameter, right_Axix_From_AutoRefParameter, right_Axix_To_AutoRefParameter, left_Spherical_Status_AutoRefParameter, left_Spherical_Points_AutoRefParameter, left_Cyclinderical_Status_AutoRefParameter, left_Cyclinderical_Points_AutoRefParameter, left_Axix_From_AutoRefParameter, left_Axix_To_AutoRefParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, postOPTConditionParameter, squintPostOPTConditionParameter, medicinePrescribedParameter, surgeon_RemarksParameter, nextVisitParameter, nextVisitDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_GetMenuNew_Result> sp_GetMenuNew(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMenuNew_Result>("sp_GetMenuNew", useridParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Report1a_Result> sp_TransactionList_Report1a(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Report1a_Result>("sp_TransactionList_Report1a", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Report1b_Result> sp_TransactionList_Report1b(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Report1b_Result>("sp_TransactionList_Report1b", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Report1c_Result> sp_TransactionList_Report1c(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Report1c_Result>("sp_TransactionList_Report1c", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Report1d_Result> sp_TransactionList_Report1d(Nullable<int> schoolAutoId, string fromDate, string toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Report1d_Result>("sp_TransactionList_Report1d", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitFundoscopyStudent_Delete_Result> sp_tblVisitFundoscopyStudent_Delete(Nullable<int> visitFundoscopyStudentId)
        {
            var visitFundoscopyStudentIdParameter = visitFundoscopyStudentId.HasValue ?
                new ObjectParameter("VisitFundoscopyStudentId", visitFundoscopyStudentId) :
                new ObjectParameter("VisitFundoscopyStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitFundoscopyStudent_Delete_Result>("sp_tblVisitFundoscopyStudent_Delete", visitFundoscopyStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitFundoscopyStudent_GetPreviousTest_Result> sp_tblVisitFundoscopyStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitFundoscopyStudent_GetPreviousTest_Result>("sp_tblVisitFundoscopyStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblSchool_Delete_Result> sp_tblSchool_Delete(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSchool_Delete_Result>("sp_tblSchool_Delete", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<string> sp_tblSchool_GetMaxCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_tblSchool_GetMaxCode");
        }
    
        public virtual ObjectResult<sp_tblSchoolImage_Delete_Result> sp_tblSchoolImage_Delete(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSchoolImage_Delete_Result>("sp_tblSchoolImage_Delete", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblSchoolImage_GetDetail_Result> sp_tblSchoolImage_GetDetail(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSchoolImage_GetDetail_Result>("sp_tblSchoolImage_GetDetail", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblSchoolImage_InsertUpdate_Result> sp_tblSchoolImage_InsertUpdate(Nullable<int> schoolAutoId, byte[] schoolPic, string fileType, Nullable<int> fileSize, Nullable<System.DateTime> captureDate, string captureRemarks, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var schoolPicParameter = schoolPic != null ?
                new ObjectParameter("SchoolPic", schoolPic) :
                new ObjectParameter("SchoolPic", typeof(byte[]));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var captureDateParameter = captureDate.HasValue ?
                new ObjectParameter("CaptureDate", captureDate) :
                new ObjectParameter("CaptureDate", typeof(System.DateTime));
    
            var captureRemarksParameter = captureRemarks != null ?
                new ObjectParameter("CaptureRemarks", captureRemarks) :
                new ObjectParameter("CaptureRemarks", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSchoolImage_InsertUpdate_Result>("sp_tblSchoolImage_InsertUpdate", schoolAutoIdParameter, schoolPicParameter, fileTypeParameter, fileSizeParameter, captureDateParameter, captureRemarksParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual int sp_GetLookupData_Student_ReferHospital(Nullable<int> schoolAutoId, Nullable<int> classAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetLookupData_Student_ReferHospital", schoolAutoIdParameter, classAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_AfterSurgery_Result> sp_GetLookupData_Student_School_AfterSurgery(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_AfterSurgery_Result>("sp_GetLookupData_Student_School_AfterSurgery", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_CycloplegicRefration_Result> sp_GetLookupData_Student_School_CycloplegicRefration(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_CycloplegicRefration_Result>("sp_GetLookupData_Student_School_CycloplegicRefration", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_FundoScopy_Result> sp_GetLookupData_Student_School_FundoScopy(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_FundoScopy_Result>("sp_GetLookupData_Student_School_FundoScopy", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_GlassDispense_Result> sp_GetLookupData_Student_School_GlassDispense(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_GlassDispense_Result>("sp_GetLookupData_Student_School_GlassDispense", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_SixMonthVisit_Result> sp_GetLookupData_Student_School_SixMonthVisit(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_SixMonthVisit_Result>("sp_GetLookupData_Student_School_SixMonthVisit", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_SquintAssessment_Result> sp_GetLookupData_Student_School_SquintAssessment(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_SquintAssessment_Result>("sp_GetLookupData_Student_School_SquintAssessment", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_Surgery_Result> sp_GetLookupData_Student_School_Surgery(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_Surgery_Result>("sp_GetLookupData_Student_School_Surgery", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Teacher_School_GlassDispense_Result> sp_GetLookupData_Teacher_School_GlassDispense(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Teacher_School_GlassDispense_Result>("sp_GetLookupData_Teacher_School_GlassDispense", typeParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForFurtherAssessmentStudent_Delete_Result> sp_tblVisitForFurtherAssessmentStudent_Delete(Nullable<int> visitForFurtherAssessmentStudentId)
        {
            var visitForFurtherAssessmentStudentIdParameter = visitForFurtherAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForFurtherAssessmentStudentId", visitForFurtherAssessmentStudentId) :
                new ObjectParameter("VisitForFurtherAssessmentStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForFurtherAssessmentStudent_Delete_Result>("sp_tblVisitForFurtherAssessmentStudent_Delete", visitForFurtherAssessmentStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForFurtherAssessmentStudent_GetPreviousTest_Result> sp_tblVisitForFurtherAssessmentStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForFurtherAssessmentStudent_GetPreviousTest_Result>("sp_tblVisitForFurtherAssessmentStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforPreSurgeryStudent_Delete_Result> sp_tblVisitforPreSurgeryStudent_Delete(Nullable<int> visitforPreSurgeryStudentId)
        {
            var visitforPreSurgeryStudentIdParameter = visitforPreSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitforPreSurgeryStudentId", visitforPreSurgeryStudentId) :
                new ObjectParameter("VisitforPreSurgeryStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforPreSurgeryStudent_Delete_Result>("sp_tblVisitforPreSurgeryStudent_Delete", visitforPreSurgeryStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforPreSurgeryStudent_GetPreviousTest_Result> sp_tblVisitforPreSurgeryStudent_GetPreviousTest(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforPreSurgeryStudent_GetPreviousTest_Result>("sp_tblVisitforPreSurgeryStudent_GetPreviousTest", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblMedicineFurtherAssessmentStudent_Delete_Result> sp_tblMedicineFurtherAssessmentStudent_Delete(Nullable<int> medicineFurtherAssessmentId)
        {
            var medicineFurtherAssessmentIdParameter = medicineFurtherAssessmentId.HasValue ?
                new ObjectParameter("MedicineFurtherAssessmentId", medicineFurtherAssessmentId) :
                new ObjectParameter("MedicineFurtherAssessmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicineFurtherAssessmentStudent_Delete_Result>("sp_tblMedicineFurtherAssessmentStudent_Delete", medicineFurtherAssessmentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblMedicineFurtherAssessmentStudent_GetSummary_Result> sp_tblMedicineFurtherAssessmentStudent_GetSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicineFurtherAssessmentStudent_GetSummary_Result>("sp_tblMedicineFurtherAssessmentStudent_GetSummary");
        }
    
        public virtual ObjectResult<sp_tblMedicineFurtherAssessmentStudent_InsertUpdate_Result> sp_tblMedicineFurtherAssessmentStudent_InsertUpdate(Nullable<int> medicineFurtherAssessmentId, Nullable<int> visitForFurtherAssessmentStudentId, Nullable<int> studentAutoId, string medicine, Nullable<int> frequency)
        {
            var medicineFurtherAssessmentIdParameter = medicineFurtherAssessmentId.HasValue ?
                new ObjectParameter("MedicineFurtherAssessmentId", medicineFurtherAssessmentId) :
                new ObjectParameter("MedicineFurtherAssessmentId", typeof(int));
    
            var visitForFurtherAssessmentStudentIdParameter = visitForFurtherAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForFurtherAssessmentStudentId", visitForFurtherAssessmentStudentId) :
                new ObjectParameter("VisitForFurtherAssessmentStudentId", typeof(int));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var medicineParameter = medicine != null ?
                new ObjectParameter("Medicine", medicine) :
                new ObjectParameter("Medicine", typeof(string));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicineFurtherAssessmentStudent_InsertUpdate_Result>("sp_tblMedicineFurtherAssessmentStudent_InsertUpdate", medicineFurtherAssessmentIdParameter, visitForFurtherAssessmentStudentIdParameter, studentAutoIdParameter, medicineParameter, frequencyParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_PreSurgery_Result> sp_GetLookupData_Student_School_PreSurgery(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_PreSurgery_Result>("sp_GetLookupData_Student_School_PreSurgery", typeParameter);
        }
    
        public virtual ObjectResult<sp_tblMedicineFurtherAssessmentStudent_GetDetail_Result> sp_tblMedicineFurtherAssessmentStudent_GetDetail(Nullable<int> visitForFurtherAssessmentStudentId)
        {
            var visitForFurtherAssessmentStudentIdParameter = visitForFurtherAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForFurtherAssessmentStudentId", visitForFurtherAssessmentStudentId) :
                new ObjectParameter("VisitForFurtherAssessmentStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicineFurtherAssessmentStudent_GetDetail_Result>("sp_tblMedicineFurtherAssessmentStudent_GetDetail", visitForFurtherAssessmentStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_School_FurtherAssessment_Result> sp_GetLookupData_Student_School_FurtherAssessment(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_School_FurtherAssessment_Result>("sp_GetLookupData_Student_School_FurtherAssessment", typeParameter);
        }
    
        public virtual ObjectResult<sp_Optometrist_StudentVisit_Result> sp_Optometrist_StudentVisit(Nullable<int> studentAutoId, Nullable<System.DateTime> transactionDate)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Optometrist_StudentVisit_Result>("sp_Optometrist_StudentVisit", studentAutoIdParameter, transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_Optometrist_TeacherVisit_Result> sp_Optometrist_TeacherVisit(Nullable<int> teacherAutoId, Nullable<System.DateTime> transactionDate)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Optometrist_TeacherVisit_Result>("sp_Optometrist_TeacherVisit", teacherAutoIdParameter, transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_tblYearlyTarget_GetSummary2_Result> sp_tblYearlyTarget_GetSummary2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblYearlyTarget_GetSummary2_Result>("sp_tblYearlyTarget_GetSummary2");
        }
    
        public virtual ObjectResult<sp_VisitSummary_Student_Result> sp_VisitSummary_Student(Nullable<int> studentAutoId, Nullable<int> optometristStudentId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var optometristStudentIdParameter = optometristStudentId.HasValue ?
                new ObjectParameter("OptometristStudentId", optometristStudentId) :
                new ObjectParameter("OptometristStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VisitSummary_Student_Result>("sp_VisitSummary_Student", studentAutoIdParameter, optometristStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_VisitSummary_Teacher_Result> sp_VisitSummary_Teacher(Nullable<int> teacherAutoId, Nullable<int> optometristTeacherId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var optometristTeacherIdParameter = optometristTeacherId.HasValue ?
                new ObjectParameter("OptometristTeacherId", optometristTeacherId) :
                new ObjectParameter("OptometristTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VisitSummary_Teacher_Result>("sp_VisitSummary_Teacher", teacherAutoIdParameter, optometristTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_RoleManagement_InsertUpdate_Result> sp_RoleManagement_InsertUpdate(Nullable<int> roleAutoId, string roleDescription, Nullable<int> formAutoId, Nullable<int> addMode, Nullable<int> editMode, Nullable<int> deleteMode, Nullable<int> viewMode, Nullable<int> city)
        {
            var roleAutoIdParameter = roleAutoId.HasValue ?
                new ObjectParameter("RoleAutoId", roleAutoId) :
                new ObjectParameter("RoleAutoId", typeof(int));
    
            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("RoleDescription", roleDescription) :
                new ObjectParameter("RoleDescription", typeof(string));
    
            var formAutoIdParameter = formAutoId.HasValue ?
                new ObjectParameter("FormAutoId", formAutoId) :
                new ObjectParameter("FormAutoId", typeof(int));
    
            var addModeParameter = addMode.HasValue ?
                new ObjectParameter("AddMode", addMode) :
                new ObjectParameter("AddMode", typeof(int));
    
            var editModeParameter = editMode.HasValue ?
                new ObjectParameter("EditMode", editMode) :
                new ObjectParameter("EditMode", typeof(int));
    
            var deleteModeParameter = deleteMode.HasValue ?
                new ObjectParameter("DeleteMode", deleteMode) :
                new ObjectParameter("DeleteMode", typeof(int));
    
            var viewModeParameter = viewMode.HasValue ?
                new ObjectParameter("ViewMode", viewMode) :
                new ObjectParameter("ViewMode", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RoleManagement_InsertUpdate_Result>("sp_RoleManagement_InsertUpdate", roleAutoIdParameter, roleDescriptionParameter, formAutoIdParameter, addModeParameter, editModeParameter, deleteModeParameter, viewModeParameter, cityParameter);
        }
    
        public virtual ObjectResult<sp_RoleManagement_GetMaster_Result> sp_RoleManagement_GetMaster(Nullable<int> roleAutoId)
        {
            var roleAutoIdParameter = roleAutoId.HasValue ?
                new ObjectParameter("RoleAutoId", roleAutoId) :
                new ObjectParameter("RoleAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RoleManagement_GetMaster_Result>("sp_RoleManagement_GetMaster", roleAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblDoctor_Delete_Result> sp_tblDoctor_Delete(Nullable<int> doctorAutoId)
        {
            var doctorAutoIdParameter = doctorAutoId.HasValue ?
                new ObjectParameter("DoctorAutoId", doctorAutoId) :
                new ObjectParameter("DoctorAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblDoctor_Delete_Result>("sp_tblDoctor_Delete", doctorAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblDoctor_GetDetail_Result> sp_tblDoctor_GetDetail(Nullable<int> doctorAutoId)
        {
            var doctorAutoIdParameter = doctorAutoId.HasValue ?
                new ObjectParameter("DoctorAutoId", doctorAutoId) :
                new ObjectParameter("DoctorAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblDoctor_GetDetail_Result>("sp_tblDoctor_GetDetail", doctorAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblDoctor_GetSummary_Result> sp_tblDoctor_GetSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblDoctor_GetSummary_Result>("sp_tblDoctor_GetSummary");
        }
    
        public virtual ObjectResult<sp_tblDoctor_InsertUpdate_Result> sp_tblDoctor_InsertUpdate(Nullable<int> doctorAutoId, string doctorDescription, Nullable<int> hospitalAutoID, Nullable<int> surgeon, Nullable<int> ophthalmologist, Nullable<int> orthoptist, Nullable<int> optometrist, string contactNo, string mobileNo, string email)
        {
            var doctorAutoIdParameter = doctorAutoId.HasValue ?
                new ObjectParameter("DoctorAutoId", doctorAutoId) :
                new ObjectParameter("DoctorAutoId", typeof(int));
    
            var doctorDescriptionParameter = doctorDescription != null ?
                new ObjectParameter("DoctorDescription", doctorDescription) :
                new ObjectParameter("DoctorDescription", typeof(string));
    
            var hospitalAutoIDParameter = hospitalAutoID.HasValue ?
                new ObjectParameter("HospitalAutoID", hospitalAutoID) :
                new ObjectParameter("HospitalAutoID", typeof(int));
    
            var surgeonParameter = surgeon.HasValue ?
                new ObjectParameter("Surgeon", surgeon) :
                new ObjectParameter("Surgeon", typeof(int));
    
            var ophthalmologistParameter = ophthalmologist.HasValue ?
                new ObjectParameter("Ophthalmologist", ophthalmologist) :
                new ObjectParameter("Ophthalmologist", typeof(int));
    
            var orthoptistParameter = orthoptist.HasValue ?
                new ObjectParameter("Orthoptist", orthoptist) :
                new ObjectParameter("Orthoptist", typeof(int));
    
            var optometristParameter = optometrist.HasValue ?
                new ObjectParameter("Optometrist", optometrist) :
                new ObjectParameter("Optometrist", typeof(int));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblDoctor_InsertUpdate_Result>("sp_tblDoctor_InsertUpdate", doctorAutoIdParameter, doctorDescriptionParameter, hospitalAutoIDParameter, surgeonParameter, ophthalmologistParameter, orthoptistParameter, optometristParameter, contactNoParameter, mobileNoParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_AfterSurgery_Result> sp_GetLookupData_Student_AfterSurgery(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_AfterSurgery_Result>("sp_GetLookupData_Student_AfterSurgery", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_FundoScopy_Result> sp_GetLookupData_Student_FundoScopy(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_FundoScopy_Result>("sp_GetLookupData_Student_FundoScopy", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_FurtherAssessment_Result> sp_GetLookupData_Student_FurtherAssessment(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_FurtherAssessment_Result>("sp_GetLookupData_Student_FurtherAssessment", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_PreSurgery_Result> sp_GetLookupData_Student_PreSurgery(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_PreSurgery_Result>("sp_GetLookupData_Student_PreSurgery", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_SquintAssessment_Result> sp_GetLookupData_Student_SquintAssessment(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_SquintAssessment_Result>("sp_GetLookupData_Student_SquintAssessment", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_Surgery_Result> sp_GetLookupData_Student_Surgery(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_Surgery_Result>("sp_GetLookupData_Student_Surgery", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Doctor_Result> sp_GetLookupData_Doctor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Doctor_Result>("sp_GetLookupData_Doctor");
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_CycloplegicRefration_Result> sp_GetLookupData_Student_CycloplegicRefration(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_CycloplegicRefration_Result>("sp_GetLookupData_Student_CycloplegicRefration", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_GlassDispense_Result> sp_GetLookupData_Student_GlassDispense(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_GlassDispense_Result>("sp_GetLookupData_Student_GlassDispense", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_SixMonthVisit_Result> sp_GetLookupData_Student_SixMonthVisit(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_SixMonthVisit_Result>("sp_GetLookupData_Student_SixMonthVisit", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetCityWiseReligionDetail_Result> sp_GetCityWiseReligionDetail(string city, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCityWiseReligionDetail_Result>("sp_GetCityWiseReligionDetail", cityParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GetCity_Result> GetCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCity_Result>("GetCity");
        }
    
        public virtual ObjectResult<GetDistrict_Result> GetDistrict()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistrict_Result>("GetDistrict");
        }
    
        public virtual ObjectResult<GetSchoolLevel_Result> GetSchoolLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchoolLevel_Result>("GetSchoolLevel");
        }
    
        public virtual ObjectResult<GetTown_Result> GetTown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTown_Result>("GetTown");
        }
    
        public virtual ObjectResult<sp_GetDistrictWiseReligionDetail_Result> sp_GetDistrictWiseReligionDetail(string district, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDistrictWiseReligionDetail_Result>("sp_GetDistrictWiseReligionDetail", districtParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetTownWiseReligionDetail_Result> sp_GetTownWiseReligionDetail(string town, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTownWiseReligionDetail_Result>("sp_GetTownWiseReligionDetail", townParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetSchoolLevelWiseReligionDetail_Result> sp_GetSchoolLevelWiseReligionDetail(string schoolLevel, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolLevelParameter = schoolLevel != null ?
                new ObjectParameter("SchoolLevel", schoolLevel) :
                new ObjectParameter("SchoolLevel", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSchoolLevelWiseReligionDetail_Result>("sp_GetSchoolLevelWiseReligionDetail", schoolLevelParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetSchoolWiseReligionDetail_Result> sp_GetSchoolWiseReligionDetail(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSchoolWiseReligionDetail_Result>("sp_GetSchoolWiseReligionDetail", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_AutoRefTest_Result> sp_TransactionList_AutoRefTest(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_AutoRefTest_Result>("sp_TransactionList_AutoRefTest", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_AutoRefTest_TestDate_Result> sp_TransactionList_AutoRefTest_TestDate(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_AutoRefTest_TestDate_Result>("sp_TransactionList_AutoRefTest_TestDate", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_GetDetail_Result> sp_TransactionList_GetDetail(string formDescription, string entDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var entDateParameter = entDate != null ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_GetDetail_Result>("sp_TransactionList_GetDetail", formDescriptionParameter, entDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_GlassDespenseStudent_Result> sp_TransactionList_GlassDespenseStudent(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_GlassDespenseStudent_Result>("sp_TransactionList_GlassDespenseStudent", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_GlassDespenseStudent_TestDate_Result> sp_TransactionList_GlassDespenseStudent_TestDate(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_GlassDespenseStudent_TestDate_Result>("sp_TransactionList_GlassDespenseStudent_TestDate", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Otpometrist_Result> sp_TransactionList_Otpometrist(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Otpometrist_Result>("sp_TransactionList_Otpometrist", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Otpometrist_TestDate_Result> sp_TransactionList_Otpometrist_TestDate(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Otpometrist_TestDate_Result>("sp_TransactionList_Otpometrist_TestDate", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_StudentEnrollment_Result> sp_TransactionList_StudentEnrollment(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_StudentEnrollment_Result>("sp_TransactionList_StudentEnrollment", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_StudentEnrollment_TestDate_Result> sp_TransactionList_StudentEnrollment_TestDate(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_StudentEnrollment_TestDate_Result>("sp_TransactionList_StudentEnrollment_TestDate", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_TeacherEnrollment_Result> sp_TransactionList_TeacherEnrollment(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_TeacherEnrollment_Result>("sp_TransactionList_TeacherEnrollment", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_TeacherEnrollment_TestDate_Result> sp_TransactionList_TeacherEnrollment_TestDate(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_TeacherEnrollment_TestDate_Result>("sp_TransactionList_TeacherEnrollment_TestDate", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_SchoolEnrollment_Result> sp_TransactionList_SchoolEnrollment(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_SchoolEnrollment_Result>("sp_TransactionList_SchoolEnrollment", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_SchoolEnrollment_TestDate_Result> sp_TransactionList_SchoolEnrollment_TestDate(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_SchoolEnrollment_TestDate_Result>("sp_TransactionList_SchoolEnrollment_TestDate", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GlassesProvided_DetailReport_Result> sp_GlassesProvided_DetailReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GlassesProvided_DetailReport_Result>("sp_GlassesProvided_DetailReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GlassesProvided_SummaryReport_Result> sp_GlassesProvided_SummaryReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GlassesProvided_SummaryReport_Result>("sp_GlassesProvided_SummaryReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GlassesProvidedNotProvided_DetailReport_Result> sp_GlassesProvidedNotProvided_DetailReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GlassesProvidedNotProvided_DetailReport_Result>("sp_GlassesProvidedNotProvided_DetailReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_RecractedErrors_StudentReport_Result> sp_RecractedErrors_StudentReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RecractedErrors_StudentReport_Result>("sp_RecractedErrors_StudentReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_RefractedErrors_GlassesnotprovidedDetailReport_Result> sp_RefractedErrors_GlassesnotprovidedDetailReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RefractedErrors_GlassesnotprovidedDetailReport_Result>("sp_RefractedErrors_GlassesnotprovidedDetailReport", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudentReport_ClassWise_Result> sp_tblTreatmentStudentReport_ClassWise(Nullable<int> schoolAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudentReport_ClassWise_Result>("sp_tblTreatmentStudentReport_ClassWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudentReport_SchoolWise_Result> sp_tblTreatmentStudentReport_SchoolWise(Nullable<int> schoolAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudentReport_SchoolWise_Result>("sp_tblTreatmentStudentReport_SchoolWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudentReport_SectionWise_Result> sp_tblTreatmentStudentReport_SectionWise(Nullable<int> schoolAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudentReport_SectionWise_Result>("sp_tblTreatmentStudentReport_SectionWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudentReport_StudentWise_Result> sp_tblTreatmentStudentReport_StudentWise(Nullable<int> schoolAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudentReport_StudentWise_Result>("sp_tblTreatmentStudentReport_StudentWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentTeacherReport_SchoolWise_Result> sp_tblTreatmentTeacherReport_SchoolWise(Nullable<int> schoolAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentTeacherReport_SchoolWise_Result>("sp_tblTreatmentTeacherReport_SchoolWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentTeacherReport_StudentWise_Result> sp_tblTreatmentTeacherReport_StudentWise(Nullable<int> schoolAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentTeacherReport_StudentWise_Result>("sp_tblTreatmentTeacherReport_StudentWise", schoolAutoIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterStudent_GetDetail_Result> sp_tblOptometristMasterStudent_GetDetail(Nullable<int> optometristStudentId)
        {
            var optometristStudentIdParameter = optometristStudentId.HasValue ?
                new ObjectParameter("OptometristStudentId", optometristStudentId) :
                new ObjectParameter("OptometristStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterStudent_GetDetail_Result>("sp_tblOptometristMasterStudent_GetDetail", optometristStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblOptometristMasterTeacher_GetDetail_Result> sp_tblOptometristMasterTeacher_GetDetail(Nullable<int> optometristTeacherId)
        {
            var optometristTeacherIdParameter = optometristTeacherId.HasValue ?
                new ObjectParameter("OptometristTeacherId", optometristTeacherId) :
                new ObjectParameter("OptometristTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblOptometristMasterTeacher_GetDetail_Result>("sp_tblOptometristMasterTeacher_GetDetail", optometristTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudent_Delete_Result> sp_tblTreatmentStudent_Delete(Nullable<int> treatmentStudentId)
        {
            var treatmentStudentIdParameter = treatmentStudentId.HasValue ?
                new ObjectParameter("TreatmentStudentId", treatmentStudentId) :
                new ObjectParameter("TreatmentStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudent_Delete_Result>("sp_tblTreatmentStudent_Delete", treatmentStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Treatment_Result> sp_TransactionList_Treatment(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Treatment_Result>("sp_TransactionList_Treatment", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_TransactionList_Treatment_TestDate_Result> sp_TransactionList_Treatment_TestDate(string formDescription, string fromDate, string toDate)
        {
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionList_Treatment_TestDate_Result>("sp_TransactionList_Treatment_TestDate", formDescriptionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetCity_Result> sp_GetCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCity_Result>("sp_GetCity");
        }
    
        public virtual ObjectResult<sp_GetDistrict_Result> sp_GetDistrict()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDistrict_Result>("sp_GetDistrict");
        }
    
        public virtual ObjectResult<sp_GetLookupData_Class1_Result> sp_GetLookupData_Class1(string formID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Class1_Result>("sp_GetLookupData_Class1", formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_ClassSection1_Result> sp_GetLookupData_ClassSection1(string formID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_ClassSection1_Result>("sp_GetLookupData_ClassSection1", formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_School1_Result> sp_GetLookupData_School1(string formID)
        {
            var formIDParameter = formID != null ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_School1_Result>("sp_GetLookupData_School1", formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Student_FatherName_Result> sp_GetLookupData_Student_FatherName(Nullable<int> schoolAutoId, Nullable<int> classAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Student_FatherName_Result>("sp_GetLookupData_Student_FatherName", schoolAutoIdParameter, classAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Teacher_FatherName_Result> sp_GetLookupData_Teacher_FatherName(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Teacher_FatherName_Result>("sp_GetLookupData_Teacher_FatherName", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_GetSchoolLevel_Result> sp_GetSchoolLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSchoolLevel_Result>("sp_GetSchoolLevel");
        }
    
        public virtual ObjectResult<sp_GetTown_Result> sp_GetTown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTown_Result>("sp_GetTown");
        }
    
        public virtual ObjectResult<sp_tblDoctor_GetSummary1_Result> sp_tblDoctor_GetSummary1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblDoctor_GetSummary1_Result>("sp_tblDoctor_GetSummary1");
        }
    
        public virtual ObjectResult<sp_tblSection_GetSummary1_Result> sp_tblSection_GetSummary1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSection_GetSummary1_Result>("sp_tblSection_GetSummary1");
        }
    
        public virtual ObjectResult<sp_tblYearlyTarget_GetSummary1_Result> sp_tblYearlyTarget_GetSummary1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblYearlyTarget_GetSummary1_Result>("sp_tblYearlyTarget_GetSummary1");
        }
    
        public virtual ObjectResult<sp_tblHospital_GetSummary_Result> sp_tblHospital_GetSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblHospital_GetSummary_Result>("sp_tblHospital_GetSummary");
        }
    
        public virtual ObjectResult<sp_tblHospital_InsertUpdate_Result> sp_tblHospital_InsertUpdate(Nullable<int> hospitalAutoId, string hospitalDescription, string address, string district, string town, string city, string contactNo)
        {
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var hospitalDescriptionParameter = hospitalDescription != null ?
                new ObjectParameter("HospitalDescription", hospitalDescription) :
                new ObjectParameter("HospitalDescription", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblHospital_InsertUpdate_Result>("sp_tblHospital_InsertUpdate", hospitalAutoIdParameter, hospitalDescriptionParameter, addressParameter, districtParameter, townParameter, cityParameter, contactNoParameter);
        }
    
        public virtual ObjectResult<sp_tblMedicine_GetSummary_Result> sp_tblMedicine_GetSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMedicine_GetSummary_Result>("sp_tblMedicine_GetSummary");
        }
    
        public virtual ObjectResult<sp_GetLookupData_Teacher_GlassDispense_Result> sp_GetLookupData_Teacher_GlassDispense(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Teacher_GlassDispense_Result>("sp_GetLookupData_Teacher_GlassDispense", schoolAutoIdParameter, classAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_ReportforOptincian_Result> sp_ReportforOptincian(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforOptincian_Result>("sp_ReportforOptincian", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_ReportforOptincian_Student_Result> sp_ReportforOptincian_Student(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforOptincian_Student_Result>("sp_ReportforOptincian_Student", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_ReportforOptincian_Teacher_Result> sp_ReportforOptincian_Teacher(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforOptincian_Teacher_Result>("sp_ReportforOptincian_Teacher", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_School_OpticianReport_Result> sp_GetLookupData_School_OpticianReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_School_OpticianReport_Result>("sp_GetLookupData_School_OpticianReport");
        }
    
        public virtual ObjectResult<sp_GetLookupData_School_CycloReport_Result> sp_GetLookupData_School_CycloReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_School_CycloReport_Result>("sp_GetLookupData_School_CycloReport");
        }
    
        public virtual ObjectResult<sp_tblSchool_GetDetail_Result> sp_tblSchool_GetDetail(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSchool_GetDetail_Result>("sp_tblSchool_GetDetail", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblSchool_InsertUpdate_Result> sp_tblSchool_InsertUpdate(Nullable<int> schoolAutoId, string schoolCode, string schoolName, string address1, string address2, string district, string town, string city, string telephone, string cellphone, Nullable<int> schoolLevel_Primary, Nullable<int> schoolLevel_Secondary, Nullable<int> genderAutoId, Nullable<int> registered_Students, Nullable<int> registered_Teachers, string principal_Name, string principal_Mobile, Nullable<System.DateTime> enrollmentDate, Nullable<int> institutionType, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP, Nullable<int> titleAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var schoolCodeParameter = schoolCode != null ?
                new ObjectParameter("SchoolCode", schoolCode) :
                new ObjectParameter("SchoolCode", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var cellphoneParameter = cellphone != null ?
                new ObjectParameter("Cellphone", cellphone) :
                new ObjectParameter("Cellphone", typeof(string));
    
            var schoolLevel_PrimaryParameter = schoolLevel_Primary.HasValue ?
                new ObjectParameter("SchoolLevel_Primary", schoolLevel_Primary) :
                new ObjectParameter("SchoolLevel_Primary", typeof(int));
    
            var schoolLevel_SecondaryParameter = schoolLevel_Secondary.HasValue ?
                new ObjectParameter("SchoolLevel_Secondary", schoolLevel_Secondary) :
                new ObjectParameter("SchoolLevel_Secondary", typeof(int));
    
            var genderAutoIdParameter = genderAutoId.HasValue ?
                new ObjectParameter("GenderAutoId", genderAutoId) :
                new ObjectParameter("GenderAutoId", typeof(int));
    
            var registered_StudentsParameter = registered_Students.HasValue ?
                new ObjectParameter("Registered_Students", registered_Students) :
                new ObjectParameter("Registered_Students", typeof(int));
    
            var registered_TeachersParameter = registered_Teachers.HasValue ?
                new ObjectParameter("Registered_Teachers", registered_Teachers) :
                new ObjectParameter("Registered_Teachers", typeof(int));
    
            var principal_NameParameter = principal_Name != null ?
                new ObjectParameter("Principal_Name", principal_Name) :
                new ObjectParameter("Principal_Name", typeof(string));
    
            var principal_MobileParameter = principal_Mobile != null ?
                new ObjectParameter("Principal_Mobile", principal_Mobile) :
                new ObjectParameter("Principal_Mobile", typeof(string));
    
            var enrollmentDateParameter = enrollmentDate.HasValue ?
                new ObjectParameter("EnrollmentDate", enrollmentDate) :
                new ObjectParameter("EnrollmentDate", typeof(System.DateTime));
    
            var institutionTypeParameter = institutionType.HasValue ?
                new ObjectParameter("InstitutionType", institutionType) :
                new ObjectParameter("InstitutionType", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            var titleAutoIdParameter = titleAutoId.HasValue ?
                new ObjectParameter("TitleAutoId", titleAutoId) :
                new ObjectParameter("TitleAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSchool_InsertUpdate_Result>("sp_tblSchool_InsertUpdate", schoolAutoIdParameter, schoolCodeParameter, schoolNameParameter, address1Parameter, address2Parameter, districtParameter, townParameter, cityParameter, telephoneParameter, cellphoneParameter, schoolLevel_PrimaryParameter, schoolLevel_SecondaryParameter, genderAutoIdParameter, registered_StudentsParameter, registered_TeachersParameter, principal_NameParameter, principal_MobileParameter, enrollmentDateParameter, institutionTypeParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter, titleAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforPreSurgeryStudent_GetDetail_Result> sp_tblVisitforPreSurgeryStudent_GetDetail(Nullable<int> visitforPreSurgeryStudentId)
        {
            var visitforPreSurgeryStudentIdParameter = visitforPreSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitforPreSurgeryStudentId", visitforPreSurgeryStudentId) :
                new ObjectParameter("VisitforPreSurgeryStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforPreSurgeryStudent_GetDetail_Result>("sp_tblVisitforPreSurgeryStudent_GetDetail", visitforPreSurgeryStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforPreSurgeryStudent_InsertUpdate_Result> sp_tblVisitforPreSurgeryStudent_InsertUpdate(Nullable<int> visitforPreSurgeryStudentId, Nullable<System.DateTime> visitforPreSurgeryStudentTransDate, Nullable<int> studentAutoId, Nullable<int> hospitalAutoId, Nullable<int> doctorAutoId_Ophthalmologist, Nullable<int> doctorAutoId_Orthoptist, Nullable<int> doctorAutoId_Surgeon, Nullable<int> doctorAutoId_Optometrist, string remarks_Surgeon, Nullable<int> surgeryRecommended, string surgery_RightEye, string surgeryRemarks_RightEye, string surgery_LeftEye, string surgeryRemarks_LeftEye, Nullable<System.DateTime> surgeryDate, Nullable<int> followupRequired, Nullable<System.DateTime> followupDate, Nullable<int> parentWilling, string parent_Reason, Nullable<int> suggestedEye_Right, Nullable<int> suggestedEye_Left, string remarks_Ophthalmologist, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitforPreSurgeryStudentIdParameter = visitforPreSurgeryStudentId.HasValue ?
                new ObjectParameter("VisitforPreSurgeryStudentId", visitforPreSurgeryStudentId) :
                new ObjectParameter("VisitforPreSurgeryStudentId", typeof(int));
    
            var visitforPreSurgeryStudentTransDateParameter = visitforPreSurgeryStudentTransDate.HasValue ?
                new ObjectParameter("VisitforPreSurgeryStudentTransDate", visitforPreSurgeryStudentTransDate) :
                new ObjectParameter("VisitforPreSurgeryStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var doctorAutoId_OphthalmologistParameter = doctorAutoId_Ophthalmologist.HasValue ?
                new ObjectParameter("DoctorAutoId_Ophthalmologist", doctorAutoId_Ophthalmologist) :
                new ObjectParameter("DoctorAutoId_Ophthalmologist", typeof(int));
    
            var doctorAutoId_OrthoptistParameter = doctorAutoId_Orthoptist.HasValue ?
                new ObjectParameter("DoctorAutoId_Orthoptist", doctorAutoId_Orthoptist) :
                new ObjectParameter("DoctorAutoId_Orthoptist", typeof(int));
    
            var doctorAutoId_SurgeonParameter = doctorAutoId_Surgeon.HasValue ?
                new ObjectParameter("DoctorAutoId_Surgeon", doctorAutoId_Surgeon) :
                new ObjectParameter("DoctorAutoId_Surgeon", typeof(int));
    
            var doctorAutoId_OptometristParameter = doctorAutoId_Optometrist.HasValue ?
                new ObjectParameter("DoctorAutoId_Optometrist", doctorAutoId_Optometrist) :
                new ObjectParameter("DoctorAutoId_Optometrist", typeof(int));
    
            var remarks_SurgeonParameter = remarks_Surgeon != null ?
                new ObjectParameter("Remarks_Surgeon", remarks_Surgeon) :
                new ObjectParameter("Remarks_Surgeon", typeof(string));
    
            var surgeryRecommendedParameter = surgeryRecommended.HasValue ?
                new ObjectParameter("SurgeryRecommended", surgeryRecommended) :
                new ObjectParameter("SurgeryRecommended", typeof(int));
    
            var surgery_RightEyeParameter = surgery_RightEye != null ?
                new ObjectParameter("Surgery_RightEye", surgery_RightEye) :
                new ObjectParameter("Surgery_RightEye", typeof(string));
    
            var surgeryRemarks_RightEyeParameter = surgeryRemarks_RightEye != null ?
                new ObjectParameter("SurgeryRemarks_RightEye", surgeryRemarks_RightEye) :
                new ObjectParameter("SurgeryRemarks_RightEye", typeof(string));
    
            var surgery_LeftEyeParameter = surgery_LeftEye != null ?
                new ObjectParameter("Surgery_LeftEye", surgery_LeftEye) :
                new ObjectParameter("Surgery_LeftEye", typeof(string));
    
            var surgeryRemarks_LeftEyeParameter = surgeryRemarks_LeftEye != null ?
                new ObjectParameter("SurgeryRemarks_LeftEye", surgeryRemarks_LeftEye) :
                new ObjectParameter("SurgeryRemarks_LeftEye", typeof(string));
    
            var surgeryDateParameter = surgeryDate.HasValue ?
                new ObjectParameter("SurgeryDate", surgeryDate) :
                new ObjectParameter("SurgeryDate", typeof(System.DateTime));
    
            var followupRequiredParameter = followupRequired.HasValue ?
                new ObjectParameter("FollowupRequired", followupRequired) :
                new ObjectParameter("FollowupRequired", typeof(int));
    
            var followupDateParameter = followupDate.HasValue ?
                new ObjectParameter("FollowupDate", followupDate) :
                new ObjectParameter("FollowupDate", typeof(System.DateTime));
    
            var parentWillingParameter = parentWilling.HasValue ?
                new ObjectParameter("ParentWilling", parentWilling) :
                new ObjectParameter("ParentWilling", typeof(int));
    
            var parent_ReasonParameter = parent_Reason != null ?
                new ObjectParameter("Parent_Reason", parent_Reason) :
                new ObjectParameter("Parent_Reason", typeof(string));
    
            var suggestedEye_RightParameter = suggestedEye_Right.HasValue ?
                new ObjectParameter("SuggestedEye_Right", suggestedEye_Right) :
                new ObjectParameter("SuggestedEye_Right", typeof(int));
    
            var suggestedEye_LeftParameter = suggestedEye_Left.HasValue ?
                new ObjectParameter("SuggestedEye_Left", suggestedEye_Left) :
                new ObjectParameter("SuggestedEye_Left", typeof(int));
    
            var remarks_OphthalmologistParameter = remarks_Ophthalmologist != null ?
                new ObjectParameter("Remarks_Ophthalmologist", remarks_Ophthalmologist) :
                new ObjectParameter("Remarks_Ophthalmologist", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforPreSurgeryStudent_InsertUpdate_Result>("sp_tblVisitforPreSurgeryStudent_InsertUpdate", visitforPreSurgeryStudentIdParameter, visitforPreSurgeryStudentTransDateParameter, studentAutoIdParameter, hospitalAutoIdParameter, doctorAutoId_OphthalmologistParameter, doctorAutoId_OrthoptistParameter, doctorAutoId_SurgeonParameter, doctorAutoId_OptometristParameter, remarks_SurgeonParameter, surgeryRecommendedParameter, surgery_RightEyeParameter, surgeryRemarks_RightEyeParameter, surgery_LeftEyeParameter, surgeryRemarks_LeftEyeParameter, surgeryDateParameter, followupRequiredParameter, followupDateParameter, parentWillingParameter, parent_ReasonParameter, suggestedEye_RightParameter, suggestedEye_LeftParameter, remarks_OphthalmologistParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforPreSurgeryStudent_GetDetail_StudentWise_Result> sp_tblVisitforPreSurgeryStudent_GetDetail_StudentWise(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforPreSurgeryStudent_GetDetail_StudentWise_Result>("sp_tblVisitforPreSurgeryStudent_GetDetail_StudentWise", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForFurtherAssessmentStudent_GetDetail_Student_Result> sp_tblVisitForFurtherAssessmentStudent_GetDetail_Student(Nullable<int> studentAutoId)
        {
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForFurtherAssessmentStudent_GetDetail_Student_Result>("sp_tblVisitForFurtherAssessmentStudent_GetDetail_Student", studentAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_StaffAttendanceReport_Result> sp_StaffAttendanceReport(Nullable<System.DateTime> attendanceDate, string userId)
        {
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StaffAttendanceReport_Result>("sp_StaffAttendanceReport", attendanceDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_tblUser_Report_Result> sp_tblUser_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblUser_Report_Result>("sp_tblUser_Report");
        }
    
        public virtual ObjectResult<sp_StaffPerformanceReport_Result> sp_StaffPerformanceReport(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string userId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StaffPerformanceReport_Result>("sp_StaffPerformanceReport", schoolAutoIdParameter, dateFromParameter, dateToParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_ReportforSchool_Result> sp_ReportforSchool(Nullable<int> schoolAutoId)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforSchool_Result>("sp_ReportforSchool", schoolAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_StudentWithAbnormality_Result> sp_DailyReport_School_StudentWithAbnormality(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_StudentWithAbnormality_Result>("sp_DailyReport_School_StudentWithAbnormality", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryTeacher_Delete_Result> sp_tblVisitforSurgeryTeacher_Delete(Nullable<int> visitforSurgeryTeacherId)
        {
            var visitforSurgeryTeacherIdParameter = visitforSurgeryTeacherId.HasValue ?
                new ObjectParameter("VisitforSurgeryTeacherId", visitforSurgeryTeacherId) :
                new ObjectParameter("VisitforSurgeryTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryTeacher_Delete_Result>("sp_tblVisitforSurgeryTeacher_Delete", visitforSurgeryTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryTeacher_GetDetail_Result> sp_tblVisitforSurgeryTeacher_GetDetail(Nullable<int> visitforSurgeryTeacherId)
        {
            var visitforSurgeryTeacherIdParameter = visitforSurgeryTeacherId.HasValue ?
                new ObjectParameter("VisitforSurgeryTeacherId", visitforSurgeryTeacherId) :
                new ObjectParameter("VisitforSurgeryTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryTeacher_GetDetail_Result>("sp_tblVisitforSurgeryTeacher_GetDetail", visitforSurgeryTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryTeacher_GetPreviousTest_Result> sp_tblVisitforSurgeryTeacher_GetPreviousTest(Nullable<int> teacherAutoId)
        {
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryTeacher_GetPreviousTest_Result>("sp_tblVisitforSurgeryTeacher_GetPreviousTest", teacherAutoIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitforSurgeryTeacher_InsertUpdate_Result> sp_tblVisitforSurgeryTeacher_InsertUpdate(Nullable<int> visitforSurgeryTeacherId, Nullable<System.DateTime> visitforSurgeryTeacherTransDate, Nullable<int> teacherAutoId, Nullable<int> hospitalAutoId, Nullable<int> doctorAutoId_Ophthalmologist, Nullable<int> doctorAutoId_Orthoptist, Nullable<int> doctorAutoId_Surgeon, Nullable<int> doctorAutoId_Optometrist, string surgery_RightEye, string surgeryRemarks_RightEye, string surgery_LeftEye, string surgeryRemarks_LeftEye, string remarks_Surgeon, Nullable<System.DateTime> followupDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitforSurgeryTeacherIdParameter = visitforSurgeryTeacherId.HasValue ?
                new ObjectParameter("VisitforSurgeryTeacherId", visitforSurgeryTeacherId) :
                new ObjectParameter("VisitforSurgeryTeacherId", typeof(int));
    
            var visitforSurgeryTeacherTransDateParameter = visitforSurgeryTeacherTransDate.HasValue ?
                new ObjectParameter("VisitforSurgeryTeacherTransDate", visitforSurgeryTeacherTransDate) :
                new ObjectParameter("VisitforSurgeryTeacherTransDate", typeof(System.DateTime));
    
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var doctorAutoId_OphthalmologistParameter = doctorAutoId_Ophthalmologist.HasValue ?
                new ObjectParameter("DoctorAutoId_Ophthalmologist", doctorAutoId_Ophthalmologist) :
                new ObjectParameter("DoctorAutoId_Ophthalmologist", typeof(int));
    
            var doctorAutoId_OrthoptistParameter = doctorAutoId_Orthoptist.HasValue ?
                new ObjectParameter("DoctorAutoId_Orthoptist", doctorAutoId_Orthoptist) :
                new ObjectParameter("DoctorAutoId_Orthoptist", typeof(int));
    
            var doctorAutoId_SurgeonParameter = doctorAutoId_Surgeon.HasValue ?
                new ObjectParameter("DoctorAutoId_Surgeon", doctorAutoId_Surgeon) :
                new ObjectParameter("DoctorAutoId_Surgeon", typeof(int));
    
            var doctorAutoId_OptometristParameter = doctorAutoId_Optometrist.HasValue ?
                new ObjectParameter("DoctorAutoId_Optometrist", doctorAutoId_Optometrist) :
                new ObjectParameter("DoctorAutoId_Optometrist", typeof(int));
    
            var surgery_RightEyeParameter = surgery_RightEye != null ?
                new ObjectParameter("Surgery_RightEye", surgery_RightEye) :
                new ObjectParameter("Surgery_RightEye", typeof(string));
    
            var surgeryRemarks_RightEyeParameter = surgeryRemarks_RightEye != null ?
                new ObjectParameter("SurgeryRemarks_RightEye", surgeryRemarks_RightEye) :
                new ObjectParameter("SurgeryRemarks_RightEye", typeof(string));
    
            var surgery_LeftEyeParameter = surgery_LeftEye != null ?
                new ObjectParameter("Surgery_LeftEye", surgery_LeftEye) :
                new ObjectParameter("Surgery_LeftEye", typeof(string));
    
            var surgeryRemarks_LeftEyeParameter = surgeryRemarks_LeftEye != null ?
                new ObjectParameter("SurgeryRemarks_LeftEye", surgeryRemarks_LeftEye) :
                new ObjectParameter("SurgeryRemarks_LeftEye", typeof(string));
    
            var remarks_SurgeonParameter = remarks_Surgeon != null ?
                new ObjectParameter("Remarks_Surgeon", remarks_Surgeon) :
                new ObjectParameter("Remarks_Surgeon", typeof(string));
    
            var followupDateParameter = followupDate.HasValue ?
                new ObjectParameter("FollowupDate", followupDate) :
                new ObjectParameter("FollowupDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitforSurgeryTeacher_InsertUpdate_Result>("sp_tblVisitforSurgeryTeacher_InsertUpdate", visitforSurgeryTeacherIdParameter, visitforSurgeryTeacherTransDateParameter, teacherAutoIdParameter, hospitalAutoIdParameter, doctorAutoId_OphthalmologistParameter, doctorAutoId_OrthoptistParameter, doctorAutoId_SurgeonParameter, doctorAutoId_OptometristParameter, surgery_RightEyeParameter, surgeryRemarks_RightEyeParameter, surgery_LeftEyeParameter, surgeryRemarks_LeftEyeParameter, remarks_SurgeonParameter, followupDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupData_Teacher_Surgery_Result> sp_GetLookupData_Teacher_Surgery(Nullable<int> schoolAutoId, Nullable<int> type)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupData_Teacher_Surgery_Result>("sp_GetLookupData_Teacher_Surgery", schoolAutoIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_ReportforAbnormality_Result> sp_ReportforAbnormality(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> refractiveError, Nullable<int> needscyclopegicrefration, Nullable<int> squintStrabismus, Nullable<int> lazyEyeAmblyopia, Nullable<int> colorblindnessAchromatopsia, Nullable<int> cataract, Nullable<int> traumaticCataract, Nullable<int> keratoconus, Nullable<int> anisometropia, Nullable<int> ptosis, Nullable<int> nystagmus, Nullable<int> lowVision, Nullable<int> corneadefects, Nullable<int> puplidefects, Nullable<int> pterygium, Nullable<int> other, Nullable<int> presbyopia, Nullable<int> myopia, Nullable<int> hypermetropia, Nullable<int> astigmatism)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var refractiveErrorParameter = refractiveError.HasValue ?
                new ObjectParameter("RefractiveError", refractiveError) :
                new ObjectParameter("RefractiveError", typeof(int));
    
            var needscyclopegicrefrationParameter = needscyclopegicrefration.HasValue ?
                new ObjectParameter("Needscyclopegicrefration", needscyclopegicrefration) :
                new ObjectParameter("Needscyclopegicrefration", typeof(int));
    
            var squintStrabismusParameter = squintStrabismus.HasValue ?
                new ObjectParameter("SquintStrabismus", squintStrabismus) :
                new ObjectParameter("SquintStrabismus", typeof(int));
    
            var lazyEyeAmblyopiaParameter = lazyEyeAmblyopia.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia", lazyEyeAmblyopia) :
                new ObjectParameter("LazyEyeAmblyopia", typeof(int));
    
            var colorblindnessAchromatopsiaParameter = colorblindnessAchromatopsia.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia", colorblindnessAchromatopsia) :
                new ObjectParameter("ColorblindnessAchromatopsia", typeof(int));
    
            var cataractParameter = cataract.HasValue ?
                new ObjectParameter("Cataract", cataract) :
                new ObjectParameter("Cataract", typeof(int));
    
            var traumaticCataractParameter = traumaticCataract.HasValue ?
                new ObjectParameter("TraumaticCataract", traumaticCataract) :
                new ObjectParameter("TraumaticCataract", typeof(int));
    
            var keratoconusParameter = keratoconus.HasValue ?
                new ObjectParameter("Keratoconus", keratoconus) :
                new ObjectParameter("Keratoconus", typeof(int));
    
            var anisometropiaParameter = anisometropia.HasValue ?
                new ObjectParameter("Anisometropia", anisometropia) :
                new ObjectParameter("Anisometropia", typeof(int));
    
            var ptosisParameter = ptosis.HasValue ?
                new ObjectParameter("Ptosis", ptosis) :
                new ObjectParameter("Ptosis", typeof(int));
    
            var nystagmusParameter = nystagmus.HasValue ?
                new ObjectParameter("Nystagmus", nystagmus) :
                new ObjectParameter("Nystagmus", typeof(int));
    
            var lowVisionParameter = lowVision.HasValue ?
                new ObjectParameter("LowVision", lowVision) :
                new ObjectParameter("LowVision", typeof(int));
    
            var corneadefectsParameter = corneadefects.HasValue ?
                new ObjectParameter("Corneadefects", corneadefects) :
                new ObjectParameter("Corneadefects", typeof(int));
    
            var puplidefectsParameter = puplidefects.HasValue ?
                new ObjectParameter("Puplidefects", puplidefects) :
                new ObjectParameter("Puplidefects", typeof(int));
    
            var pterygiumParameter = pterygium.HasValue ?
                new ObjectParameter("Pterygium", pterygium) :
                new ObjectParameter("Pterygium", typeof(int));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(int));
    
            var presbyopiaParameter = presbyopia.HasValue ?
                new ObjectParameter("Presbyopia", presbyopia) :
                new ObjectParameter("Presbyopia", typeof(int));
    
            var myopiaParameter = myopia.HasValue ?
                new ObjectParameter("Myopia", myopia) :
                new ObjectParameter("Myopia", typeof(int));
    
            var hypermetropiaParameter = hypermetropia.HasValue ?
                new ObjectParameter("Hypermetropia", hypermetropia) :
                new ObjectParameter("Hypermetropia", typeof(int));
    
            var astigmatismParameter = astigmatism.HasValue ?
                new ObjectParameter("Astigmatism", astigmatism) :
                new ObjectParameter("Astigmatism", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforAbnormality_Result>("sp_ReportforAbnormality", schoolAutoIdParameter, dateFromParameter, dateToParameter, refractiveErrorParameter, needscyclopegicrefrationParameter, squintStrabismusParameter, lazyEyeAmblyopiaParameter, colorblindnessAchromatopsiaParameter, cataractParameter, traumaticCataractParameter, keratoconusParameter, anisometropiaParameter, ptosisParameter, nystagmusParameter, lowVisionParameter, corneadefectsParameter, puplidefectsParameter, pterygiumParameter, otherParameter, presbyopiaParameter, myopiaParameter, hypermetropiaParameter, astigmatismParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ReportforAbnormality_CheckData(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> refractiveError, Nullable<int> needscyclopegicrefration, Nullable<int> squintStrabismus, Nullable<int> lazyEyeAmblyopia, Nullable<int> colorblindnessAchromatopsia, Nullable<int> cataract, Nullable<int> traumaticCataract, Nullable<int> keratoconus, Nullable<int> anisometropia, Nullable<int> ptosis, Nullable<int> nystagmus, Nullable<int> lowVision, Nullable<int> corneadefects, Nullable<int> puplidefects, Nullable<int> pterygium, Nullable<int> other, Nullable<int> presbyopia, Nullable<int> myopia, Nullable<int> hypermetropia, Nullable<int> astigmatism)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var refractiveErrorParameter = refractiveError.HasValue ?
                new ObjectParameter("RefractiveError", refractiveError) :
                new ObjectParameter("RefractiveError", typeof(int));
    
            var needscyclopegicrefrationParameter = needscyclopegicrefration.HasValue ?
                new ObjectParameter("Needscyclopegicrefration", needscyclopegicrefration) :
                new ObjectParameter("Needscyclopegicrefration", typeof(int));
    
            var squintStrabismusParameter = squintStrabismus.HasValue ?
                new ObjectParameter("SquintStrabismus", squintStrabismus) :
                new ObjectParameter("SquintStrabismus", typeof(int));
    
            var lazyEyeAmblyopiaParameter = lazyEyeAmblyopia.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia", lazyEyeAmblyopia) :
                new ObjectParameter("LazyEyeAmblyopia", typeof(int));
    
            var colorblindnessAchromatopsiaParameter = colorblindnessAchromatopsia.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia", colorblindnessAchromatopsia) :
                new ObjectParameter("ColorblindnessAchromatopsia", typeof(int));
    
            var cataractParameter = cataract.HasValue ?
                new ObjectParameter("Cataract", cataract) :
                new ObjectParameter("Cataract", typeof(int));
    
            var traumaticCataractParameter = traumaticCataract.HasValue ?
                new ObjectParameter("TraumaticCataract", traumaticCataract) :
                new ObjectParameter("TraumaticCataract", typeof(int));
    
            var keratoconusParameter = keratoconus.HasValue ?
                new ObjectParameter("Keratoconus", keratoconus) :
                new ObjectParameter("Keratoconus", typeof(int));
    
            var anisometropiaParameter = anisometropia.HasValue ?
                new ObjectParameter("Anisometropia", anisometropia) :
                new ObjectParameter("Anisometropia", typeof(int));
    
            var ptosisParameter = ptosis.HasValue ?
                new ObjectParameter("Ptosis", ptosis) :
                new ObjectParameter("Ptosis", typeof(int));
    
            var nystagmusParameter = nystagmus.HasValue ?
                new ObjectParameter("Nystagmus", nystagmus) :
                new ObjectParameter("Nystagmus", typeof(int));
    
            var lowVisionParameter = lowVision.HasValue ?
                new ObjectParameter("LowVision", lowVision) :
                new ObjectParameter("LowVision", typeof(int));
    
            var corneadefectsParameter = corneadefects.HasValue ?
                new ObjectParameter("Corneadefects", corneadefects) :
                new ObjectParameter("Corneadefects", typeof(int));
    
            var puplidefectsParameter = puplidefects.HasValue ?
                new ObjectParameter("Puplidefects", puplidefects) :
                new ObjectParameter("Puplidefects", typeof(int));
    
            var pterygiumParameter = pterygium.HasValue ?
                new ObjectParameter("Pterygium", pterygium) :
                new ObjectParameter("Pterygium", typeof(int));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(int));
    
            var presbyopiaParameter = presbyopia.HasValue ?
                new ObjectParameter("Presbyopia", presbyopia) :
                new ObjectParameter("Presbyopia", typeof(int));
    
            var myopiaParameter = myopia.HasValue ?
                new ObjectParameter("Myopia", myopia) :
                new ObjectParameter("Myopia", typeof(int));
    
            var hypermetropiaParameter = hypermetropia.HasValue ?
                new ObjectParameter("Hypermetropia", hypermetropia) :
                new ObjectParameter("Hypermetropia", typeof(int));
    
            var astigmatismParameter = astigmatism.HasValue ?
                new ObjectParameter("Astigmatism", astigmatism) :
                new ObjectParameter("Astigmatism", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ReportforAbnormality_CheckData", schoolAutoIdParameter, classAutoIdParameter, fromDateParameter, toDateParameter, refractiveErrorParameter, needscyclopegicrefrationParameter, squintStrabismusParameter, lazyEyeAmblyopiaParameter, colorblindnessAchromatopsiaParameter, cataractParameter, traumaticCataractParameter, keratoconusParameter, anisometropiaParameter, ptosisParameter, nystagmusParameter, lowVisionParameter, corneadefectsParameter, puplidefectsParameter, pterygiumParameter, otherParameter, presbyopiaParameter, myopiaParameter, hypermetropiaParameter, astigmatismParameter);
        }
    
        public virtual ObjectResult<sp_ReportforAbnormality_ClassWise_Result> sp_ReportforAbnormality_ClassWise(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> refractiveError, Nullable<int> needscyclopegicrefration, Nullable<int> squintStrabismus, Nullable<int> lazyEyeAmblyopia, Nullable<int> colorblindnessAchromatopsia, Nullable<int> cataract, Nullable<int> traumaticCataract, Nullable<int> keratoconus, Nullable<int> anisometropia, Nullable<int> ptosis, Nullable<int> nystagmus, Nullable<int> lowVision, Nullable<int> corneadefects, Nullable<int> puplidefects, Nullable<int> pterygium, Nullable<int> other, Nullable<int> presbyopia, Nullable<int> myopia, Nullable<int> hypermetropia, Nullable<int> astigmatism)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var refractiveErrorParameter = refractiveError.HasValue ?
                new ObjectParameter("RefractiveError", refractiveError) :
                new ObjectParameter("RefractiveError", typeof(int));
    
            var needscyclopegicrefrationParameter = needscyclopegicrefration.HasValue ?
                new ObjectParameter("Needscyclopegicrefration", needscyclopegicrefration) :
                new ObjectParameter("Needscyclopegicrefration", typeof(int));
    
            var squintStrabismusParameter = squintStrabismus.HasValue ?
                new ObjectParameter("SquintStrabismus", squintStrabismus) :
                new ObjectParameter("SquintStrabismus", typeof(int));
    
            var lazyEyeAmblyopiaParameter = lazyEyeAmblyopia.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia", lazyEyeAmblyopia) :
                new ObjectParameter("LazyEyeAmblyopia", typeof(int));
    
            var colorblindnessAchromatopsiaParameter = colorblindnessAchromatopsia.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia", colorblindnessAchromatopsia) :
                new ObjectParameter("ColorblindnessAchromatopsia", typeof(int));
    
            var cataractParameter = cataract.HasValue ?
                new ObjectParameter("Cataract", cataract) :
                new ObjectParameter("Cataract", typeof(int));
    
            var traumaticCataractParameter = traumaticCataract.HasValue ?
                new ObjectParameter("TraumaticCataract", traumaticCataract) :
                new ObjectParameter("TraumaticCataract", typeof(int));
    
            var keratoconusParameter = keratoconus.HasValue ?
                new ObjectParameter("Keratoconus", keratoconus) :
                new ObjectParameter("Keratoconus", typeof(int));
    
            var anisometropiaParameter = anisometropia.HasValue ?
                new ObjectParameter("Anisometropia", anisometropia) :
                new ObjectParameter("Anisometropia", typeof(int));
    
            var ptosisParameter = ptosis.HasValue ?
                new ObjectParameter("Ptosis", ptosis) :
                new ObjectParameter("Ptosis", typeof(int));
    
            var nystagmusParameter = nystagmus.HasValue ?
                new ObjectParameter("Nystagmus", nystagmus) :
                new ObjectParameter("Nystagmus", typeof(int));
    
            var lowVisionParameter = lowVision.HasValue ?
                new ObjectParameter("LowVision", lowVision) :
                new ObjectParameter("LowVision", typeof(int));
    
            var corneadefectsParameter = corneadefects.HasValue ?
                new ObjectParameter("Corneadefects", corneadefects) :
                new ObjectParameter("Corneadefects", typeof(int));
    
            var puplidefectsParameter = puplidefects.HasValue ?
                new ObjectParameter("Puplidefects", puplidefects) :
                new ObjectParameter("Puplidefects", typeof(int));
    
            var pterygiumParameter = pterygium.HasValue ?
                new ObjectParameter("Pterygium", pterygium) :
                new ObjectParameter("Pterygium", typeof(int));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(int));
    
            var presbyopiaParameter = presbyopia.HasValue ?
                new ObjectParameter("Presbyopia", presbyopia) :
                new ObjectParameter("Presbyopia", typeof(int));
    
            var myopiaParameter = myopia.HasValue ?
                new ObjectParameter("Myopia", myopia) :
                new ObjectParameter("Myopia", typeof(int));
    
            var hypermetropiaParameter = hypermetropia.HasValue ?
                new ObjectParameter("Hypermetropia", hypermetropia) :
                new ObjectParameter("Hypermetropia", typeof(int));
    
            var astigmatismParameter = astigmatism.HasValue ?
                new ObjectParameter("Astigmatism", astigmatism) :
                new ObjectParameter("Astigmatism", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforAbnormality_ClassWise_Result>("sp_ReportforAbnormality_ClassWise", schoolAutoIdParameter, classAutoIdParameter, dateFromParameter, dateToParameter, refractiveErrorParameter, needscyclopegicrefrationParameter, squintStrabismusParameter, lazyEyeAmblyopiaParameter, colorblindnessAchromatopsiaParameter, cataractParameter, traumaticCataractParameter, keratoconusParameter, anisometropiaParameter, ptosisParameter, nystagmusParameter, lowVisionParameter, corneadefectsParameter, puplidefectsParameter, pterygiumParameter, otherParameter, presbyopiaParameter, myopiaParameter, hypermetropiaParameter, astigmatismParameter);
        }
    
        public virtual ObjectResult<sp_ReportforAbnormality_SchoolWise_Result> sp_ReportforAbnormality_SchoolWise(Nullable<int> schoolAutoId, Nullable<int> classAutoId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> refractiveError, Nullable<int> needscyclopegicrefration, Nullable<int> squintStrabismus, Nullable<int> lazyEyeAmblyopia, Nullable<int> colorblindnessAchromatopsia, Nullable<int> cataract, Nullable<int> traumaticCataract, Nullable<int> keratoconus, Nullable<int> anisometropia, Nullable<int> ptosis, Nullable<int> nystagmus, Nullable<int> lowVision, Nullable<int> corneadefects, Nullable<int> puplidefects, Nullable<int> pterygium, Nullable<int> other, Nullable<int> presbyopia, Nullable<int> myopia, Nullable<int> hypermetropia, Nullable<int> astigmatism)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var classAutoIdParameter = classAutoId.HasValue ?
                new ObjectParameter("ClassAutoId", classAutoId) :
                new ObjectParameter("ClassAutoId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var refractiveErrorParameter = refractiveError.HasValue ?
                new ObjectParameter("RefractiveError", refractiveError) :
                new ObjectParameter("RefractiveError", typeof(int));
    
            var needscyclopegicrefrationParameter = needscyclopegicrefration.HasValue ?
                new ObjectParameter("Needscyclopegicrefration", needscyclopegicrefration) :
                new ObjectParameter("Needscyclopegicrefration", typeof(int));
    
            var squintStrabismusParameter = squintStrabismus.HasValue ?
                new ObjectParameter("SquintStrabismus", squintStrabismus) :
                new ObjectParameter("SquintStrabismus", typeof(int));
    
            var lazyEyeAmblyopiaParameter = lazyEyeAmblyopia.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia", lazyEyeAmblyopia) :
                new ObjectParameter("LazyEyeAmblyopia", typeof(int));
    
            var colorblindnessAchromatopsiaParameter = colorblindnessAchromatopsia.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia", colorblindnessAchromatopsia) :
                new ObjectParameter("ColorblindnessAchromatopsia", typeof(int));
    
            var cataractParameter = cataract.HasValue ?
                new ObjectParameter("Cataract", cataract) :
                new ObjectParameter("Cataract", typeof(int));
    
            var traumaticCataractParameter = traumaticCataract.HasValue ?
                new ObjectParameter("TraumaticCataract", traumaticCataract) :
                new ObjectParameter("TraumaticCataract", typeof(int));
    
            var keratoconusParameter = keratoconus.HasValue ?
                new ObjectParameter("Keratoconus", keratoconus) :
                new ObjectParameter("Keratoconus", typeof(int));
    
            var anisometropiaParameter = anisometropia.HasValue ?
                new ObjectParameter("Anisometropia", anisometropia) :
                new ObjectParameter("Anisometropia", typeof(int));
    
            var ptosisParameter = ptosis.HasValue ?
                new ObjectParameter("Ptosis", ptosis) :
                new ObjectParameter("Ptosis", typeof(int));
    
            var nystagmusParameter = nystagmus.HasValue ?
                new ObjectParameter("Nystagmus", nystagmus) :
                new ObjectParameter("Nystagmus", typeof(int));
    
            var lowVisionParameter = lowVision.HasValue ?
                new ObjectParameter("LowVision", lowVision) :
                new ObjectParameter("LowVision", typeof(int));
    
            var corneadefectsParameter = corneadefects.HasValue ?
                new ObjectParameter("Corneadefects", corneadefects) :
                new ObjectParameter("Corneadefects", typeof(int));
    
            var puplidefectsParameter = puplidefects.HasValue ?
                new ObjectParameter("Puplidefects", puplidefects) :
                new ObjectParameter("Puplidefects", typeof(int));
    
            var pterygiumParameter = pterygium.HasValue ?
                new ObjectParameter("Pterygium", pterygium) :
                new ObjectParameter("Pterygium", typeof(int));
    
            var otherParameter = other.HasValue ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(int));
    
            var presbyopiaParameter = presbyopia.HasValue ?
                new ObjectParameter("Presbyopia", presbyopia) :
                new ObjectParameter("Presbyopia", typeof(int));
    
            var myopiaParameter = myopia.HasValue ?
                new ObjectParameter("Myopia", myopia) :
                new ObjectParameter("Myopia", typeof(int));
    
            var hypermetropiaParameter = hypermetropia.HasValue ?
                new ObjectParameter("Hypermetropia", hypermetropia) :
                new ObjectParameter("Hypermetropia", typeof(int));
    
            var astigmatismParameter = astigmatism.HasValue ?
                new ObjectParameter("Astigmatism", astigmatism) :
                new ObjectParameter("Astigmatism", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportforAbnormality_SchoolWise_Result>("sp_ReportforAbnormality_SchoolWise", schoolAutoIdParameter, classAutoIdParameter, fromDateParameter, toDateParameter, refractiveErrorParameter, needscyclopegicrefrationParameter, squintStrabismusParameter, lazyEyeAmblyopiaParameter, colorblindnessAchromatopsiaParameter, cataractParameter, traumaticCataractParameter, keratoconusParameter, anisometropiaParameter, ptosisParameter, nystagmusParameter, lowVisionParameter, corneadefectsParameter, puplidefectsParameter, pterygiumParameter, otherParameter, presbyopiaParameter, myopiaParameter, hypermetropiaParameter, astigmatismParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudent_GetDetail_Result> sp_tblTreatmentStudent_GetDetail(Nullable<int> treatmentStudentId)
        {
            var treatmentStudentIdParameter = treatmentStudentId.HasValue ?
                new ObjectParameter("TreatmentStudentId", treatmentStudentId) :
                new ObjectParameter("TreatmentStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudent_GetDetail_Result>("sp_tblTreatmentStudent_GetDetail", treatmentStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentStudent_InsertUpdate_Result> sp_tblTreatmentStudent_InsertUpdate(Nullable<int> treatmentStudentId, Nullable<System.DateTime> treatmentStudentTransDate, Nullable<int> studentAutoId, Nullable<int> normal_RightEye, Nullable<int> refractiveError_RightEye, Nullable<int> lowVision_RightEye, Nullable<int> needsCycloplegicRefraction_RightEye, Nullable<int> squintStrabismus_RightEye, Nullable<int> lazyEyeAmblyopia_RightEye, Nullable<int> colorblindnessAchromatopsia_RightEye, Nullable<int> cataract_RightEye, Nullable<int> traumaticCataract_RightEye, Nullable<int> keratoconus_RightEye, Nullable<int> anisometropia_RightEye, Nullable<int> ptosis_RightEye, Nullable<int> nystagmus_RightEye, Nullable<int> corneadefects_RightEye, Nullable<int> puplidefects_RightEye, Nullable<int> pterygium_RightEye, Nullable<int> other_RightEye, string daignosisRemarks, Nullable<int> normal_LeftEye, Nullable<int> refractiveError_LeftEye, Nullable<int> lowVision_LeftEye, Nullable<int> needsCycloplegicRefraction_LeftEye, Nullable<int> squintStrabismus_LeftEye, Nullable<int> lazyEyeAmblyopia_LeftEye, Nullable<int> colorblindnessAchromatopsia_LeftEye, Nullable<int> cataract_LeftEye, Nullable<int> traumaticCataract_LeftEye, Nullable<int> keratoconus_LeftEye, Nullable<int> anisometropia_LeftEye, Nullable<int> ptosis_LeftEye, Nullable<int> nystagmus_LeftEye, Nullable<int> corneadefects_LeftEye, Nullable<int> puplidefects_LeftEye, Nullable<int> pterygium_LeftEye, Nullable<int> other_LeftEye, string daignosisRemarks_LeftEye, Nullable<int> subDaignosis, Nullable<int> subDaignosis_LeftEye, string motherName, string motherCell, string fatherCell, string address1, string address2, string district, string town, string city, Nullable<int> treatment, Nullable<int> subTreatment, string medicineAutoId, Nullable<int> nextVisit, Nullable<int> surgery, Nullable<int> surgeryDetail, string surgeryDetailRemarks, Nullable<int> referal, Nullable<int> parentAgree, Nullable<int> parentNotAgreeReason, string parentNotAgreeRemarks, Nullable<int> hospitalAutoId, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var treatmentStudentIdParameter = treatmentStudentId.HasValue ?
                new ObjectParameter("TreatmentStudentId", treatmentStudentId) :
                new ObjectParameter("TreatmentStudentId", typeof(int));
    
            var treatmentStudentTransDateParameter = treatmentStudentTransDate.HasValue ?
                new ObjectParameter("TreatmentStudentTransDate", treatmentStudentTransDate) :
                new ObjectParameter("TreatmentStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var normal_RightEyeParameter = normal_RightEye.HasValue ?
                new ObjectParameter("Normal_RightEye", normal_RightEye) :
                new ObjectParameter("Normal_RightEye", typeof(int));
    
            var refractiveError_RightEyeParameter = refractiveError_RightEye.HasValue ?
                new ObjectParameter("RefractiveError_RightEye", refractiveError_RightEye) :
                new ObjectParameter("RefractiveError_RightEye", typeof(int));
    
            var lowVision_RightEyeParameter = lowVision_RightEye.HasValue ?
                new ObjectParameter("LowVision_RightEye", lowVision_RightEye) :
                new ObjectParameter("LowVision_RightEye", typeof(int));
    
            var needsCycloplegicRefraction_RightEyeParameter = needsCycloplegicRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", needsCycloplegicRefraction_RightEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", typeof(int));
    
            var squintStrabismus_RightEyeParameter = squintStrabismus_RightEye.HasValue ?
                new ObjectParameter("SquintStrabismus_RightEye", squintStrabismus_RightEye) :
                new ObjectParameter("SquintStrabismus_RightEye", typeof(int));
    
            var lazyEyeAmblyopia_RightEyeParameter = lazyEyeAmblyopia_RightEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_RightEye", lazyEyeAmblyopia_RightEye) :
                new ObjectParameter("LazyEyeAmblyopia_RightEye", typeof(int));
    
            var colorblindnessAchromatopsia_RightEyeParameter = colorblindnessAchromatopsia_RightEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", colorblindnessAchromatopsia_RightEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", typeof(int));
    
            var cataract_RightEyeParameter = cataract_RightEye.HasValue ?
                new ObjectParameter("Cataract_RightEye", cataract_RightEye) :
                new ObjectParameter("Cataract_RightEye", typeof(int));
    
            var traumaticCataract_RightEyeParameter = traumaticCataract_RightEye.HasValue ?
                new ObjectParameter("TraumaticCataract_RightEye", traumaticCataract_RightEye) :
                new ObjectParameter("TraumaticCataract_RightEye", typeof(int));
    
            var keratoconus_RightEyeParameter = keratoconus_RightEye.HasValue ?
                new ObjectParameter("Keratoconus_RightEye", keratoconus_RightEye) :
                new ObjectParameter("Keratoconus_RightEye", typeof(int));
    
            var anisometropia_RightEyeParameter = anisometropia_RightEye.HasValue ?
                new ObjectParameter("Anisometropia_RightEye", anisometropia_RightEye) :
                new ObjectParameter("Anisometropia_RightEye", typeof(int));
    
            var ptosis_RightEyeParameter = ptosis_RightEye.HasValue ?
                new ObjectParameter("Ptosis_RightEye", ptosis_RightEye) :
                new ObjectParameter("Ptosis_RightEye", typeof(int));
    
            var nystagmus_RightEyeParameter = nystagmus_RightEye.HasValue ?
                new ObjectParameter("Nystagmus_RightEye", nystagmus_RightEye) :
                new ObjectParameter("Nystagmus_RightEye", typeof(int));
    
            var corneadefects_RightEyeParameter = corneadefects_RightEye.HasValue ?
                new ObjectParameter("Corneadefects_RightEye", corneadefects_RightEye) :
                new ObjectParameter("Corneadefects_RightEye", typeof(int));
    
            var puplidefects_RightEyeParameter = puplidefects_RightEye.HasValue ?
                new ObjectParameter("Puplidefects_RightEye", puplidefects_RightEye) :
                new ObjectParameter("Puplidefects_RightEye", typeof(int));
    
            var pterygium_RightEyeParameter = pterygium_RightEye.HasValue ?
                new ObjectParameter("Pterygium_RightEye", pterygium_RightEye) :
                new ObjectParameter("Pterygium_RightEye", typeof(int));
    
            var other_RightEyeParameter = other_RightEye.HasValue ?
                new ObjectParameter("Other_RightEye", other_RightEye) :
                new ObjectParameter("Other_RightEye", typeof(int));
    
            var daignosisRemarksParameter = daignosisRemarks != null ?
                new ObjectParameter("DaignosisRemarks", daignosisRemarks) :
                new ObjectParameter("DaignosisRemarks", typeof(string));
    
            var normal_LeftEyeParameter = normal_LeftEye.HasValue ?
                new ObjectParameter("Normal_LeftEye", normal_LeftEye) :
                new ObjectParameter("Normal_LeftEye", typeof(int));
    
            var refractiveError_LeftEyeParameter = refractiveError_LeftEye.HasValue ?
                new ObjectParameter("RefractiveError_LeftEye", refractiveError_LeftEye) :
                new ObjectParameter("RefractiveError_LeftEye", typeof(int));
    
            var lowVision_LeftEyeParameter = lowVision_LeftEye.HasValue ?
                new ObjectParameter("LowVision_LeftEye", lowVision_LeftEye) :
                new ObjectParameter("LowVision_LeftEye", typeof(int));
    
            var needsCycloplegicRefraction_LeftEyeParameter = needsCycloplegicRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", needsCycloplegicRefraction_LeftEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", typeof(int));
    
            var squintStrabismus_LeftEyeParameter = squintStrabismus_LeftEye.HasValue ?
                new ObjectParameter("SquintStrabismus_LeftEye", squintStrabismus_LeftEye) :
                new ObjectParameter("SquintStrabismus_LeftEye", typeof(int));
    
            var lazyEyeAmblyopia_LeftEyeParameter = lazyEyeAmblyopia_LeftEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", lazyEyeAmblyopia_LeftEye) :
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", typeof(int));
    
            var colorblindnessAchromatopsia_LeftEyeParameter = colorblindnessAchromatopsia_LeftEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", colorblindnessAchromatopsia_LeftEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", typeof(int));
    
            var cataract_LeftEyeParameter = cataract_LeftEye.HasValue ?
                new ObjectParameter("Cataract_LeftEye", cataract_LeftEye) :
                new ObjectParameter("Cataract_LeftEye", typeof(int));
    
            var traumaticCataract_LeftEyeParameter = traumaticCataract_LeftEye.HasValue ?
                new ObjectParameter("TraumaticCataract_LeftEye", traumaticCataract_LeftEye) :
                new ObjectParameter("TraumaticCataract_LeftEye", typeof(int));
    
            var keratoconus_LeftEyeParameter = keratoconus_LeftEye.HasValue ?
                new ObjectParameter("Keratoconus_LeftEye", keratoconus_LeftEye) :
                new ObjectParameter("Keratoconus_LeftEye", typeof(int));
    
            var anisometropia_LeftEyeParameter = anisometropia_LeftEye.HasValue ?
                new ObjectParameter("Anisometropia_LeftEye", anisometropia_LeftEye) :
                new ObjectParameter("Anisometropia_LeftEye", typeof(int));
    
            var ptosis_LeftEyeParameter = ptosis_LeftEye.HasValue ?
                new ObjectParameter("Ptosis_LeftEye", ptosis_LeftEye) :
                new ObjectParameter("Ptosis_LeftEye", typeof(int));
    
            var nystagmus_LeftEyeParameter = nystagmus_LeftEye.HasValue ?
                new ObjectParameter("Nystagmus_LeftEye", nystagmus_LeftEye) :
                new ObjectParameter("Nystagmus_LeftEye", typeof(int));
    
            var corneadefects_LeftEyeParameter = corneadefects_LeftEye.HasValue ?
                new ObjectParameter("Corneadefects_LeftEye", corneadefects_LeftEye) :
                new ObjectParameter("Corneadefects_LeftEye", typeof(int));
    
            var puplidefects_LeftEyeParameter = puplidefects_LeftEye.HasValue ?
                new ObjectParameter("Puplidefects_LeftEye", puplidefects_LeftEye) :
                new ObjectParameter("Puplidefects_LeftEye", typeof(int));
    
            var pterygium_LeftEyeParameter = pterygium_LeftEye.HasValue ?
                new ObjectParameter("Pterygium_LeftEye", pterygium_LeftEye) :
                new ObjectParameter("Pterygium_LeftEye", typeof(int));
    
            var other_LeftEyeParameter = other_LeftEye.HasValue ?
                new ObjectParameter("Other_LeftEye", other_LeftEye) :
                new ObjectParameter("Other_LeftEye", typeof(int));
    
            var daignosisRemarks_LeftEyeParameter = daignosisRemarks_LeftEye != null ?
                new ObjectParameter("DaignosisRemarks_LeftEye", daignosisRemarks_LeftEye) :
                new ObjectParameter("DaignosisRemarks_LeftEye", typeof(string));
    
            var subDaignosisParameter = subDaignosis.HasValue ?
                new ObjectParameter("SubDaignosis", subDaignosis) :
                new ObjectParameter("SubDaignosis", typeof(int));
    
            var subDaignosis_LeftEyeParameter = subDaignosis_LeftEye.HasValue ?
                new ObjectParameter("SubDaignosis_LeftEye", subDaignosis_LeftEye) :
                new ObjectParameter("SubDaignosis_LeftEye", typeof(int));
    
            var motherNameParameter = motherName != null ?
                new ObjectParameter("MotherName", motherName) :
                new ObjectParameter("MotherName", typeof(string));
    
            var motherCellParameter = motherCell != null ?
                new ObjectParameter("MotherCell", motherCell) :
                new ObjectParameter("MotherCell", typeof(string));
    
            var fatherCellParameter = fatherCell != null ?
                new ObjectParameter("FatherCell", fatherCell) :
                new ObjectParameter("FatherCell", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var treatmentParameter = treatment.HasValue ?
                new ObjectParameter("Treatment", treatment) :
                new ObjectParameter("Treatment", typeof(int));
    
            var subTreatmentParameter = subTreatment.HasValue ?
                new ObjectParameter("SubTreatment", subTreatment) :
                new ObjectParameter("SubTreatment", typeof(int));
    
            var medicineAutoIdParameter = medicineAutoId != null ?
                new ObjectParameter("MedicineAutoId", medicineAutoId) :
                new ObjectParameter("MedicineAutoId", typeof(string));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(int));
    
            var surgeryParameter = surgery.HasValue ?
                new ObjectParameter("Surgery", surgery) :
                new ObjectParameter("Surgery", typeof(int));
    
            var surgeryDetailParameter = surgeryDetail.HasValue ?
                new ObjectParameter("SurgeryDetail", surgeryDetail) :
                new ObjectParameter("SurgeryDetail", typeof(int));
    
            var surgeryDetailRemarksParameter = surgeryDetailRemarks != null ?
                new ObjectParameter("SurgeryDetailRemarks", surgeryDetailRemarks) :
                new ObjectParameter("SurgeryDetailRemarks", typeof(string));
    
            var referalParameter = referal.HasValue ?
                new ObjectParameter("Referal", referal) :
                new ObjectParameter("Referal", typeof(int));
    
            var parentAgreeParameter = parentAgree.HasValue ?
                new ObjectParameter("ParentAgree", parentAgree) :
                new ObjectParameter("ParentAgree", typeof(int));
    
            var parentNotAgreeReasonParameter = parentNotAgreeReason.HasValue ?
                new ObjectParameter("ParentNotAgreeReason", parentNotAgreeReason) :
                new ObjectParameter("ParentNotAgreeReason", typeof(int));
    
            var parentNotAgreeRemarksParameter = parentNotAgreeRemarks != null ?
                new ObjectParameter("ParentNotAgreeRemarks", parentNotAgreeRemarks) :
                new ObjectParameter("ParentNotAgreeRemarks", typeof(string));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentStudent_InsertUpdate_Result>("sp_tblTreatmentStudent_InsertUpdate", treatmentStudentIdParameter, treatmentStudentTransDateParameter, studentAutoIdParameter, normal_RightEyeParameter, refractiveError_RightEyeParameter, lowVision_RightEyeParameter, needsCycloplegicRefraction_RightEyeParameter, squintStrabismus_RightEyeParameter, lazyEyeAmblyopia_RightEyeParameter, colorblindnessAchromatopsia_RightEyeParameter, cataract_RightEyeParameter, traumaticCataract_RightEyeParameter, keratoconus_RightEyeParameter, anisometropia_RightEyeParameter, ptosis_RightEyeParameter, nystagmus_RightEyeParameter, corneadefects_RightEyeParameter, puplidefects_RightEyeParameter, pterygium_RightEyeParameter, other_RightEyeParameter, daignosisRemarksParameter, normal_LeftEyeParameter, refractiveError_LeftEyeParameter, lowVision_LeftEyeParameter, needsCycloplegicRefraction_LeftEyeParameter, squintStrabismus_LeftEyeParameter, lazyEyeAmblyopia_LeftEyeParameter, colorblindnessAchromatopsia_LeftEyeParameter, cataract_LeftEyeParameter, traumaticCataract_LeftEyeParameter, keratoconus_LeftEyeParameter, anisometropia_LeftEyeParameter, ptosis_LeftEyeParameter, nystagmus_LeftEyeParameter, corneadefects_LeftEyeParameter, puplidefects_LeftEyeParameter, pterygium_LeftEyeParameter, other_LeftEyeParameter, daignosisRemarks_LeftEyeParameter, subDaignosisParameter, subDaignosis_LeftEyeParameter, motherNameParameter, motherCellParameter, fatherCellParameter, address1Parameter, address2Parameter, districtParameter, townParameter, cityParameter, treatmentParameter, subTreatmentParameter, medicineAutoIdParameter, nextVisitParameter, surgeryParameter, surgeryDetailParameter, surgeryDetailRemarksParameter, referalParameter, parentAgreeParameter, parentNotAgreeReasonParameter, parentNotAgreeRemarksParameter, hospitalAutoIdParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentTeacher_GetDetail_Result> sp_tblTreatmentTeacher_GetDetail(Nullable<int> treatmentTeacherId)
        {
            var treatmentTeacherIdParameter = treatmentTeacherId.HasValue ?
                new ObjectParameter("TreatmentTeacherId", treatmentTeacherId) :
                new ObjectParameter("TreatmentTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentTeacher_GetDetail_Result>("sp_tblTreatmentTeacher_GetDetail", treatmentTeacherIdParameter);
        }
    
        public virtual ObjectResult<sp_tblTreatmentTeacher_InsertUpdate_Result> sp_tblTreatmentTeacher_InsertUpdate(Nullable<int> treatmentTeacherId, Nullable<System.DateTime> treatmentTeacherTransDate, Nullable<int> teacherAutoId, Nullable<int> normal_RightEye, Nullable<int> refractiveError_RightEye, Nullable<int> lowVision_RightEye, Nullable<int> needsCycloplegicRefraction_RightEye, Nullable<int> squintStrabismus_RightEye, Nullable<int> lazyEyeAmblyopia_RightEye, Nullable<int> colorblindnessAchromatopsia_RightEye, Nullable<int> cataract_RightEye, Nullable<int> traumaticCataract_RightEye, Nullable<int> keratoconus_RightEye, Nullable<int> anisometropia_RightEye, Nullable<int> ptosis_RightEye, Nullable<int> nystagmus_RightEye, Nullable<int> corneadefects_RightEye, Nullable<int> puplidefects_RightEye, Nullable<int> pterygium_RightEye, Nullable<int> other_RightEye, string daignosisRemarks, Nullable<int> normal_LeftEye, Nullable<int> refractiveError_LeftEye, Nullable<int> lowVision_LeftEye, Nullable<int> needsCycloplegicRefraction_LeftEye, Nullable<int> squintStrabismus_LeftEye, Nullable<int> lazyEyeAmblyopia_LeftEye, Nullable<int> colorblindnessAchromatopsia_LeftEye, Nullable<int> cataract_LeftEye, Nullable<int> traumaticCataract_LeftEye, Nullable<int> keratoconus_LeftEye, Nullable<int> anisometropia_LeftEye, Nullable<int> ptosis_LeftEye, Nullable<int> nystagmus_LeftEye, Nullable<int> corneadefects_LeftEye, Nullable<int> puplidefects_LeftEye, Nullable<int> pterygium_LeftEye, Nullable<int> other_LeftEye, string daignosisRemarks_LeftEye, Nullable<int> subDaignosis, Nullable<int> subDaignosis_LeftEye, string motherName, string motherCell, string fatherCell, string address1, string address2, string district, string town, string city, Nullable<int> treatment, Nullable<int> subTreatment, string medicineAutoId, Nullable<int> nextVisit, Nullable<int> surgery, Nullable<int> surgeryDetail, string surgeryDetailRemarks, Nullable<int> referal, Nullable<int> parentAgree, Nullable<int> parentNotAgreeReason, string parentNotAgreeRemarks, Nullable<int> hospitalAutoId, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var treatmentTeacherIdParameter = treatmentTeacherId.HasValue ?
                new ObjectParameter("TreatmentTeacherId", treatmentTeacherId) :
                new ObjectParameter("TreatmentTeacherId", typeof(int));
    
            var treatmentTeacherTransDateParameter = treatmentTeacherTransDate.HasValue ?
                new ObjectParameter("TreatmentTeacherTransDate", treatmentTeacherTransDate) :
                new ObjectParameter("TreatmentTeacherTransDate", typeof(System.DateTime));
    
            var teacherAutoIdParameter = teacherAutoId.HasValue ?
                new ObjectParameter("TeacherAutoId", teacherAutoId) :
                new ObjectParameter("TeacherAutoId", typeof(int));
    
            var normal_RightEyeParameter = normal_RightEye.HasValue ?
                new ObjectParameter("Normal_RightEye", normal_RightEye) :
                new ObjectParameter("Normal_RightEye", typeof(int));
    
            var refractiveError_RightEyeParameter = refractiveError_RightEye.HasValue ?
                new ObjectParameter("RefractiveError_RightEye", refractiveError_RightEye) :
                new ObjectParameter("RefractiveError_RightEye", typeof(int));
    
            var lowVision_RightEyeParameter = lowVision_RightEye.HasValue ?
                new ObjectParameter("LowVision_RightEye", lowVision_RightEye) :
                new ObjectParameter("LowVision_RightEye", typeof(int));
    
            var needsCycloplegicRefraction_RightEyeParameter = needsCycloplegicRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", needsCycloplegicRefraction_RightEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", typeof(int));
    
            var squintStrabismus_RightEyeParameter = squintStrabismus_RightEye.HasValue ?
                new ObjectParameter("SquintStrabismus_RightEye", squintStrabismus_RightEye) :
                new ObjectParameter("SquintStrabismus_RightEye", typeof(int));
    
            var lazyEyeAmblyopia_RightEyeParameter = lazyEyeAmblyopia_RightEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_RightEye", lazyEyeAmblyopia_RightEye) :
                new ObjectParameter("LazyEyeAmblyopia_RightEye", typeof(int));
    
            var colorblindnessAchromatopsia_RightEyeParameter = colorblindnessAchromatopsia_RightEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", colorblindnessAchromatopsia_RightEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", typeof(int));
    
            var cataract_RightEyeParameter = cataract_RightEye.HasValue ?
                new ObjectParameter("Cataract_RightEye", cataract_RightEye) :
                new ObjectParameter("Cataract_RightEye", typeof(int));
    
            var traumaticCataract_RightEyeParameter = traumaticCataract_RightEye.HasValue ?
                new ObjectParameter("TraumaticCataract_RightEye", traumaticCataract_RightEye) :
                new ObjectParameter("TraumaticCataract_RightEye", typeof(int));
    
            var keratoconus_RightEyeParameter = keratoconus_RightEye.HasValue ?
                new ObjectParameter("Keratoconus_RightEye", keratoconus_RightEye) :
                new ObjectParameter("Keratoconus_RightEye", typeof(int));
    
            var anisometropia_RightEyeParameter = anisometropia_RightEye.HasValue ?
                new ObjectParameter("Anisometropia_RightEye", anisometropia_RightEye) :
                new ObjectParameter("Anisometropia_RightEye", typeof(int));
    
            var ptosis_RightEyeParameter = ptosis_RightEye.HasValue ?
                new ObjectParameter("Ptosis_RightEye", ptosis_RightEye) :
                new ObjectParameter("Ptosis_RightEye", typeof(int));
    
            var nystagmus_RightEyeParameter = nystagmus_RightEye.HasValue ?
                new ObjectParameter("Nystagmus_RightEye", nystagmus_RightEye) :
                new ObjectParameter("Nystagmus_RightEye", typeof(int));
    
            var corneadefects_RightEyeParameter = corneadefects_RightEye.HasValue ?
                new ObjectParameter("Corneadefects_RightEye", corneadefects_RightEye) :
                new ObjectParameter("Corneadefects_RightEye", typeof(int));
    
            var puplidefects_RightEyeParameter = puplidefects_RightEye.HasValue ?
                new ObjectParameter("Puplidefects_RightEye", puplidefects_RightEye) :
                new ObjectParameter("Puplidefects_RightEye", typeof(int));
    
            var pterygium_RightEyeParameter = pterygium_RightEye.HasValue ?
                new ObjectParameter("Pterygium_RightEye", pterygium_RightEye) :
                new ObjectParameter("Pterygium_RightEye", typeof(int));
    
            var other_RightEyeParameter = other_RightEye.HasValue ?
                new ObjectParameter("Other_RightEye", other_RightEye) :
                new ObjectParameter("Other_RightEye", typeof(int));
    
            var daignosisRemarksParameter = daignosisRemarks != null ?
                new ObjectParameter("DaignosisRemarks", daignosisRemarks) :
                new ObjectParameter("DaignosisRemarks", typeof(string));
    
            var normal_LeftEyeParameter = normal_LeftEye.HasValue ?
                new ObjectParameter("Normal_LeftEye", normal_LeftEye) :
                new ObjectParameter("Normal_LeftEye", typeof(int));
    
            var refractiveError_LeftEyeParameter = refractiveError_LeftEye.HasValue ?
                new ObjectParameter("RefractiveError_LeftEye", refractiveError_LeftEye) :
                new ObjectParameter("RefractiveError_LeftEye", typeof(int));
    
            var lowVision_LeftEyeParameter = lowVision_LeftEye.HasValue ?
                new ObjectParameter("LowVision_LeftEye", lowVision_LeftEye) :
                new ObjectParameter("LowVision_LeftEye", typeof(int));
    
            var needsCycloplegicRefraction_LeftEyeParameter = needsCycloplegicRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", needsCycloplegicRefraction_LeftEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", typeof(int));
    
            var squintStrabismus_LeftEyeParameter = squintStrabismus_LeftEye.HasValue ?
                new ObjectParameter("SquintStrabismus_LeftEye", squintStrabismus_LeftEye) :
                new ObjectParameter("SquintStrabismus_LeftEye", typeof(int));
    
            var lazyEyeAmblyopia_LeftEyeParameter = lazyEyeAmblyopia_LeftEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", lazyEyeAmblyopia_LeftEye) :
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", typeof(int));
    
            var colorblindnessAchromatopsia_LeftEyeParameter = colorblindnessAchromatopsia_LeftEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", colorblindnessAchromatopsia_LeftEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", typeof(int));
    
            var cataract_LeftEyeParameter = cataract_LeftEye.HasValue ?
                new ObjectParameter("Cataract_LeftEye", cataract_LeftEye) :
                new ObjectParameter("Cataract_LeftEye", typeof(int));
    
            var traumaticCataract_LeftEyeParameter = traumaticCataract_LeftEye.HasValue ?
                new ObjectParameter("TraumaticCataract_LeftEye", traumaticCataract_LeftEye) :
                new ObjectParameter("TraumaticCataract_LeftEye", typeof(int));
    
            var keratoconus_LeftEyeParameter = keratoconus_LeftEye.HasValue ?
                new ObjectParameter("Keratoconus_LeftEye", keratoconus_LeftEye) :
                new ObjectParameter("Keratoconus_LeftEye", typeof(int));
    
            var anisometropia_LeftEyeParameter = anisometropia_LeftEye.HasValue ?
                new ObjectParameter("Anisometropia_LeftEye", anisometropia_LeftEye) :
                new ObjectParameter("Anisometropia_LeftEye", typeof(int));
    
            var ptosis_LeftEyeParameter = ptosis_LeftEye.HasValue ?
                new ObjectParameter("Ptosis_LeftEye", ptosis_LeftEye) :
                new ObjectParameter("Ptosis_LeftEye", typeof(int));
    
            var nystagmus_LeftEyeParameter = nystagmus_LeftEye.HasValue ?
                new ObjectParameter("Nystagmus_LeftEye", nystagmus_LeftEye) :
                new ObjectParameter("Nystagmus_LeftEye", typeof(int));
    
            var corneadefects_LeftEyeParameter = corneadefects_LeftEye.HasValue ?
                new ObjectParameter("Corneadefects_LeftEye", corneadefects_LeftEye) :
                new ObjectParameter("Corneadefects_LeftEye", typeof(int));
    
            var puplidefects_LeftEyeParameter = puplidefects_LeftEye.HasValue ?
                new ObjectParameter("Puplidefects_LeftEye", puplidefects_LeftEye) :
                new ObjectParameter("Puplidefects_LeftEye", typeof(int));
    
            var pterygium_LeftEyeParameter = pterygium_LeftEye.HasValue ?
                new ObjectParameter("Pterygium_LeftEye", pterygium_LeftEye) :
                new ObjectParameter("Pterygium_LeftEye", typeof(int));
    
            var other_LeftEyeParameter = other_LeftEye.HasValue ?
                new ObjectParameter("Other_LeftEye", other_LeftEye) :
                new ObjectParameter("Other_LeftEye", typeof(int));
    
            var daignosisRemarks_LeftEyeParameter = daignosisRemarks_LeftEye != null ?
                new ObjectParameter("DaignosisRemarks_LeftEye", daignosisRemarks_LeftEye) :
                new ObjectParameter("DaignosisRemarks_LeftEye", typeof(string));
    
            var subDaignosisParameter = subDaignosis.HasValue ?
                new ObjectParameter("SubDaignosis", subDaignosis) :
                new ObjectParameter("SubDaignosis", typeof(int));
    
            var subDaignosis_LeftEyeParameter = subDaignosis_LeftEye.HasValue ?
                new ObjectParameter("SubDaignosis_LeftEye", subDaignosis_LeftEye) :
                new ObjectParameter("SubDaignosis_LeftEye", typeof(int));
    
            var motherNameParameter = motherName != null ?
                new ObjectParameter("MotherName", motherName) :
                new ObjectParameter("MotherName", typeof(string));
    
            var motherCellParameter = motherCell != null ?
                new ObjectParameter("MotherCell", motherCell) :
                new ObjectParameter("MotherCell", typeof(string));
    
            var fatherCellParameter = fatherCell != null ?
                new ObjectParameter("FatherCell", fatherCell) :
                new ObjectParameter("FatherCell", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var treatmentParameter = treatment.HasValue ?
                new ObjectParameter("Treatment", treatment) :
                new ObjectParameter("Treatment", typeof(int));
    
            var subTreatmentParameter = subTreatment.HasValue ?
                new ObjectParameter("SubTreatment", subTreatment) :
                new ObjectParameter("SubTreatment", typeof(int));
    
            var medicineAutoIdParameter = medicineAutoId != null ?
                new ObjectParameter("MedicineAutoId", medicineAutoId) :
                new ObjectParameter("MedicineAutoId", typeof(string));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(int));
    
            var surgeryParameter = surgery.HasValue ?
                new ObjectParameter("Surgery", surgery) :
                new ObjectParameter("Surgery", typeof(int));
    
            var surgeryDetailParameter = surgeryDetail.HasValue ?
                new ObjectParameter("SurgeryDetail", surgeryDetail) :
                new ObjectParameter("SurgeryDetail", typeof(int));
    
            var surgeryDetailRemarksParameter = surgeryDetailRemarks != null ?
                new ObjectParameter("SurgeryDetailRemarks", surgeryDetailRemarks) :
                new ObjectParameter("SurgeryDetailRemarks", typeof(string));
    
            var referalParameter = referal.HasValue ?
                new ObjectParameter("Referal", referal) :
                new ObjectParameter("Referal", typeof(int));
    
            var parentAgreeParameter = parentAgree.HasValue ?
                new ObjectParameter("ParentAgree", parentAgree) :
                new ObjectParameter("ParentAgree", typeof(int));
    
            var parentNotAgreeReasonParameter = parentNotAgreeReason.HasValue ?
                new ObjectParameter("ParentNotAgreeReason", parentNotAgreeReason) :
                new ObjectParameter("ParentNotAgreeReason", typeof(int));
    
            var parentNotAgreeRemarksParameter = parentNotAgreeRemarks != null ?
                new ObjectParameter("ParentNotAgreeRemarks", parentNotAgreeRemarks) :
                new ObjectParameter("ParentNotAgreeRemarks", typeof(string));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblTreatmentTeacher_InsertUpdate_Result>("sp_tblTreatmentTeacher_InsertUpdate", treatmentTeacherIdParameter, treatmentTeacherTransDateParameter, teacherAutoIdParameter, normal_RightEyeParameter, refractiveError_RightEyeParameter, lowVision_RightEyeParameter, needsCycloplegicRefraction_RightEyeParameter, squintStrabismus_RightEyeParameter, lazyEyeAmblyopia_RightEyeParameter, colorblindnessAchromatopsia_RightEyeParameter, cataract_RightEyeParameter, traumaticCataract_RightEyeParameter, keratoconus_RightEyeParameter, anisometropia_RightEyeParameter, ptosis_RightEyeParameter, nystagmus_RightEyeParameter, corneadefects_RightEyeParameter, puplidefects_RightEyeParameter, pterygium_RightEyeParameter, other_RightEyeParameter, daignosisRemarksParameter, normal_LeftEyeParameter, refractiveError_LeftEyeParameter, lowVision_LeftEyeParameter, needsCycloplegicRefraction_LeftEyeParameter, squintStrabismus_LeftEyeParameter, lazyEyeAmblyopia_LeftEyeParameter, colorblindnessAchromatopsia_LeftEyeParameter, cataract_LeftEyeParameter, traumaticCataract_LeftEyeParameter, keratoconus_LeftEyeParameter, anisometropia_LeftEyeParameter, ptosis_LeftEyeParameter, nystagmus_LeftEyeParameter, corneadefects_LeftEyeParameter, puplidefects_LeftEyeParameter, pterygium_LeftEyeParameter, other_LeftEyeParameter, daignosisRemarks_LeftEyeParameter, subDaignosisParameter, subDaignosis_LeftEyeParameter, motherNameParameter, motherCellParameter, fatherCellParameter, address1Parameter, address2Parameter, districtParameter, townParameter, cityParameter, treatmentParameter, subTreatmentParameter, medicineAutoIdParameter, nextVisitParameter, surgeryParameter, surgeryDetailParameter, surgeryDetailRemarksParameter, referalParameter, parentAgreeParameter, parentNotAgreeReasonParameter, parentNotAgreeRemarksParameter, hospitalAutoIdParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitSixMonthStudent_GetDetail_Result> sp_tblVisitSixMonthStudent_GetDetail(Nullable<int> visitSixMonthStudentId)
        {
            var visitSixMonthStudentIdParameter = visitSixMonthStudentId.HasValue ?
                new ObjectParameter("VisitSixMonthStudentId", visitSixMonthStudentId) :
                new ObjectParameter("VisitSixMonthStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitSixMonthStudent_GetDetail_Result>("sp_tblVisitSixMonthStudent_GetDetail", visitSixMonthStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitSixMonthStudent_InsertUpdate_Result> sp_tblVisitSixMonthStudent_InsertUpdate(Nullable<int> visitSixMonthStudentId, Nullable<System.DateTime> visitSixMonthStudentTransDate, Nullable<int> studentAutoId, Nullable<int> distanceVision_RightEye_Unaided, Nullable<int> distanceVision_RightEye_WithGlasses, Nullable<int> distanceVision_RightEye_PinHole, Nullable<int> nearVision_RightEye, Nullable<int> distanceVision_LeftEye_Unaided, Nullable<int> distanceVision_LeftEye_WithGlasses, Nullable<int> distanceVision_LeftEye_PinHole, Nullable<int> nearVision_LeftEye, string right_Spherical_Status_AutoRef, Nullable<decimal> right_Spherical_Points_AutoRef, string right_Cyclinderical_Status_AutoRef, Nullable<decimal> right_Cyclinderical_Points_AutoRef, Nullable<int> right_Axix_From_AutoRef, Nullable<int> right_Axix_To_AutoRef, string left_Spherical_Status_AutoRef, Nullable<decimal> left_Spherical_Points_AutoRef, string left_Cyclinderical_Status_AutoRef, Nullable<decimal> left_Cyclinderical_Points_AutoRef, Nullable<int> left_Axix_From_AutoRef, Nullable<int> left_Axix_To_AutoRef, Nullable<int> retinoScopy_RightEye, string cycloplegicRefraction_RightEye, string condition_RightEye, string meridian1_RightEye, string meridian2_RightEye, string finalPrescription_RightEye, Nullable<int> retinoScopy_LeftEye, string cycloplegicRefraction_LeftEye, string condition_LeftEye, string meridian1_LeftEye, string meridian2_LeftEye, string finalPrescription_LeftEye, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> normal_RightEye, Nullable<int> refractiveError_RightEye, Nullable<int> lowVision_RightEye, Nullable<int> needsCycloplegicRefraction_RightEye, Nullable<int> squintStrabismus_RightEye, Nullable<int> lazyEyeAmblyopia_RightEye, Nullable<int> colorblindnessAchromatopsia_RightEye, Nullable<int> cataract_RightEye, Nullable<int> traumaticCataract_RightEye, Nullable<int> keratoconus_RightEye, Nullable<int> anisometropia_RightEye, Nullable<int> ptosis_RightEye, Nullable<int> nystagmus_RightEye, Nullable<int> corneadefects_RightEye, Nullable<int> puplidefects_RightEye, Nullable<int> pterygium_RightEye, Nullable<int> other_RightEye, string daignosisRemarks, Nullable<int> normal_LeftEye, Nullable<int> refractiveError_LeftEye, Nullable<int> lowVision_LeftEye, Nullable<int> needsCycloplegicRefraction_LeftEye, Nullable<int> squintStrabismus_LeftEye, Nullable<int> lazyEyeAmblyopia_LeftEye, Nullable<int> colorblindnessAchromatopsia_LeftEye, Nullable<int> cataract_LeftEye, Nullable<int> traumaticCataract_LeftEye, Nullable<int> keratoconus_LeftEye, Nullable<int> anisometropia_LeftEye, Nullable<int> ptosis_LeftEye, Nullable<int> nystagmus_LeftEye, Nullable<int> corneadefects_LeftEye, Nullable<int> puplidefects_LeftEye, Nullable<int> pterygium_LeftEye, Nullable<int> other_LeftEye, string daignosisRemarks_LeftEye, string subDaignosis, string subDaignosis_LeftEye, Nullable<int> treatment, Nullable<int> subTreatment, string medicineAutoId, Nullable<int> nextVisit, Nullable<System.DateTime> nextVisitDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitSixMonthStudentIdParameter = visitSixMonthStudentId.HasValue ?
                new ObjectParameter("VisitSixMonthStudentId", visitSixMonthStudentId) :
                new ObjectParameter("VisitSixMonthStudentId", typeof(int));
    
            var visitSixMonthStudentTransDateParameter = visitSixMonthStudentTransDate.HasValue ?
                new ObjectParameter("VisitSixMonthStudentTransDate", visitSixMonthStudentTransDate) :
                new ObjectParameter("VisitSixMonthStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var distanceVision_RightEye_UnaidedParameter = distanceVision_RightEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_Unaided", distanceVision_RightEye_Unaided) :
                new ObjectParameter("DistanceVision_RightEye_Unaided", typeof(int));
    
            var distanceVision_RightEye_WithGlassesParameter = distanceVision_RightEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", distanceVision_RightEye_WithGlasses) :
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", typeof(int));
    
            var distanceVision_RightEye_PinHoleParameter = distanceVision_RightEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_PinHole", distanceVision_RightEye_PinHole) :
                new ObjectParameter("DistanceVision_RightEye_PinHole", typeof(int));
    
            var nearVision_RightEyeParameter = nearVision_RightEye.HasValue ?
                new ObjectParameter("NearVision_RightEye", nearVision_RightEye) :
                new ObjectParameter("NearVision_RightEye", typeof(int));
    
            var distanceVision_LeftEye_UnaidedParameter = distanceVision_LeftEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_Unaided", distanceVision_LeftEye_Unaided) :
                new ObjectParameter("DistanceVision_LeftEye_Unaided", typeof(int));
    
            var distanceVision_LeftEye_WithGlassesParameter = distanceVision_LeftEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", distanceVision_LeftEye_WithGlasses) :
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", typeof(int));
    
            var distanceVision_LeftEye_PinHoleParameter = distanceVision_LeftEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_PinHole", distanceVision_LeftEye_PinHole) :
                new ObjectParameter("DistanceVision_LeftEye_PinHole", typeof(int));
    
            var nearVision_LeftEyeParameter = nearVision_LeftEye.HasValue ?
                new ObjectParameter("NearVision_LeftEye", nearVision_LeftEye) :
                new ObjectParameter("NearVision_LeftEye", typeof(int));
    
            var right_Spherical_Status_AutoRefParameter = right_Spherical_Status_AutoRef != null ?
                new ObjectParameter("Right_Spherical_Status_AutoRef", right_Spherical_Status_AutoRef) :
                new ObjectParameter("Right_Spherical_Status_AutoRef", typeof(string));
    
            var right_Spherical_Points_AutoRefParameter = right_Spherical_Points_AutoRef.HasValue ?
                new ObjectParameter("Right_Spherical_Points_AutoRef", right_Spherical_Points_AutoRef) :
                new ObjectParameter("Right_Spherical_Points_AutoRef", typeof(decimal));
    
            var right_Cyclinderical_Status_AutoRefParameter = right_Cyclinderical_Status_AutoRef != null ?
                new ObjectParameter("Right_Cyclinderical_Status_AutoRef", right_Cyclinderical_Status_AutoRef) :
                new ObjectParameter("Right_Cyclinderical_Status_AutoRef", typeof(string));
    
            var right_Cyclinderical_Points_AutoRefParameter = right_Cyclinderical_Points_AutoRef.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points_AutoRef", right_Cyclinderical_Points_AutoRef) :
                new ObjectParameter("Right_Cyclinderical_Points_AutoRef", typeof(decimal));
    
            var right_Axix_From_AutoRefParameter = right_Axix_From_AutoRef.HasValue ?
                new ObjectParameter("Right_Axix_From_AutoRef", right_Axix_From_AutoRef) :
                new ObjectParameter("Right_Axix_From_AutoRef", typeof(int));
    
            var right_Axix_To_AutoRefParameter = right_Axix_To_AutoRef.HasValue ?
                new ObjectParameter("Right_Axix_To_AutoRef", right_Axix_To_AutoRef) :
                new ObjectParameter("Right_Axix_To_AutoRef", typeof(int));
    
            var left_Spherical_Status_AutoRefParameter = left_Spherical_Status_AutoRef != null ?
                new ObjectParameter("Left_Spherical_Status_AutoRef", left_Spherical_Status_AutoRef) :
                new ObjectParameter("Left_Spherical_Status_AutoRef", typeof(string));
    
            var left_Spherical_Points_AutoRefParameter = left_Spherical_Points_AutoRef.HasValue ?
                new ObjectParameter("Left_Spherical_Points_AutoRef", left_Spherical_Points_AutoRef) :
                new ObjectParameter("Left_Spherical_Points_AutoRef", typeof(decimal));
    
            var left_Cyclinderical_Status_AutoRefParameter = left_Cyclinderical_Status_AutoRef != null ?
                new ObjectParameter("Left_Cyclinderical_Status_AutoRef", left_Cyclinderical_Status_AutoRef) :
                new ObjectParameter("Left_Cyclinderical_Status_AutoRef", typeof(string));
    
            var left_Cyclinderical_Points_AutoRefParameter = left_Cyclinderical_Points_AutoRef.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points_AutoRef", left_Cyclinderical_Points_AutoRef) :
                new ObjectParameter("Left_Cyclinderical_Points_AutoRef", typeof(decimal));
    
            var left_Axix_From_AutoRefParameter = left_Axix_From_AutoRef.HasValue ?
                new ObjectParameter("Left_Axix_From_AutoRef", left_Axix_From_AutoRef) :
                new ObjectParameter("Left_Axix_From_AutoRef", typeof(int));
    
            var left_Axix_To_AutoRefParameter = left_Axix_To_AutoRef.HasValue ?
                new ObjectParameter("Left_Axix_To_AutoRef", left_Axix_To_AutoRef) :
                new ObjectParameter("Left_Axix_To_AutoRef", typeof(int));
    
            var retinoScopy_RightEyeParameter = retinoScopy_RightEye.HasValue ?
                new ObjectParameter("RetinoScopy_RightEye", retinoScopy_RightEye) :
                new ObjectParameter("RetinoScopy_RightEye", typeof(int));
    
            var cycloplegicRefraction_RightEyeParameter = cycloplegicRefraction_RightEye != null ?
                new ObjectParameter("CycloplegicRefraction_RightEye", cycloplegicRefraction_RightEye) :
                new ObjectParameter("CycloplegicRefraction_RightEye", typeof(string));
    
            var condition_RightEyeParameter = condition_RightEye != null ?
                new ObjectParameter("Condition_RightEye", condition_RightEye) :
                new ObjectParameter("Condition_RightEye", typeof(string));
    
            var meridian1_RightEyeParameter = meridian1_RightEye != null ?
                new ObjectParameter("Meridian1_RightEye", meridian1_RightEye) :
                new ObjectParameter("Meridian1_RightEye", typeof(string));
    
            var meridian2_RightEyeParameter = meridian2_RightEye != null ?
                new ObjectParameter("Meridian2_RightEye", meridian2_RightEye) :
                new ObjectParameter("Meridian2_RightEye", typeof(string));
    
            var finalPrescription_RightEyeParameter = finalPrescription_RightEye != null ?
                new ObjectParameter("FinalPrescription_RightEye", finalPrescription_RightEye) :
                new ObjectParameter("FinalPrescription_RightEye", typeof(string));
    
            var retinoScopy_LeftEyeParameter = retinoScopy_LeftEye.HasValue ?
                new ObjectParameter("RetinoScopy_LeftEye", retinoScopy_LeftEye) :
                new ObjectParameter("RetinoScopy_LeftEye", typeof(int));
    
            var cycloplegicRefraction_LeftEyeParameter = cycloplegicRefraction_LeftEye != null ?
                new ObjectParameter("CycloplegicRefraction_LeftEye", cycloplegicRefraction_LeftEye) :
                new ObjectParameter("CycloplegicRefraction_LeftEye", typeof(string));
    
            var condition_LeftEyeParameter = condition_LeftEye != null ?
                new ObjectParameter("Condition_LeftEye", condition_LeftEye) :
                new ObjectParameter("Condition_LeftEye", typeof(string));
    
            var meridian1_LeftEyeParameter = meridian1_LeftEye != null ?
                new ObjectParameter("Meridian1_LeftEye", meridian1_LeftEye) :
                new ObjectParameter("Meridian1_LeftEye", typeof(string));
    
            var meridian2_LeftEyeParameter = meridian2_LeftEye != null ?
                new ObjectParameter("Meridian2_LeftEye", meridian2_LeftEye) :
                new ObjectParameter("Meridian2_LeftEye", typeof(string));
    
            var finalPrescription_LeftEyeParameter = finalPrescription_LeftEye != null ?
                new ObjectParameter("FinalPrescription_LeftEye", finalPrescription_LeftEye) :
                new ObjectParameter("FinalPrescription_LeftEye", typeof(string));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var normal_RightEyeParameter = normal_RightEye.HasValue ?
                new ObjectParameter("Normal_RightEye", normal_RightEye) :
                new ObjectParameter("Normal_RightEye", typeof(int));
    
            var refractiveError_RightEyeParameter = refractiveError_RightEye.HasValue ?
                new ObjectParameter("RefractiveError_RightEye", refractiveError_RightEye) :
                new ObjectParameter("RefractiveError_RightEye", typeof(int));
    
            var lowVision_RightEyeParameter = lowVision_RightEye.HasValue ?
                new ObjectParameter("LowVision_RightEye", lowVision_RightEye) :
                new ObjectParameter("LowVision_RightEye", typeof(int));
    
            var needsCycloplegicRefraction_RightEyeParameter = needsCycloplegicRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", needsCycloplegicRefraction_RightEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", typeof(int));
    
            var squintStrabismus_RightEyeParameter = squintStrabismus_RightEye.HasValue ?
                new ObjectParameter("SquintStrabismus_RightEye", squintStrabismus_RightEye) :
                new ObjectParameter("SquintStrabismus_RightEye", typeof(int));
    
            var lazyEyeAmblyopia_RightEyeParameter = lazyEyeAmblyopia_RightEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_RightEye", lazyEyeAmblyopia_RightEye) :
                new ObjectParameter("LazyEyeAmblyopia_RightEye", typeof(int));
    
            var colorblindnessAchromatopsia_RightEyeParameter = colorblindnessAchromatopsia_RightEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", colorblindnessAchromatopsia_RightEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", typeof(int));
    
            var cataract_RightEyeParameter = cataract_RightEye.HasValue ?
                new ObjectParameter("Cataract_RightEye", cataract_RightEye) :
                new ObjectParameter("Cataract_RightEye", typeof(int));
    
            var traumaticCataract_RightEyeParameter = traumaticCataract_RightEye.HasValue ?
                new ObjectParameter("TraumaticCataract_RightEye", traumaticCataract_RightEye) :
                new ObjectParameter("TraumaticCataract_RightEye", typeof(int));
    
            var keratoconus_RightEyeParameter = keratoconus_RightEye.HasValue ?
                new ObjectParameter("Keratoconus_RightEye", keratoconus_RightEye) :
                new ObjectParameter("Keratoconus_RightEye", typeof(int));
    
            var anisometropia_RightEyeParameter = anisometropia_RightEye.HasValue ?
                new ObjectParameter("Anisometropia_RightEye", anisometropia_RightEye) :
                new ObjectParameter("Anisometropia_RightEye", typeof(int));
    
            var ptosis_RightEyeParameter = ptosis_RightEye.HasValue ?
                new ObjectParameter("Ptosis_RightEye", ptosis_RightEye) :
                new ObjectParameter("Ptosis_RightEye", typeof(int));
    
            var nystagmus_RightEyeParameter = nystagmus_RightEye.HasValue ?
                new ObjectParameter("Nystagmus_RightEye", nystagmus_RightEye) :
                new ObjectParameter("Nystagmus_RightEye", typeof(int));
    
            var corneadefects_RightEyeParameter = corneadefects_RightEye.HasValue ?
                new ObjectParameter("Corneadefects_RightEye", corneadefects_RightEye) :
                new ObjectParameter("Corneadefects_RightEye", typeof(int));
    
            var puplidefects_RightEyeParameter = puplidefects_RightEye.HasValue ?
                new ObjectParameter("Puplidefects_RightEye", puplidefects_RightEye) :
                new ObjectParameter("Puplidefects_RightEye", typeof(int));
    
            var pterygium_RightEyeParameter = pterygium_RightEye.HasValue ?
                new ObjectParameter("Pterygium_RightEye", pterygium_RightEye) :
                new ObjectParameter("Pterygium_RightEye", typeof(int));
    
            var other_RightEyeParameter = other_RightEye.HasValue ?
                new ObjectParameter("Other_RightEye", other_RightEye) :
                new ObjectParameter("Other_RightEye", typeof(int));
    
            var daignosisRemarksParameter = daignosisRemarks != null ?
                new ObjectParameter("DaignosisRemarks", daignosisRemarks) :
                new ObjectParameter("DaignosisRemarks", typeof(string));
    
            var normal_LeftEyeParameter = normal_LeftEye.HasValue ?
                new ObjectParameter("Normal_LeftEye", normal_LeftEye) :
                new ObjectParameter("Normal_LeftEye", typeof(int));
    
            var refractiveError_LeftEyeParameter = refractiveError_LeftEye.HasValue ?
                new ObjectParameter("RefractiveError_LeftEye", refractiveError_LeftEye) :
                new ObjectParameter("RefractiveError_LeftEye", typeof(int));
    
            var lowVision_LeftEyeParameter = lowVision_LeftEye.HasValue ?
                new ObjectParameter("LowVision_LeftEye", lowVision_LeftEye) :
                new ObjectParameter("LowVision_LeftEye", typeof(int));
    
            var needsCycloplegicRefraction_LeftEyeParameter = needsCycloplegicRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", needsCycloplegicRefraction_LeftEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", typeof(int));
    
            var squintStrabismus_LeftEyeParameter = squintStrabismus_LeftEye.HasValue ?
                new ObjectParameter("SquintStrabismus_LeftEye", squintStrabismus_LeftEye) :
                new ObjectParameter("SquintStrabismus_LeftEye", typeof(int));
    
            var lazyEyeAmblyopia_LeftEyeParameter = lazyEyeAmblyopia_LeftEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", lazyEyeAmblyopia_LeftEye) :
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", typeof(int));
    
            var colorblindnessAchromatopsia_LeftEyeParameter = colorblindnessAchromatopsia_LeftEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", colorblindnessAchromatopsia_LeftEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", typeof(int));
    
            var cataract_LeftEyeParameter = cataract_LeftEye.HasValue ?
                new ObjectParameter("Cataract_LeftEye", cataract_LeftEye) :
                new ObjectParameter("Cataract_LeftEye", typeof(int));
    
            var traumaticCataract_LeftEyeParameter = traumaticCataract_LeftEye.HasValue ?
                new ObjectParameter("TraumaticCataract_LeftEye", traumaticCataract_LeftEye) :
                new ObjectParameter("TraumaticCataract_LeftEye", typeof(int));
    
            var keratoconus_LeftEyeParameter = keratoconus_LeftEye.HasValue ?
                new ObjectParameter("Keratoconus_LeftEye", keratoconus_LeftEye) :
                new ObjectParameter("Keratoconus_LeftEye", typeof(int));
    
            var anisometropia_LeftEyeParameter = anisometropia_LeftEye.HasValue ?
                new ObjectParameter("Anisometropia_LeftEye", anisometropia_LeftEye) :
                new ObjectParameter("Anisometropia_LeftEye", typeof(int));
    
            var ptosis_LeftEyeParameter = ptosis_LeftEye.HasValue ?
                new ObjectParameter("Ptosis_LeftEye", ptosis_LeftEye) :
                new ObjectParameter("Ptosis_LeftEye", typeof(int));
    
            var nystagmus_LeftEyeParameter = nystagmus_LeftEye.HasValue ?
                new ObjectParameter("Nystagmus_LeftEye", nystagmus_LeftEye) :
                new ObjectParameter("Nystagmus_LeftEye", typeof(int));
    
            var corneadefects_LeftEyeParameter = corneadefects_LeftEye.HasValue ?
                new ObjectParameter("Corneadefects_LeftEye", corneadefects_LeftEye) :
                new ObjectParameter("Corneadefects_LeftEye", typeof(int));
    
            var puplidefects_LeftEyeParameter = puplidefects_LeftEye.HasValue ?
                new ObjectParameter("Puplidefects_LeftEye", puplidefects_LeftEye) :
                new ObjectParameter("Puplidefects_LeftEye", typeof(int));
    
            var pterygium_LeftEyeParameter = pterygium_LeftEye.HasValue ?
                new ObjectParameter("Pterygium_LeftEye", pterygium_LeftEye) :
                new ObjectParameter("Pterygium_LeftEye", typeof(int));
    
            var other_LeftEyeParameter = other_LeftEye.HasValue ?
                new ObjectParameter("Other_LeftEye", other_LeftEye) :
                new ObjectParameter("Other_LeftEye", typeof(int));
    
            var daignosisRemarks_LeftEyeParameter = daignosisRemarks_LeftEye != null ?
                new ObjectParameter("DaignosisRemarks_LeftEye", daignosisRemarks_LeftEye) :
                new ObjectParameter("DaignosisRemarks_LeftEye", typeof(string));
    
            var subDaignosisParameter = subDaignosis != null ?
                new ObjectParameter("SubDaignosis", subDaignosis) :
                new ObjectParameter("SubDaignosis", typeof(string));
    
            var subDaignosis_LeftEyeParameter = subDaignosis_LeftEye != null ?
                new ObjectParameter("SubDaignosis_LeftEye", subDaignosis_LeftEye) :
                new ObjectParameter("SubDaignosis_LeftEye", typeof(string));
    
            var treatmentParameter = treatment.HasValue ?
                new ObjectParameter("Treatment", treatment) :
                new ObjectParameter("Treatment", typeof(int));
    
            var subTreatmentParameter = subTreatment.HasValue ?
                new ObjectParameter("SubTreatment", subTreatment) :
                new ObjectParameter("SubTreatment", typeof(int));
    
            var medicineAutoIdParameter = medicineAutoId != null ?
                new ObjectParameter("MedicineAutoId", medicineAutoId) :
                new ObjectParameter("MedicineAutoId", typeof(string));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(int));
    
            var nextVisitDateParameter = nextVisitDate.HasValue ?
                new ObjectParameter("NextVisitDate", nextVisitDate) :
                new ObjectParameter("NextVisitDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitSixMonthStudent_InsertUpdate_Result>("sp_tblVisitSixMonthStudent_InsertUpdate", visitSixMonthStudentIdParameter, visitSixMonthStudentTransDateParameter, studentAutoIdParameter, distanceVision_RightEye_UnaidedParameter, distanceVision_RightEye_WithGlassesParameter, distanceVision_RightEye_PinHoleParameter, nearVision_RightEyeParameter, distanceVision_LeftEye_UnaidedParameter, distanceVision_LeftEye_WithGlassesParameter, distanceVision_LeftEye_PinHoleParameter, nearVision_LeftEyeParameter, right_Spherical_Status_AutoRefParameter, right_Spherical_Points_AutoRefParameter, right_Cyclinderical_Status_AutoRefParameter, right_Cyclinderical_Points_AutoRefParameter, right_Axix_From_AutoRefParameter, right_Axix_To_AutoRefParameter, left_Spherical_Status_AutoRefParameter, left_Spherical_Points_AutoRefParameter, left_Cyclinderical_Status_AutoRefParameter, left_Cyclinderical_Points_AutoRefParameter, left_Axix_From_AutoRefParameter, left_Axix_To_AutoRefParameter, retinoScopy_RightEyeParameter, cycloplegicRefraction_RightEyeParameter, condition_RightEyeParameter, meridian1_RightEyeParameter, meridian2_RightEyeParameter, finalPrescription_RightEyeParameter, retinoScopy_LeftEyeParameter, cycloplegicRefraction_LeftEyeParameter, condition_LeftEyeParameter, meridian1_LeftEyeParameter, meridian2_LeftEyeParameter, finalPrescription_LeftEyeParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, normal_RightEyeParameter, refractiveError_RightEyeParameter, lowVision_RightEyeParameter, needsCycloplegicRefraction_RightEyeParameter, squintStrabismus_RightEyeParameter, lazyEyeAmblyopia_RightEyeParameter, colorblindnessAchromatopsia_RightEyeParameter, cataract_RightEyeParameter, traumaticCataract_RightEyeParameter, keratoconus_RightEyeParameter, anisometropia_RightEyeParameter, ptosis_RightEyeParameter, nystagmus_RightEyeParameter, corneadefects_RightEyeParameter, puplidefects_RightEyeParameter, pterygium_RightEyeParameter, other_RightEyeParameter, daignosisRemarksParameter, normal_LeftEyeParameter, refractiveError_LeftEyeParameter, lowVision_LeftEyeParameter, needsCycloplegicRefraction_LeftEyeParameter, squintStrabismus_LeftEyeParameter, lazyEyeAmblyopia_LeftEyeParameter, colorblindnessAchromatopsia_LeftEyeParameter, cataract_LeftEyeParameter, traumaticCataract_LeftEyeParameter, keratoconus_LeftEyeParameter, anisometropia_LeftEyeParameter, ptosis_LeftEyeParameter, nystagmus_LeftEyeParameter, corneadefects_LeftEyeParameter, puplidefects_LeftEyeParameter, pterygium_LeftEyeParameter, other_LeftEyeParameter, daignosisRemarks_LeftEyeParameter, subDaignosisParameter, subDaignosis_LeftEyeParameter, treatmentParameter, subTreatmentParameter, medicineAutoIdParameter, nextVisitParameter, nextVisitDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblCycloRefractionStudent_GetDetail_Result> sp_tblCycloRefractionStudent_GetDetail(Nullable<int> cycloRefractionStudentId)
        {
            var cycloRefractionStudentIdParameter = cycloRefractionStudentId.HasValue ?
                new ObjectParameter("CycloRefractionStudentId", cycloRefractionStudentId) :
                new ObjectParameter("CycloRefractionStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblCycloRefractionStudent_GetDetail_Result>("sp_tblCycloRefractionStudent_GetDetail", cycloRefractionStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblCycloRefractionStudent_InsertUpdate_Result> sp_tblCycloRefractionStudent_InsertUpdate(Nullable<int> cycloRefractionStudentId, Nullable<System.DateTime> cycloRefractionStudentTransDate, Nullable<int> studentAutoId, string right_Spherical_Status_AutoRef, Nullable<decimal> right_Spherical_Points_AutoRef, string right_Cyclinderical_Status_AutoRef, Nullable<decimal> right_Cyclinderical_Points_AutoRef, Nullable<int> right_Axix_From_AutoRef, Nullable<int> right_Axix_To_AutoRef, string left_Spherical_Status_AutoRef, Nullable<decimal> left_Spherical_Points_AutoRef, string left_Cyclinderical_Status_AutoRef, Nullable<decimal> left_Cyclinderical_Points_AutoRef, Nullable<int> left_Axix_From_AutoRef, Nullable<int> left_Axix_To_AutoRef, Nullable<int> retinoScopy_RightEye, string cycloplegicRefraction_RightEye, string condition_RightEye, string meridian1_RightEye, string meridian2_RightEye, string finalPrescription_RightEye, Nullable<int> retinoScopy_LeftEye, string cycloplegicRefraction_LeftEye, string condition_LeftEye, string meridian1_LeftEye, string meridian2_LeftEye, string finalPrescription_LeftEye, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> normal_RightEye, Nullable<int> refractiveError_RightEye, Nullable<int> lowVision_RightEye, Nullable<int> needsCycloplegicRefraction_RightEye, Nullable<int> squintStrabismus_RightEye, Nullable<int> lazyEyeAmblyopia_RightEye, Nullable<int> colorblindnessAchromatopsia_RightEye, Nullable<int> cataract_RightEye, Nullable<int> traumaticCataract_RightEye, Nullable<int> keratoconus_RightEye, Nullable<int> anisometropia_RightEye, Nullable<int> ptosis_RightEye, Nullable<int> nystagmus_RightEye, Nullable<int> corneadefects_RightEye, Nullable<int> puplidefects_RightEye, Nullable<int> pterygium_RightEye, Nullable<int> other_RightEye, string daignosisRemarks, Nullable<int> normal_LeftEye, Nullable<int> refractiveError_LeftEye, Nullable<int> lowVision_LeftEye, Nullable<int> needsCycloplegicRefraction_LeftEye, Nullable<int> squintStrabismus_LeftEye, Nullable<int> lazyEyeAmblyopia_LeftEye, Nullable<int> colorblindnessAchromatopsia_LeftEye, Nullable<int> cataract_LeftEye, Nullable<int> traumaticCataract_LeftEye, Nullable<int> keratoconus_LeftEye, Nullable<int> anisometropia_LeftEye, Nullable<int> ptosis_LeftEye, Nullable<int> nystagmus_LeftEye, Nullable<int> corneadefects_LeftEye, Nullable<int> puplidefects_LeftEye, Nullable<int> pterygium_LeftEye, Nullable<int> other_LeftEye, string daignosisRemarks_LeftEye, string subDaignosis, string subDaignosis_LeftEye, Nullable<int> treatment, Nullable<int> subTreatment, string medicineAutoId, Nullable<int> nextVisit, string motherName, string motherCell, string fatherCell, string address1, string address2, string district, string town, string city, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var cycloRefractionStudentIdParameter = cycloRefractionStudentId.HasValue ?
                new ObjectParameter("CycloRefractionStudentId", cycloRefractionStudentId) :
                new ObjectParameter("CycloRefractionStudentId", typeof(int));
    
            var cycloRefractionStudentTransDateParameter = cycloRefractionStudentTransDate.HasValue ?
                new ObjectParameter("CycloRefractionStudentTransDate", cycloRefractionStudentTransDate) :
                new ObjectParameter("CycloRefractionStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var right_Spherical_Status_AutoRefParameter = right_Spherical_Status_AutoRef != null ?
                new ObjectParameter("Right_Spherical_Status_AutoRef", right_Spherical_Status_AutoRef) :
                new ObjectParameter("Right_Spherical_Status_AutoRef", typeof(string));
    
            var right_Spherical_Points_AutoRefParameter = right_Spherical_Points_AutoRef.HasValue ?
                new ObjectParameter("Right_Spherical_Points_AutoRef", right_Spherical_Points_AutoRef) :
                new ObjectParameter("Right_Spherical_Points_AutoRef", typeof(decimal));
    
            var right_Cyclinderical_Status_AutoRefParameter = right_Cyclinderical_Status_AutoRef != null ?
                new ObjectParameter("Right_Cyclinderical_Status_AutoRef", right_Cyclinderical_Status_AutoRef) :
                new ObjectParameter("Right_Cyclinderical_Status_AutoRef", typeof(string));
    
            var right_Cyclinderical_Points_AutoRefParameter = right_Cyclinderical_Points_AutoRef.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points_AutoRef", right_Cyclinderical_Points_AutoRef) :
                new ObjectParameter("Right_Cyclinderical_Points_AutoRef", typeof(decimal));
    
            var right_Axix_From_AutoRefParameter = right_Axix_From_AutoRef.HasValue ?
                new ObjectParameter("Right_Axix_From_AutoRef", right_Axix_From_AutoRef) :
                new ObjectParameter("Right_Axix_From_AutoRef", typeof(int));
    
            var right_Axix_To_AutoRefParameter = right_Axix_To_AutoRef.HasValue ?
                new ObjectParameter("Right_Axix_To_AutoRef", right_Axix_To_AutoRef) :
                new ObjectParameter("Right_Axix_To_AutoRef", typeof(int));
    
            var left_Spherical_Status_AutoRefParameter = left_Spherical_Status_AutoRef != null ?
                new ObjectParameter("Left_Spherical_Status_AutoRef", left_Spherical_Status_AutoRef) :
                new ObjectParameter("Left_Spherical_Status_AutoRef", typeof(string));
    
            var left_Spherical_Points_AutoRefParameter = left_Spherical_Points_AutoRef.HasValue ?
                new ObjectParameter("Left_Spherical_Points_AutoRef", left_Spherical_Points_AutoRef) :
                new ObjectParameter("Left_Spherical_Points_AutoRef", typeof(decimal));
    
            var left_Cyclinderical_Status_AutoRefParameter = left_Cyclinderical_Status_AutoRef != null ?
                new ObjectParameter("Left_Cyclinderical_Status_AutoRef", left_Cyclinderical_Status_AutoRef) :
                new ObjectParameter("Left_Cyclinderical_Status_AutoRef", typeof(string));
    
            var left_Cyclinderical_Points_AutoRefParameter = left_Cyclinderical_Points_AutoRef.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points_AutoRef", left_Cyclinderical_Points_AutoRef) :
                new ObjectParameter("Left_Cyclinderical_Points_AutoRef", typeof(decimal));
    
            var left_Axix_From_AutoRefParameter = left_Axix_From_AutoRef.HasValue ?
                new ObjectParameter("Left_Axix_From_AutoRef", left_Axix_From_AutoRef) :
                new ObjectParameter("Left_Axix_From_AutoRef", typeof(int));
    
            var left_Axix_To_AutoRefParameter = left_Axix_To_AutoRef.HasValue ?
                new ObjectParameter("Left_Axix_To_AutoRef", left_Axix_To_AutoRef) :
                new ObjectParameter("Left_Axix_To_AutoRef", typeof(int));
    
            var retinoScopy_RightEyeParameter = retinoScopy_RightEye.HasValue ?
                new ObjectParameter("RetinoScopy_RightEye", retinoScopy_RightEye) :
                new ObjectParameter("RetinoScopy_RightEye", typeof(int));
    
            var cycloplegicRefraction_RightEyeParameter = cycloplegicRefraction_RightEye != null ?
                new ObjectParameter("CycloplegicRefraction_RightEye", cycloplegicRefraction_RightEye) :
                new ObjectParameter("CycloplegicRefraction_RightEye", typeof(string));
    
            var condition_RightEyeParameter = condition_RightEye != null ?
                new ObjectParameter("Condition_RightEye", condition_RightEye) :
                new ObjectParameter("Condition_RightEye", typeof(string));
    
            var meridian1_RightEyeParameter = meridian1_RightEye != null ?
                new ObjectParameter("Meridian1_RightEye", meridian1_RightEye) :
                new ObjectParameter("Meridian1_RightEye", typeof(string));
    
            var meridian2_RightEyeParameter = meridian2_RightEye != null ?
                new ObjectParameter("Meridian2_RightEye", meridian2_RightEye) :
                new ObjectParameter("Meridian2_RightEye", typeof(string));
    
            var finalPrescription_RightEyeParameter = finalPrescription_RightEye != null ?
                new ObjectParameter("FinalPrescription_RightEye", finalPrescription_RightEye) :
                new ObjectParameter("FinalPrescription_RightEye", typeof(string));
    
            var retinoScopy_LeftEyeParameter = retinoScopy_LeftEye.HasValue ?
                new ObjectParameter("RetinoScopy_LeftEye", retinoScopy_LeftEye) :
                new ObjectParameter("RetinoScopy_LeftEye", typeof(int));
    
            var cycloplegicRefraction_LeftEyeParameter = cycloplegicRefraction_LeftEye != null ?
                new ObjectParameter("CycloplegicRefraction_LeftEye", cycloplegicRefraction_LeftEye) :
                new ObjectParameter("CycloplegicRefraction_LeftEye", typeof(string));
    
            var condition_LeftEyeParameter = condition_LeftEye != null ?
                new ObjectParameter("Condition_LeftEye", condition_LeftEye) :
                new ObjectParameter("Condition_LeftEye", typeof(string));
    
            var meridian1_LeftEyeParameter = meridian1_LeftEye != null ?
                new ObjectParameter("Meridian1_LeftEye", meridian1_LeftEye) :
                new ObjectParameter("Meridian1_LeftEye", typeof(string));
    
            var meridian2_LeftEyeParameter = meridian2_LeftEye != null ?
                new ObjectParameter("Meridian2_LeftEye", meridian2_LeftEye) :
                new ObjectParameter("Meridian2_LeftEye", typeof(string));
    
            var finalPrescription_LeftEyeParameter = finalPrescription_LeftEye != null ?
                new ObjectParameter("FinalPrescription_LeftEye", finalPrescription_LeftEye) :
                new ObjectParameter("FinalPrescription_LeftEye", typeof(string));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var normal_RightEyeParameter = normal_RightEye.HasValue ?
                new ObjectParameter("Normal_RightEye", normal_RightEye) :
                new ObjectParameter("Normal_RightEye", typeof(int));
    
            var refractiveError_RightEyeParameter = refractiveError_RightEye.HasValue ?
                new ObjectParameter("RefractiveError_RightEye", refractiveError_RightEye) :
                new ObjectParameter("RefractiveError_RightEye", typeof(int));
    
            var lowVision_RightEyeParameter = lowVision_RightEye.HasValue ?
                new ObjectParameter("LowVision_RightEye", lowVision_RightEye) :
                new ObjectParameter("LowVision_RightEye", typeof(int));
    
            var needsCycloplegicRefraction_RightEyeParameter = needsCycloplegicRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", needsCycloplegicRefraction_RightEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", typeof(int));
    
            var squintStrabismus_RightEyeParameter = squintStrabismus_RightEye.HasValue ?
                new ObjectParameter("SquintStrabismus_RightEye", squintStrabismus_RightEye) :
                new ObjectParameter("SquintStrabismus_RightEye", typeof(int));
    
            var lazyEyeAmblyopia_RightEyeParameter = lazyEyeAmblyopia_RightEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_RightEye", lazyEyeAmblyopia_RightEye) :
                new ObjectParameter("LazyEyeAmblyopia_RightEye", typeof(int));
    
            var colorblindnessAchromatopsia_RightEyeParameter = colorblindnessAchromatopsia_RightEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", colorblindnessAchromatopsia_RightEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", typeof(int));
    
            var cataract_RightEyeParameter = cataract_RightEye.HasValue ?
                new ObjectParameter("Cataract_RightEye", cataract_RightEye) :
                new ObjectParameter("Cataract_RightEye", typeof(int));
    
            var traumaticCataract_RightEyeParameter = traumaticCataract_RightEye.HasValue ?
                new ObjectParameter("TraumaticCataract_RightEye", traumaticCataract_RightEye) :
                new ObjectParameter("TraumaticCataract_RightEye", typeof(int));
    
            var keratoconus_RightEyeParameter = keratoconus_RightEye.HasValue ?
                new ObjectParameter("Keratoconus_RightEye", keratoconus_RightEye) :
                new ObjectParameter("Keratoconus_RightEye", typeof(int));
    
            var anisometropia_RightEyeParameter = anisometropia_RightEye.HasValue ?
                new ObjectParameter("Anisometropia_RightEye", anisometropia_RightEye) :
                new ObjectParameter("Anisometropia_RightEye", typeof(int));
    
            var ptosis_RightEyeParameter = ptosis_RightEye.HasValue ?
                new ObjectParameter("Ptosis_RightEye", ptosis_RightEye) :
                new ObjectParameter("Ptosis_RightEye", typeof(int));
    
            var nystagmus_RightEyeParameter = nystagmus_RightEye.HasValue ?
                new ObjectParameter("Nystagmus_RightEye", nystagmus_RightEye) :
                new ObjectParameter("Nystagmus_RightEye", typeof(int));
    
            var corneadefects_RightEyeParameter = corneadefects_RightEye.HasValue ?
                new ObjectParameter("Corneadefects_RightEye", corneadefects_RightEye) :
                new ObjectParameter("Corneadefects_RightEye", typeof(int));
    
            var puplidefects_RightEyeParameter = puplidefects_RightEye.HasValue ?
                new ObjectParameter("Puplidefects_RightEye", puplidefects_RightEye) :
                new ObjectParameter("Puplidefects_RightEye", typeof(int));
    
            var pterygium_RightEyeParameter = pterygium_RightEye.HasValue ?
                new ObjectParameter("Pterygium_RightEye", pterygium_RightEye) :
                new ObjectParameter("Pterygium_RightEye", typeof(int));
    
            var other_RightEyeParameter = other_RightEye.HasValue ?
                new ObjectParameter("Other_RightEye", other_RightEye) :
                new ObjectParameter("Other_RightEye", typeof(int));
    
            var daignosisRemarksParameter = daignosisRemarks != null ?
                new ObjectParameter("DaignosisRemarks", daignosisRemarks) :
                new ObjectParameter("DaignosisRemarks", typeof(string));
    
            var normal_LeftEyeParameter = normal_LeftEye.HasValue ?
                new ObjectParameter("Normal_LeftEye", normal_LeftEye) :
                new ObjectParameter("Normal_LeftEye", typeof(int));
    
            var refractiveError_LeftEyeParameter = refractiveError_LeftEye.HasValue ?
                new ObjectParameter("RefractiveError_LeftEye", refractiveError_LeftEye) :
                new ObjectParameter("RefractiveError_LeftEye", typeof(int));
    
            var lowVision_LeftEyeParameter = lowVision_LeftEye.HasValue ?
                new ObjectParameter("LowVision_LeftEye", lowVision_LeftEye) :
                new ObjectParameter("LowVision_LeftEye", typeof(int));
    
            var needsCycloplegicRefraction_LeftEyeParameter = needsCycloplegicRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", needsCycloplegicRefraction_LeftEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", typeof(int));
    
            var squintStrabismus_LeftEyeParameter = squintStrabismus_LeftEye.HasValue ?
                new ObjectParameter("SquintStrabismus_LeftEye", squintStrabismus_LeftEye) :
                new ObjectParameter("SquintStrabismus_LeftEye", typeof(int));
    
            var lazyEyeAmblyopia_LeftEyeParameter = lazyEyeAmblyopia_LeftEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", lazyEyeAmblyopia_LeftEye) :
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", typeof(int));
    
            var colorblindnessAchromatopsia_LeftEyeParameter = colorblindnessAchromatopsia_LeftEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", colorblindnessAchromatopsia_LeftEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", typeof(int));
    
            var cataract_LeftEyeParameter = cataract_LeftEye.HasValue ?
                new ObjectParameter("Cataract_LeftEye", cataract_LeftEye) :
                new ObjectParameter("Cataract_LeftEye", typeof(int));
    
            var traumaticCataract_LeftEyeParameter = traumaticCataract_LeftEye.HasValue ?
                new ObjectParameter("TraumaticCataract_LeftEye", traumaticCataract_LeftEye) :
                new ObjectParameter("TraumaticCataract_LeftEye", typeof(int));
    
            var keratoconus_LeftEyeParameter = keratoconus_LeftEye.HasValue ?
                new ObjectParameter("Keratoconus_LeftEye", keratoconus_LeftEye) :
                new ObjectParameter("Keratoconus_LeftEye", typeof(int));
    
            var anisometropia_LeftEyeParameter = anisometropia_LeftEye.HasValue ?
                new ObjectParameter("Anisometropia_LeftEye", anisometropia_LeftEye) :
                new ObjectParameter("Anisometropia_LeftEye", typeof(int));
    
            var ptosis_LeftEyeParameter = ptosis_LeftEye.HasValue ?
                new ObjectParameter("Ptosis_LeftEye", ptosis_LeftEye) :
                new ObjectParameter("Ptosis_LeftEye", typeof(int));
    
            var nystagmus_LeftEyeParameter = nystagmus_LeftEye.HasValue ?
                new ObjectParameter("Nystagmus_LeftEye", nystagmus_LeftEye) :
                new ObjectParameter("Nystagmus_LeftEye", typeof(int));
    
            var corneadefects_LeftEyeParameter = corneadefects_LeftEye.HasValue ?
                new ObjectParameter("Corneadefects_LeftEye", corneadefects_LeftEye) :
                new ObjectParameter("Corneadefects_LeftEye", typeof(int));
    
            var puplidefects_LeftEyeParameter = puplidefects_LeftEye.HasValue ?
                new ObjectParameter("Puplidefects_LeftEye", puplidefects_LeftEye) :
                new ObjectParameter("Puplidefects_LeftEye", typeof(int));
    
            var pterygium_LeftEyeParameter = pterygium_LeftEye.HasValue ?
                new ObjectParameter("Pterygium_LeftEye", pterygium_LeftEye) :
                new ObjectParameter("Pterygium_LeftEye", typeof(int));
    
            var other_LeftEyeParameter = other_LeftEye.HasValue ?
                new ObjectParameter("Other_LeftEye", other_LeftEye) :
                new ObjectParameter("Other_LeftEye", typeof(int));
    
            var daignosisRemarks_LeftEyeParameter = daignosisRemarks_LeftEye != null ?
                new ObjectParameter("DaignosisRemarks_LeftEye", daignosisRemarks_LeftEye) :
                new ObjectParameter("DaignosisRemarks_LeftEye", typeof(string));
    
            var subDaignosisParameter = subDaignosis != null ?
                new ObjectParameter("SubDaignosis", subDaignosis) :
                new ObjectParameter("SubDaignosis", typeof(string));
    
            var subDaignosis_LeftEyeParameter = subDaignosis_LeftEye != null ?
                new ObjectParameter("SubDaignosis_LeftEye", subDaignosis_LeftEye) :
                new ObjectParameter("SubDaignosis_LeftEye", typeof(string));
    
            var treatmentParameter = treatment.HasValue ?
                new ObjectParameter("Treatment", treatment) :
                new ObjectParameter("Treatment", typeof(int));
    
            var subTreatmentParameter = subTreatment.HasValue ?
                new ObjectParameter("SubTreatment", subTreatment) :
                new ObjectParameter("SubTreatment", typeof(int));
    
            var medicineAutoIdParameter = medicineAutoId != null ?
                new ObjectParameter("MedicineAutoId", medicineAutoId) :
                new ObjectParameter("MedicineAutoId", typeof(string));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(int));
    
            var motherNameParameter = motherName != null ?
                new ObjectParameter("MotherName", motherName) :
                new ObjectParameter("MotherName", typeof(string));
    
            var motherCellParameter = motherCell != null ?
                new ObjectParameter("MotherCell", motherCell) :
                new ObjectParameter("MotherCell", typeof(string));
    
            var fatherCellParameter = fatherCell != null ?
                new ObjectParameter("FatherCell", fatherCell) :
                new ObjectParameter("FatherCell", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblCycloRefractionStudent_InsertUpdate_Result>("sp_tblCycloRefractionStudent_InsertUpdate", cycloRefractionStudentIdParameter, cycloRefractionStudentTransDateParameter, studentAutoIdParameter, right_Spherical_Status_AutoRefParameter, right_Spherical_Points_AutoRefParameter, right_Cyclinderical_Status_AutoRefParameter, right_Cyclinderical_Points_AutoRefParameter, right_Axix_From_AutoRefParameter, right_Axix_To_AutoRefParameter, left_Spherical_Status_AutoRefParameter, left_Spherical_Points_AutoRefParameter, left_Cyclinderical_Status_AutoRefParameter, left_Cyclinderical_Points_AutoRefParameter, left_Axix_From_AutoRefParameter, left_Axix_To_AutoRefParameter, retinoScopy_RightEyeParameter, cycloplegicRefraction_RightEyeParameter, condition_RightEyeParameter, meridian1_RightEyeParameter, meridian2_RightEyeParameter, finalPrescription_RightEyeParameter, retinoScopy_LeftEyeParameter, cycloplegicRefraction_LeftEyeParameter, condition_LeftEyeParameter, meridian1_LeftEyeParameter, meridian2_LeftEyeParameter, finalPrescription_LeftEyeParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, normal_RightEyeParameter, refractiveError_RightEyeParameter, lowVision_RightEyeParameter, needsCycloplegicRefraction_RightEyeParameter, squintStrabismus_RightEyeParameter, lazyEyeAmblyopia_RightEyeParameter, colorblindnessAchromatopsia_RightEyeParameter, cataract_RightEyeParameter, traumaticCataract_RightEyeParameter, keratoconus_RightEyeParameter, anisometropia_RightEyeParameter, ptosis_RightEyeParameter, nystagmus_RightEyeParameter, corneadefects_RightEyeParameter, puplidefects_RightEyeParameter, pterygium_RightEyeParameter, other_RightEyeParameter, daignosisRemarksParameter, normal_LeftEyeParameter, refractiveError_LeftEyeParameter, lowVision_LeftEyeParameter, needsCycloplegicRefraction_LeftEyeParameter, squintStrabismus_LeftEyeParameter, lazyEyeAmblyopia_LeftEyeParameter, colorblindnessAchromatopsia_LeftEyeParameter, cataract_LeftEyeParameter, traumaticCataract_LeftEyeParameter, keratoconus_LeftEyeParameter, anisometropia_LeftEyeParameter, ptosis_LeftEyeParameter, nystagmus_LeftEyeParameter, corneadefects_LeftEyeParameter, puplidefects_LeftEyeParameter, pterygium_LeftEyeParameter, other_LeftEyeParameter, daignosisRemarks_LeftEyeParameter, subDaignosisParameter, subDaignosis_LeftEyeParameter, treatmentParameter, subTreatmentParameter, medicineAutoIdParameter, nextVisitParameter, motherNameParameter, motherCellParameter, fatherCellParameter, address1Parameter, address2Parameter, districtParameter, townParameter, cityParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitFundoscopyStudent_GetDetail_Result> sp_tblVisitFundoscopyStudent_GetDetail(Nullable<int> visitFundoscopyStudentId)
        {
            var visitFundoscopyStudentIdParameter = visitFundoscopyStudentId.HasValue ?
                new ObjectParameter("VisitFundoscopyStudentId", visitFundoscopyStudentId) :
                new ObjectParameter("VisitFundoscopyStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitFundoscopyStudent_GetDetail_Result>("sp_tblVisitFundoscopyStudent_GetDetail", visitFundoscopyStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitFundoscopyStudent_InsertUpdate_Result> sp_tblVisitFundoscopyStudent_InsertUpdate(Nullable<int> visitFundoscopyStudentId, Nullable<System.DateTime> visitFundoscopyStudentTransDate, Nullable<int> studentAutoId, Nullable<int> hospitalAutoId, Nullable<int> doctorAutoId, Nullable<int> fundoscopyType, string fundoscopyfindings_RightEye, string fundoscopyfindings_LeftEye, string remarks_Fundoscopyfindings, string fundoscopyfindings_RightEye_Posterior, string fundoscopyfindings_LeftEye_Posterior, Nullable<int> normal_RightEye, Nullable<int> refractiveError_RightEye, Nullable<int> lowVision_RightEye, Nullable<int> needsCycloplegicRefraction_RightEye, Nullable<int> squintStrabismus_RightEye, Nullable<int> lazyEyeAmblyopia_RightEye, Nullable<int> colorblindnessAchromatopsia_RightEye, Nullable<int> cataract_RightEye, Nullable<int> traumaticCataract_RightEye, Nullable<int> keratoconus_RightEye, Nullable<int> anisometropia_RightEye, Nullable<int> ptosis_RightEye, Nullable<int> nystagmus_RightEye, Nullable<int> corneadefects_RightEye, Nullable<int> puplidefects_RightEye, Nullable<int> pterygium_RightEye, Nullable<int> other_RightEye, string daignosisRemarks, Nullable<int> normal_LeftEye, Nullable<int> refractiveError_LeftEye, Nullable<int> lowVision_LeftEye, Nullable<int> needsCycloplegicRefraction_LeftEye, Nullable<int> squintStrabismus_LeftEye, Nullable<int> lazyEyeAmblyopia_LeftEye, Nullable<int> colorblindnessAchromatopsia_LeftEye, Nullable<int> cataract_LeftEye, Nullable<int> traumaticCataract_LeftEye, Nullable<int> keratoconus_LeftEye, Nullable<int> anisometropia_LeftEye, Nullable<int> ptosis_LeftEye, Nullable<int> nystagmus_LeftEye, Nullable<int> corneadefects_LeftEye, Nullable<int> puplidefects_LeftEye, Nullable<int> pterygium_LeftEye, Nullable<int> other_LeftEye, string daignosisRemarks_LeftEye, Nullable<int> subDaignosis, Nullable<int> subDaignosis_LeftEye, Nullable<int> subTreatment, string diagnosis_RightEye, string diagnosis_LeftEye, string medicinePrescribed, string ophthalmologistRemarks, Nullable<int> surgerySuggested, string subDiagnosis_RightEye, string subDiagnosis_LeftEye, Nullable<int> routineCheckup, Nullable<System.DateTime> routineCheckupDate, Nullable<int> furtherAssessment, Nullable<System.DateTime> furtherAssessmentDate, Nullable<int> surgeryFollowup, Nullable<System.DateTime> surgeryDate, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitFundoscopyStudentIdParameter = visitFundoscopyStudentId.HasValue ?
                new ObjectParameter("VisitFundoscopyStudentId", visitFundoscopyStudentId) :
                new ObjectParameter("VisitFundoscopyStudentId", typeof(int));
    
            var visitFundoscopyStudentTransDateParameter = visitFundoscopyStudentTransDate.HasValue ?
                new ObjectParameter("VisitFundoscopyStudentTransDate", visitFundoscopyStudentTransDate) :
                new ObjectParameter("VisitFundoscopyStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var doctorAutoIdParameter = doctorAutoId.HasValue ?
                new ObjectParameter("DoctorAutoId", doctorAutoId) :
                new ObjectParameter("DoctorAutoId", typeof(int));
    
            var fundoscopyTypeParameter = fundoscopyType.HasValue ?
                new ObjectParameter("FundoscopyType", fundoscopyType) :
                new ObjectParameter("FundoscopyType", typeof(int));
    
            var fundoscopyfindings_RightEyeParameter = fundoscopyfindings_RightEye != null ?
                new ObjectParameter("Fundoscopyfindings_RightEye", fundoscopyfindings_RightEye) :
                new ObjectParameter("Fundoscopyfindings_RightEye", typeof(string));
    
            var fundoscopyfindings_LeftEyeParameter = fundoscopyfindings_LeftEye != null ?
                new ObjectParameter("Fundoscopyfindings_LeftEye", fundoscopyfindings_LeftEye) :
                new ObjectParameter("Fundoscopyfindings_LeftEye", typeof(string));
    
            var remarks_FundoscopyfindingsParameter = remarks_Fundoscopyfindings != null ?
                new ObjectParameter("Remarks_Fundoscopyfindings", remarks_Fundoscopyfindings) :
                new ObjectParameter("Remarks_Fundoscopyfindings", typeof(string));
    
            var fundoscopyfindings_RightEye_PosteriorParameter = fundoscopyfindings_RightEye_Posterior != null ?
                new ObjectParameter("Fundoscopyfindings_RightEye_Posterior", fundoscopyfindings_RightEye_Posterior) :
                new ObjectParameter("Fundoscopyfindings_RightEye_Posterior", typeof(string));
    
            var fundoscopyfindings_LeftEye_PosteriorParameter = fundoscopyfindings_LeftEye_Posterior != null ?
                new ObjectParameter("Fundoscopyfindings_LeftEye_Posterior", fundoscopyfindings_LeftEye_Posterior) :
                new ObjectParameter("Fundoscopyfindings_LeftEye_Posterior", typeof(string));
    
            var normal_RightEyeParameter = normal_RightEye.HasValue ?
                new ObjectParameter("Normal_RightEye", normal_RightEye) :
                new ObjectParameter("Normal_RightEye", typeof(int));
    
            var refractiveError_RightEyeParameter = refractiveError_RightEye.HasValue ?
                new ObjectParameter("RefractiveError_RightEye", refractiveError_RightEye) :
                new ObjectParameter("RefractiveError_RightEye", typeof(int));
    
            var lowVision_RightEyeParameter = lowVision_RightEye.HasValue ?
                new ObjectParameter("LowVision_RightEye", lowVision_RightEye) :
                new ObjectParameter("LowVision_RightEye", typeof(int));
    
            var needsCycloplegicRefraction_RightEyeParameter = needsCycloplegicRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", needsCycloplegicRefraction_RightEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", typeof(int));
    
            var squintStrabismus_RightEyeParameter = squintStrabismus_RightEye.HasValue ?
                new ObjectParameter("SquintStrabismus_RightEye", squintStrabismus_RightEye) :
                new ObjectParameter("SquintStrabismus_RightEye", typeof(int));
    
            var lazyEyeAmblyopia_RightEyeParameter = lazyEyeAmblyopia_RightEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_RightEye", lazyEyeAmblyopia_RightEye) :
                new ObjectParameter("LazyEyeAmblyopia_RightEye", typeof(int));
    
            var colorblindnessAchromatopsia_RightEyeParameter = colorblindnessAchromatopsia_RightEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", colorblindnessAchromatopsia_RightEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", typeof(int));
    
            var cataract_RightEyeParameter = cataract_RightEye.HasValue ?
                new ObjectParameter("Cataract_RightEye", cataract_RightEye) :
                new ObjectParameter("Cataract_RightEye", typeof(int));
    
            var traumaticCataract_RightEyeParameter = traumaticCataract_RightEye.HasValue ?
                new ObjectParameter("TraumaticCataract_RightEye", traumaticCataract_RightEye) :
                new ObjectParameter("TraumaticCataract_RightEye", typeof(int));
    
            var keratoconus_RightEyeParameter = keratoconus_RightEye.HasValue ?
                new ObjectParameter("Keratoconus_RightEye", keratoconus_RightEye) :
                new ObjectParameter("Keratoconus_RightEye", typeof(int));
    
            var anisometropia_RightEyeParameter = anisometropia_RightEye.HasValue ?
                new ObjectParameter("Anisometropia_RightEye", anisometropia_RightEye) :
                new ObjectParameter("Anisometropia_RightEye", typeof(int));
    
            var ptosis_RightEyeParameter = ptosis_RightEye.HasValue ?
                new ObjectParameter("Ptosis_RightEye", ptosis_RightEye) :
                new ObjectParameter("Ptosis_RightEye", typeof(int));
    
            var nystagmus_RightEyeParameter = nystagmus_RightEye.HasValue ?
                new ObjectParameter("Nystagmus_RightEye", nystagmus_RightEye) :
                new ObjectParameter("Nystagmus_RightEye", typeof(int));
    
            var corneadefects_RightEyeParameter = corneadefects_RightEye.HasValue ?
                new ObjectParameter("Corneadefects_RightEye", corneadefects_RightEye) :
                new ObjectParameter("Corneadefects_RightEye", typeof(int));
    
            var puplidefects_RightEyeParameter = puplidefects_RightEye.HasValue ?
                new ObjectParameter("Puplidefects_RightEye", puplidefects_RightEye) :
                new ObjectParameter("Puplidefects_RightEye", typeof(int));
    
            var pterygium_RightEyeParameter = pterygium_RightEye.HasValue ?
                new ObjectParameter("Pterygium_RightEye", pterygium_RightEye) :
                new ObjectParameter("Pterygium_RightEye", typeof(int));
    
            var other_RightEyeParameter = other_RightEye.HasValue ?
                new ObjectParameter("Other_RightEye", other_RightEye) :
                new ObjectParameter("Other_RightEye", typeof(int));
    
            var daignosisRemarksParameter = daignosisRemarks != null ?
                new ObjectParameter("DaignosisRemarks", daignosisRemarks) :
                new ObjectParameter("DaignosisRemarks", typeof(string));
    
            var normal_LeftEyeParameter = normal_LeftEye.HasValue ?
                new ObjectParameter("Normal_LeftEye", normal_LeftEye) :
                new ObjectParameter("Normal_LeftEye", typeof(int));
    
            var refractiveError_LeftEyeParameter = refractiveError_LeftEye.HasValue ?
                new ObjectParameter("RefractiveError_LeftEye", refractiveError_LeftEye) :
                new ObjectParameter("RefractiveError_LeftEye", typeof(int));
    
            var lowVision_LeftEyeParameter = lowVision_LeftEye.HasValue ?
                new ObjectParameter("LowVision_LeftEye", lowVision_LeftEye) :
                new ObjectParameter("LowVision_LeftEye", typeof(int));
    
            var needsCycloplegicRefraction_LeftEyeParameter = needsCycloplegicRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", needsCycloplegicRefraction_LeftEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", typeof(int));
    
            var squintStrabismus_LeftEyeParameter = squintStrabismus_LeftEye.HasValue ?
                new ObjectParameter("SquintStrabismus_LeftEye", squintStrabismus_LeftEye) :
                new ObjectParameter("SquintStrabismus_LeftEye", typeof(int));
    
            var lazyEyeAmblyopia_LeftEyeParameter = lazyEyeAmblyopia_LeftEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", lazyEyeAmblyopia_LeftEye) :
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", typeof(int));
    
            var colorblindnessAchromatopsia_LeftEyeParameter = colorblindnessAchromatopsia_LeftEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", colorblindnessAchromatopsia_LeftEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", typeof(int));
    
            var cataract_LeftEyeParameter = cataract_LeftEye.HasValue ?
                new ObjectParameter("Cataract_LeftEye", cataract_LeftEye) :
                new ObjectParameter("Cataract_LeftEye", typeof(int));
    
            var traumaticCataract_LeftEyeParameter = traumaticCataract_LeftEye.HasValue ?
                new ObjectParameter("TraumaticCataract_LeftEye", traumaticCataract_LeftEye) :
                new ObjectParameter("TraumaticCataract_LeftEye", typeof(int));
    
            var keratoconus_LeftEyeParameter = keratoconus_LeftEye.HasValue ?
                new ObjectParameter("Keratoconus_LeftEye", keratoconus_LeftEye) :
                new ObjectParameter("Keratoconus_LeftEye", typeof(int));
    
            var anisometropia_LeftEyeParameter = anisometropia_LeftEye.HasValue ?
                new ObjectParameter("Anisometropia_LeftEye", anisometropia_LeftEye) :
                new ObjectParameter("Anisometropia_LeftEye", typeof(int));
    
            var ptosis_LeftEyeParameter = ptosis_LeftEye.HasValue ?
                new ObjectParameter("Ptosis_LeftEye", ptosis_LeftEye) :
                new ObjectParameter("Ptosis_LeftEye", typeof(int));
    
            var nystagmus_LeftEyeParameter = nystagmus_LeftEye.HasValue ?
                new ObjectParameter("Nystagmus_LeftEye", nystagmus_LeftEye) :
                new ObjectParameter("Nystagmus_LeftEye", typeof(int));
    
            var corneadefects_LeftEyeParameter = corneadefects_LeftEye.HasValue ?
                new ObjectParameter("Corneadefects_LeftEye", corneadefects_LeftEye) :
                new ObjectParameter("Corneadefects_LeftEye", typeof(int));
    
            var puplidefects_LeftEyeParameter = puplidefects_LeftEye.HasValue ?
                new ObjectParameter("Puplidefects_LeftEye", puplidefects_LeftEye) :
                new ObjectParameter("Puplidefects_LeftEye", typeof(int));
    
            var pterygium_LeftEyeParameter = pterygium_LeftEye.HasValue ?
                new ObjectParameter("Pterygium_LeftEye", pterygium_LeftEye) :
                new ObjectParameter("Pterygium_LeftEye", typeof(int));
    
            var other_LeftEyeParameter = other_LeftEye.HasValue ?
                new ObjectParameter("Other_LeftEye", other_LeftEye) :
                new ObjectParameter("Other_LeftEye", typeof(int));
    
            var daignosisRemarks_LeftEyeParameter = daignosisRemarks_LeftEye != null ?
                new ObjectParameter("DaignosisRemarks_LeftEye", daignosisRemarks_LeftEye) :
                new ObjectParameter("DaignosisRemarks_LeftEye", typeof(string));
    
            var subDaignosisParameter = subDaignosis.HasValue ?
                new ObjectParameter("SubDaignosis", subDaignosis) :
                new ObjectParameter("SubDaignosis", typeof(int));
    
            var subDaignosis_LeftEyeParameter = subDaignosis_LeftEye.HasValue ?
                new ObjectParameter("SubDaignosis_LeftEye", subDaignosis_LeftEye) :
                new ObjectParameter("SubDaignosis_LeftEye", typeof(int));
    
            var subTreatmentParameter = subTreatment.HasValue ?
                new ObjectParameter("SubTreatment", subTreatment) :
                new ObjectParameter("SubTreatment", typeof(int));
    
            var diagnosis_RightEyeParameter = diagnosis_RightEye != null ?
                new ObjectParameter("Diagnosis_RightEye", diagnosis_RightEye) :
                new ObjectParameter("Diagnosis_RightEye", typeof(string));
    
            var diagnosis_LeftEyeParameter = diagnosis_LeftEye != null ?
                new ObjectParameter("Diagnosis_LeftEye", diagnosis_LeftEye) :
                new ObjectParameter("Diagnosis_LeftEye", typeof(string));
    
            var medicinePrescribedParameter = medicinePrescribed != null ?
                new ObjectParameter("MedicinePrescribed", medicinePrescribed) :
                new ObjectParameter("MedicinePrescribed", typeof(string));
    
            var ophthalmologistRemarksParameter = ophthalmologistRemarks != null ?
                new ObjectParameter("OphthalmologistRemarks", ophthalmologistRemarks) :
                new ObjectParameter("OphthalmologistRemarks", typeof(string));
    
            var surgerySuggestedParameter = surgerySuggested.HasValue ?
                new ObjectParameter("SurgerySuggested", surgerySuggested) :
                new ObjectParameter("SurgerySuggested", typeof(int));
    
            var subDiagnosis_RightEyeParameter = subDiagnosis_RightEye != null ?
                new ObjectParameter("SubDiagnosis_RightEye", subDiagnosis_RightEye) :
                new ObjectParameter("SubDiagnosis_RightEye", typeof(string));
    
            var subDiagnosis_LeftEyeParameter = subDiagnosis_LeftEye != null ?
                new ObjectParameter("SubDiagnosis_LeftEye", subDiagnosis_LeftEye) :
                new ObjectParameter("SubDiagnosis_LeftEye", typeof(string));
    
            var routineCheckupParameter = routineCheckup.HasValue ?
                new ObjectParameter("RoutineCheckup", routineCheckup) :
                new ObjectParameter("RoutineCheckup", typeof(int));
    
            var routineCheckupDateParameter = routineCheckupDate.HasValue ?
                new ObjectParameter("RoutineCheckupDate", routineCheckupDate) :
                new ObjectParameter("RoutineCheckupDate", typeof(System.DateTime));
    
            var furtherAssessmentParameter = furtherAssessment.HasValue ?
                new ObjectParameter("FurtherAssessment", furtherAssessment) :
                new ObjectParameter("FurtherAssessment", typeof(int));
    
            var furtherAssessmentDateParameter = furtherAssessmentDate.HasValue ?
                new ObjectParameter("FurtherAssessmentDate", furtherAssessmentDate) :
                new ObjectParameter("FurtherAssessmentDate", typeof(System.DateTime));
    
            var surgeryFollowupParameter = surgeryFollowup.HasValue ?
                new ObjectParameter("SurgeryFollowup", surgeryFollowup) :
                new ObjectParameter("SurgeryFollowup", typeof(int));
    
            var surgeryDateParameter = surgeryDate.HasValue ?
                new ObjectParameter("SurgeryDate", surgeryDate) :
                new ObjectParameter("SurgeryDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitFundoscopyStudent_InsertUpdate_Result>("sp_tblVisitFundoscopyStudent_InsertUpdate", visitFundoscopyStudentIdParameter, visitFundoscopyStudentTransDateParameter, studentAutoIdParameter, hospitalAutoIdParameter, doctorAutoIdParameter, fundoscopyTypeParameter, fundoscopyfindings_RightEyeParameter, fundoscopyfindings_LeftEyeParameter, remarks_FundoscopyfindingsParameter, fundoscopyfindings_RightEye_PosteriorParameter, fundoscopyfindings_LeftEye_PosteriorParameter, normal_RightEyeParameter, refractiveError_RightEyeParameter, lowVision_RightEyeParameter, needsCycloplegicRefraction_RightEyeParameter, squintStrabismus_RightEyeParameter, lazyEyeAmblyopia_RightEyeParameter, colorblindnessAchromatopsia_RightEyeParameter, cataract_RightEyeParameter, traumaticCataract_RightEyeParameter, keratoconus_RightEyeParameter, anisometropia_RightEyeParameter, ptosis_RightEyeParameter, nystagmus_RightEyeParameter, corneadefects_RightEyeParameter, puplidefects_RightEyeParameter, pterygium_RightEyeParameter, other_RightEyeParameter, daignosisRemarksParameter, normal_LeftEyeParameter, refractiveError_LeftEyeParameter, lowVision_LeftEyeParameter, needsCycloplegicRefraction_LeftEyeParameter, squintStrabismus_LeftEyeParameter, lazyEyeAmblyopia_LeftEyeParameter, colorblindnessAchromatopsia_LeftEyeParameter, cataract_LeftEyeParameter, traumaticCataract_LeftEyeParameter, keratoconus_LeftEyeParameter, anisometropia_LeftEyeParameter, ptosis_LeftEyeParameter, nystagmus_LeftEyeParameter, corneadefects_LeftEyeParameter, puplidefects_LeftEyeParameter, pterygium_LeftEyeParameter, other_LeftEyeParameter, daignosisRemarks_LeftEyeParameter, subDaignosisParameter, subDaignosis_LeftEyeParameter, subTreatmentParameter, diagnosis_RightEyeParameter, diagnosis_LeftEyeParameter, medicinePrescribedParameter, ophthalmologistRemarksParameter, surgerySuggestedParameter, subDiagnosis_RightEyeParameter, subDiagnosis_LeftEyeParameter, routineCheckupParameter, routineCheckupDateParameter, furtherAssessmentParameter, furtherAssessmentDateParameter, surgeryFollowupParameter, surgeryDateParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForFurtherAssessmentStudent_GetDetail_Result> sp_tblVisitForFurtherAssessmentStudent_GetDetail(Nullable<int> visitForFurtherAssessmentStudentId)
        {
            var visitForFurtherAssessmentStudentIdParameter = visitForFurtherAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForFurtherAssessmentStudentId", visitForFurtherAssessmentStudentId) :
                new ObjectParameter("VisitForFurtherAssessmentStudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForFurtherAssessmentStudent_GetDetail_Result>("sp_tblVisitForFurtherAssessmentStudent_GetDetail", visitForFurtherAssessmentStudentIdParameter);
        }
    
        public virtual ObjectResult<sp_tblVisitForFurtherAssessmentStudent_InsertUpdate_Result> sp_tblVisitForFurtherAssessmentStudent_InsertUpdate(Nullable<int> visitForFurtherAssessmentStudentId, Nullable<System.DateTime> visitForFurtherAssessmentStudentTransDate, Nullable<int> studentAutoId, Nullable<int> hospitalAutoId, Nullable<int> doctorAutoId, Nullable<int> distanceVision_RightEye_Unaided, Nullable<int> distanceVision_RightEye_WithGlasses, Nullable<int> distanceVision_RightEye_PinHole, Nullable<int> nearVision_RightEye, Nullable<int> needCycloRefraction_RightEye, string needCycloRefractionRemarks_RightEye, Nullable<int> distanceVision_LeftEye_Unaided, Nullable<int> distanceVision_LeftEye_WithGlasses, Nullable<int> distanceVision_LeftEye_PinHole, Nullable<int> nearVision_LeftEye, Nullable<int> needCycloRefraction_LeftEye, string needCycloRefractionRemarks_LeftEye, string right_Spherical_Status, Nullable<decimal> right_Spherical_Points, string right_Cyclinderical_Status, Nullable<decimal> right_Cyclinderical_Points, Nullable<int> right_Axix_From, Nullable<int> right_Axix_To, string right_Near_Status, Nullable<decimal> right_Near_Points, string left_Spherical_Status, Nullable<decimal> left_Spherical_Points, string left_Cyclinderical_Status, Nullable<decimal> left_Cyclinderical_Points, Nullable<int> left_Axix_From, Nullable<int> left_Axix_To, string left_Near_Status, Nullable<decimal> left_Near_Points, Nullable<int> douchrome, string achromatopsia, Nullable<int> retinoScopy_RightEye, string cycloplegicRefraction_RightEye, string condition_RightEye, string meridian1_RightEye, string meridian2_RightEye, string finalPrescription_RightEye, Nullable<int> retinoScopy_LeftEye, string cycloplegicRefraction_LeftEye, string condition_LeftEye, string meridian1_LeftEye, string meridian2_LeftEye, string finalPrescription_LeftEye, Nullable<int> hirchberg_Distance, Nullable<int> hirchberg_Near, Nullable<int> ophthalmoscope_RightEye, Nullable<int> pupillaryReactions_RightEye, Nullable<int> coverUncovertTest_RightEye, string coverUncovertTestRemarks_RightEye, string extraOccularMuscleRemarks_RightEye, Nullable<int> ophthalmoscope_LeftEye, Nullable<int> pupillaryReactions_LeftEye, Nullable<int> coverUncovertTest_LeftEye, string coverUncovertTestRemarks_LeftEye, string extraOccularMuscleRemarks_LeftEye, Nullable<int> normal_RightEye, Nullable<int> refractiveError_RightEye, Nullable<int> lowVision_RightEye, Nullable<int> needsCycloplegicRefraction_RightEye, Nullable<int> squintStrabismus_RightEye, Nullable<int> lazyEyeAmblyopia_RightEye, Nullable<int> colorblindnessAchromatopsia_RightEye, Nullable<int> cataract_RightEye, Nullable<int> traumaticCataract_RightEye, Nullable<int> keratoconus_RightEye, Nullable<int> anisometropia_RightEye, Nullable<int> ptosis_RightEye, Nullable<int> nystagmus_RightEye, Nullable<int> corneadefects_RightEye, Nullable<int> puplidefects_RightEye, Nullable<int> pterygium_RightEye, Nullable<int> other_RightEye, string daignosisRemarks, Nullable<int> normal_LeftEye, Nullable<int> refractiveError_LeftEye, Nullable<int> lowVision_LeftEye, Nullable<int> needsCycloplegicRefraction_LeftEye, Nullable<int> squintStrabismus_LeftEye, Nullable<int> lazyEyeAmblyopia_LeftEye, Nullable<int> colorblindnessAchromatopsia_LeftEye, Nullable<int> cataract_LeftEye, Nullable<int> traumaticCataract_LeftEye, Nullable<int> keratoconus_LeftEye, Nullable<int> anisometropia_LeftEye, Nullable<int> ptosis_LeftEye, Nullable<int> nystagmus_LeftEye, Nullable<int> corneadefects_LeftEye, Nullable<int> puplidefects_LeftEye, Nullable<int> pterygium_LeftEye, Nullable<int> other_LeftEye, string daignosisRemarks_LeftEye, Nullable<int> subDaignosis, Nullable<int> subDaignosis_LeftEye, Nullable<int> treatment, Nullable<int> subTreatment, string medicine, Nullable<int> frequency, Nullable<int> nextVisit, Nullable<int> surgery, Nullable<int> surgeryDetail, string surgeryDetailRemarks, Nullable<int> referal, string userId, Nullable<System.DateTime> entDate, string entOperation, string entTerminal, string entTerminalIP)
        {
            var visitForFurtherAssessmentStudentIdParameter = visitForFurtherAssessmentStudentId.HasValue ?
                new ObjectParameter("VisitForFurtherAssessmentStudentId", visitForFurtherAssessmentStudentId) :
                new ObjectParameter("VisitForFurtherAssessmentStudentId", typeof(int));
    
            var visitForFurtherAssessmentStudentTransDateParameter = visitForFurtherAssessmentStudentTransDate.HasValue ?
                new ObjectParameter("VisitForFurtherAssessmentStudentTransDate", visitForFurtherAssessmentStudentTransDate) :
                new ObjectParameter("VisitForFurtherAssessmentStudentTransDate", typeof(System.DateTime));
    
            var studentAutoIdParameter = studentAutoId.HasValue ?
                new ObjectParameter("StudentAutoId", studentAutoId) :
                new ObjectParameter("StudentAutoId", typeof(int));
    
            var hospitalAutoIdParameter = hospitalAutoId.HasValue ?
                new ObjectParameter("HospitalAutoId", hospitalAutoId) :
                new ObjectParameter("HospitalAutoId", typeof(int));
    
            var doctorAutoIdParameter = doctorAutoId.HasValue ?
                new ObjectParameter("DoctorAutoId", doctorAutoId) :
                new ObjectParameter("DoctorAutoId", typeof(int));
    
            var distanceVision_RightEye_UnaidedParameter = distanceVision_RightEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_Unaided", distanceVision_RightEye_Unaided) :
                new ObjectParameter("DistanceVision_RightEye_Unaided", typeof(int));
    
            var distanceVision_RightEye_WithGlassesParameter = distanceVision_RightEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", distanceVision_RightEye_WithGlasses) :
                new ObjectParameter("DistanceVision_RightEye_WithGlasses", typeof(int));
    
            var distanceVision_RightEye_PinHoleParameter = distanceVision_RightEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_RightEye_PinHole", distanceVision_RightEye_PinHole) :
                new ObjectParameter("DistanceVision_RightEye_PinHole", typeof(int));
    
            var nearVision_RightEyeParameter = nearVision_RightEye.HasValue ?
                new ObjectParameter("NearVision_RightEye", nearVision_RightEye) :
                new ObjectParameter("NearVision_RightEye", typeof(int));
    
            var needCycloRefraction_RightEyeParameter = needCycloRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedCycloRefraction_RightEye", needCycloRefraction_RightEye) :
                new ObjectParameter("NeedCycloRefraction_RightEye", typeof(int));
    
            var needCycloRefractionRemarks_RightEyeParameter = needCycloRefractionRemarks_RightEye != null ?
                new ObjectParameter("NeedCycloRefractionRemarks_RightEye", needCycloRefractionRemarks_RightEye) :
                new ObjectParameter("NeedCycloRefractionRemarks_RightEye", typeof(string));
    
            var distanceVision_LeftEye_UnaidedParameter = distanceVision_LeftEye_Unaided.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_Unaided", distanceVision_LeftEye_Unaided) :
                new ObjectParameter("DistanceVision_LeftEye_Unaided", typeof(int));
    
            var distanceVision_LeftEye_WithGlassesParameter = distanceVision_LeftEye_WithGlasses.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", distanceVision_LeftEye_WithGlasses) :
                new ObjectParameter("DistanceVision_LeftEye_WithGlasses", typeof(int));
    
            var distanceVision_LeftEye_PinHoleParameter = distanceVision_LeftEye_PinHole.HasValue ?
                new ObjectParameter("DistanceVision_LeftEye_PinHole", distanceVision_LeftEye_PinHole) :
                new ObjectParameter("DistanceVision_LeftEye_PinHole", typeof(int));
    
            var nearVision_LeftEyeParameter = nearVision_LeftEye.HasValue ?
                new ObjectParameter("NearVision_LeftEye", nearVision_LeftEye) :
                new ObjectParameter("NearVision_LeftEye", typeof(int));
    
            var needCycloRefraction_LeftEyeParameter = needCycloRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedCycloRefraction_LeftEye", needCycloRefraction_LeftEye) :
                new ObjectParameter("NeedCycloRefraction_LeftEye", typeof(int));
    
            var needCycloRefractionRemarks_LeftEyeParameter = needCycloRefractionRemarks_LeftEye != null ?
                new ObjectParameter("NeedCycloRefractionRemarks_LeftEye", needCycloRefractionRemarks_LeftEye) :
                new ObjectParameter("NeedCycloRefractionRemarks_LeftEye", typeof(string));
    
            var right_Spherical_StatusParameter = right_Spherical_Status != null ?
                new ObjectParameter("Right_Spherical_Status", right_Spherical_Status) :
                new ObjectParameter("Right_Spherical_Status", typeof(string));
    
            var right_Spherical_PointsParameter = right_Spherical_Points.HasValue ?
                new ObjectParameter("Right_Spherical_Points", right_Spherical_Points) :
                new ObjectParameter("Right_Spherical_Points", typeof(decimal));
    
            var right_Cyclinderical_StatusParameter = right_Cyclinderical_Status != null ?
                new ObjectParameter("Right_Cyclinderical_Status", right_Cyclinderical_Status) :
                new ObjectParameter("Right_Cyclinderical_Status", typeof(string));
    
            var right_Cyclinderical_PointsParameter = right_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Right_Cyclinderical_Points", right_Cyclinderical_Points) :
                new ObjectParameter("Right_Cyclinderical_Points", typeof(decimal));
    
            var right_Axix_FromParameter = right_Axix_From.HasValue ?
                new ObjectParameter("Right_Axix_From", right_Axix_From) :
                new ObjectParameter("Right_Axix_From", typeof(int));
    
            var right_Axix_ToParameter = right_Axix_To.HasValue ?
                new ObjectParameter("Right_Axix_To", right_Axix_To) :
                new ObjectParameter("Right_Axix_To", typeof(int));
    
            var right_Near_StatusParameter = right_Near_Status != null ?
                new ObjectParameter("Right_Near_Status", right_Near_Status) :
                new ObjectParameter("Right_Near_Status", typeof(string));
    
            var right_Near_PointsParameter = right_Near_Points.HasValue ?
                new ObjectParameter("Right_Near_Points", right_Near_Points) :
                new ObjectParameter("Right_Near_Points", typeof(decimal));
    
            var left_Spherical_StatusParameter = left_Spherical_Status != null ?
                new ObjectParameter("Left_Spherical_Status", left_Spherical_Status) :
                new ObjectParameter("Left_Spherical_Status", typeof(string));
    
            var left_Spherical_PointsParameter = left_Spherical_Points.HasValue ?
                new ObjectParameter("Left_Spherical_Points", left_Spherical_Points) :
                new ObjectParameter("Left_Spherical_Points", typeof(decimal));
    
            var left_Cyclinderical_StatusParameter = left_Cyclinderical_Status != null ?
                new ObjectParameter("Left_Cyclinderical_Status", left_Cyclinderical_Status) :
                new ObjectParameter("Left_Cyclinderical_Status", typeof(string));
    
            var left_Cyclinderical_PointsParameter = left_Cyclinderical_Points.HasValue ?
                new ObjectParameter("Left_Cyclinderical_Points", left_Cyclinderical_Points) :
                new ObjectParameter("Left_Cyclinderical_Points", typeof(decimal));
    
            var left_Axix_FromParameter = left_Axix_From.HasValue ?
                new ObjectParameter("Left_Axix_From", left_Axix_From) :
                new ObjectParameter("Left_Axix_From", typeof(int));
    
            var left_Axix_ToParameter = left_Axix_To.HasValue ?
                new ObjectParameter("Left_Axix_To", left_Axix_To) :
                new ObjectParameter("Left_Axix_To", typeof(int));
    
            var left_Near_StatusParameter = left_Near_Status != null ?
                new ObjectParameter("Left_Near_Status", left_Near_Status) :
                new ObjectParameter("Left_Near_Status", typeof(string));
    
            var left_Near_PointsParameter = left_Near_Points.HasValue ?
                new ObjectParameter("Left_Near_Points", left_Near_Points) :
                new ObjectParameter("Left_Near_Points", typeof(decimal));
    
            var douchromeParameter = douchrome.HasValue ?
                new ObjectParameter("Douchrome", douchrome) :
                new ObjectParameter("Douchrome", typeof(int));
    
            var achromatopsiaParameter = achromatopsia != null ?
                new ObjectParameter("Achromatopsia", achromatopsia) :
                new ObjectParameter("Achromatopsia", typeof(string));
    
            var retinoScopy_RightEyeParameter = retinoScopy_RightEye.HasValue ?
                new ObjectParameter("RetinoScopy_RightEye", retinoScopy_RightEye) :
                new ObjectParameter("RetinoScopy_RightEye", typeof(int));
    
            var cycloplegicRefraction_RightEyeParameter = cycloplegicRefraction_RightEye != null ?
                new ObjectParameter("CycloplegicRefraction_RightEye", cycloplegicRefraction_RightEye) :
                new ObjectParameter("CycloplegicRefraction_RightEye", typeof(string));
    
            var condition_RightEyeParameter = condition_RightEye != null ?
                new ObjectParameter("Condition_RightEye", condition_RightEye) :
                new ObjectParameter("Condition_RightEye", typeof(string));
    
            var meridian1_RightEyeParameter = meridian1_RightEye != null ?
                new ObjectParameter("Meridian1_RightEye", meridian1_RightEye) :
                new ObjectParameter("Meridian1_RightEye", typeof(string));
    
            var meridian2_RightEyeParameter = meridian2_RightEye != null ?
                new ObjectParameter("Meridian2_RightEye", meridian2_RightEye) :
                new ObjectParameter("Meridian2_RightEye", typeof(string));
    
            var finalPrescription_RightEyeParameter = finalPrescription_RightEye != null ?
                new ObjectParameter("FinalPrescription_RightEye", finalPrescription_RightEye) :
                new ObjectParameter("FinalPrescription_RightEye", typeof(string));
    
            var retinoScopy_LeftEyeParameter = retinoScopy_LeftEye.HasValue ?
                new ObjectParameter("RetinoScopy_LeftEye", retinoScopy_LeftEye) :
                new ObjectParameter("RetinoScopy_LeftEye", typeof(int));
    
            var cycloplegicRefraction_LeftEyeParameter = cycloplegicRefraction_LeftEye != null ?
                new ObjectParameter("CycloplegicRefraction_LeftEye", cycloplegicRefraction_LeftEye) :
                new ObjectParameter("CycloplegicRefraction_LeftEye", typeof(string));
    
            var condition_LeftEyeParameter = condition_LeftEye != null ?
                new ObjectParameter("Condition_LeftEye", condition_LeftEye) :
                new ObjectParameter("Condition_LeftEye", typeof(string));
    
            var meridian1_LeftEyeParameter = meridian1_LeftEye != null ?
                new ObjectParameter("Meridian1_LeftEye", meridian1_LeftEye) :
                new ObjectParameter("Meridian1_LeftEye", typeof(string));
    
            var meridian2_LeftEyeParameter = meridian2_LeftEye != null ?
                new ObjectParameter("Meridian2_LeftEye", meridian2_LeftEye) :
                new ObjectParameter("Meridian2_LeftEye", typeof(string));
    
            var finalPrescription_LeftEyeParameter = finalPrescription_LeftEye != null ?
                new ObjectParameter("FinalPrescription_LeftEye", finalPrescription_LeftEye) :
                new ObjectParameter("FinalPrescription_LeftEye", typeof(string));
    
            var hirchberg_DistanceParameter = hirchberg_Distance.HasValue ?
                new ObjectParameter("Hirchberg_Distance", hirchberg_Distance) :
                new ObjectParameter("Hirchberg_Distance", typeof(int));
    
            var hirchberg_NearParameter = hirchberg_Near.HasValue ?
                new ObjectParameter("Hirchberg_Near", hirchberg_Near) :
                new ObjectParameter("Hirchberg_Near", typeof(int));
    
            var ophthalmoscope_RightEyeParameter = ophthalmoscope_RightEye.HasValue ?
                new ObjectParameter("Ophthalmoscope_RightEye", ophthalmoscope_RightEye) :
                new ObjectParameter("Ophthalmoscope_RightEye", typeof(int));
    
            var pupillaryReactions_RightEyeParameter = pupillaryReactions_RightEye.HasValue ?
                new ObjectParameter("PupillaryReactions_RightEye", pupillaryReactions_RightEye) :
                new ObjectParameter("PupillaryReactions_RightEye", typeof(int));
    
            var coverUncovertTest_RightEyeParameter = coverUncovertTest_RightEye.HasValue ?
                new ObjectParameter("CoverUncovertTest_RightEye", coverUncovertTest_RightEye) :
                new ObjectParameter("CoverUncovertTest_RightEye", typeof(int));
    
            var coverUncovertTestRemarks_RightEyeParameter = coverUncovertTestRemarks_RightEye != null ?
                new ObjectParameter("CoverUncovertTestRemarks_RightEye", coverUncovertTestRemarks_RightEye) :
                new ObjectParameter("CoverUncovertTestRemarks_RightEye", typeof(string));
    
            var extraOccularMuscleRemarks_RightEyeParameter = extraOccularMuscleRemarks_RightEye != null ?
                new ObjectParameter("ExtraOccularMuscleRemarks_RightEye", extraOccularMuscleRemarks_RightEye) :
                new ObjectParameter("ExtraOccularMuscleRemarks_RightEye", typeof(string));
    
            var ophthalmoscope_LeftEyeParameter = ophthalmoscope_LeftEye.HasValue ?
                new ObjectParameter("Ophthalmoscope_LeftEye", ophthalmoscope_LeftEye) :
                new ObjectParameter("Ophthalmoscope_LeftEye", typeof(int));
    
            var pupillaryReactions_LeftEyeParameter = pupillaryReactions_LeftEye.HasValue ?
                new ObjectParameter("PupillaryReactions_LeftEye", pupillaryReactions_LeftEye) :
                new ObjectParameter("PupillaryReactions_LeftEye", typeof(int));
    
            var coverUncovertTest_LeftEyeParameter = coverUncovertTest_LeftEye.HasValue ?
                new ObjectParameter("CoverUncovertTest_LeftEye", coverUncovertTest_LeftEye) :
                new ObjectParameter("CoverUncovertTest_LeftEye", typeof(int));
    
            var coverUncovertTestRemarks_LeftEyeParameter = coverUncovertTestRemarks_LeftEye != null ?
                new ObjectParameter("CoverUncovertTestRemarks_LeftEye", coverUncovertTestRemarks_LeftEye) :
                new ObjectParameter("CoverUncovertTestRemarks_LeftEye", typeof(string));
    
            var extraOccularMuscleRemarks_LeftEyeParameter = extraOccularMuscleRemarks_LeftEye != null ?
                new ObjectParameter("ExtraOccularMuscleRemarks_LeftEye", extraOccularMuscleRemarks_LeftEye) :
                new ObjectParameter("ExtraOccularMuscleRemarks_LeftEye", typeof(string));
    
            var normal_RightEyeParameter = normal_RightEye.HasValue ?
                new ObjectParameter("Normal_RightEye", normal_RightEye) :
                new ObjectParameter("Normal_RightEye", typeof(int));
    
            var refractiveError_RightEyeParameter = refractiveError_RightEye.HasValue ?
                new ObjectParameter("RefractiveError_RightEye", refractiveError_RightEye) :
                new ObjectParameter("RefractiveError_RightEye", typeof(int));
    
            var lowVision_RightEyeParameter = lowVision_RightEye.HasValue ?
                new ObjectParameter("LowVision_RightEye", lowVision_RightEye) :
                new ObjectParameter("LowVision_RightEye", typeof(int));
    
            var needsCycloplegicRefraction_RightEyeParameter = needsCycloplegicRefraction_RightEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", needsCycloplegicRefraction_RightEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_RightEye", typeof(int));
    
            var squintStrabismus_RightEyeParameter = squintStrabismus_RightEye.HasValue ?
                new ObjectParameter("SquintStrabismus_RightEye", squintStrabismus_RightEye) :
                new ObjectParameter("SquintStrabismus_RightEye", typeof(int));
    
            var lazyEyeAmblyopia_RightEyeParameter = lazyEyeAmblyopia_RightEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_RightEye", lazyEyeAmblyopia_RightEye) :
                new ObjectParameter("LazyEyeAmblyopia_RightEye", typeof(int));
    
            var colorblindnessAchromatopsia_RightEyeParameter = colorblindnessAchromatopsia_RightEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", colorblindnessAchromatopsia_RightEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_RightEye", typeof(int));
    
            var cataract_RightEyeParameter = cataract_RightEye.HasValue ?
                new ObjectParameter("Cataract_RightEye", cataract_RightEye) :
                new ObjectParameter("Cataract_RightEye", typeof(int));
    
            var traumaticCataract_RightEyeParameter = traumaticCataract_RightEye.HasValue ?
                new ObjectParameter("TraumaticCataract_RightEye", traumaticCataract_RightEye) :
                new ObjectParameter("TraumaticCataract_RightEye", typeof(int));
    
            var keratoconus_RightEyeParameter = keratoconus_RightEye.HasValue ?
                new ObjectParameter("Keratoconus_RightEye", keratoconus_RightEye) :
                new ObjectParameter("Keratoconus_RightEye", typeof(int));
    
            var anisometropia_RightEyeParameter = anisometropia_RightEye.HasValue ?
                new ObjectParameter("Anisometropia_RightEye", anisometropia_RightEye) :
                new ObjectParameter("Anisometropia_RightEye", typeof(int));
    
            var ptosis_RightEyeParameter = ptosis_RightEye.HasValue ?
                new ObjectParameter("Ptosis_RightEye", ptosis_RightEye) :
                new ObjectParameter("Ptosis_RightEye", typeof(int));
    
            var nystagmus_RightEyeParameter = nystagmus_RightEye.HasValue ?
                new ObjectParameter("Nystagmus_RightEye", nystagmus_RightEye) :
                new ObjectParameter("Nystagmus_RightEye", typeof(int));
    
            var corneadefects_RightEyeParameter = corneadefects_RightEye.HasValue ?
                new ObjectParameter("Corneadefects_RightEye", corneadefects_RightEye) :
                new ObjectParameter("Corneadefects_RightEye", typeof(int));
    
            var puplidefects_RightEyeParameter = puplidefects_RightEye.HasValue ?
                new ObjectParameter("Puplidefects_RightEye", puplidefects_RightEye) :
                new ObjectParameter("Puplidefects_RightEye", typeof(int));
    
            var pterygium_RightEyeParameter = pterygium_RightEye.HasValue ?
                new ObjectParameter("Pterygium_RightEye", pterygium_RightEye) :
                new ObjectParameter("Pterygium_RightEye", typeof(int));
    
            var other_RightEyeParameter = other_RightEye.HasValue ?
                new ObjectParameter("Other_RightEye", other_RightEye) :
                new ObjectParameter("Other_RightEye", typeof(int));
    
            var daignosisRemarksParameter = daignosisRemarks != null ?
                new ObjectParameter("DaignosisRemarks", daignosisRemarks) :
                new ObjectParameter("DaignosisRemarks", typeof(string));
    
            var normal_LeftEyeParameter = normal_LeftEye.HasValue ?
                new ObjectParameter("Normal_LeftEye", normal_LeftEye) :
                new ObjectParameter("Normal_LeftEye", typeof(int));
    
            var refractiveError_LeftEyeParameter = refractiveError_LeftEye.HasValue ?
                new ObjectParameter("RefractiveError_LeftEye", refractiveError_LeftEye) :
                new ObjectParameter("RefractiveError_LeftEye", typeof(int));
    
            var lowVision_LeftEyeParameter = lowVision_LeftEye.HasValue ?
                new ObjectParameter("LowVision_LeftEye", lowVision_LeftEye) :
                new ObjectParameter("LowVision_LeftEye", typeof(int));
    
            var needsCycloplegicRefraction_LeftEyeParameter = needsCycloplegicRefraction_LeftEye.HasValue ?
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", needsCycloplegicRefraction_LeftEye) :
                new ObjectParameter("NeedsCycloplegicRefraction_LeftEye", typeof(int));
    
            var squintStrabismus_LeftEyeParameter = squintStrabismus_LeftEye.HasValue ?
                new ObjectParameter("SquintStrabismus_LeftEye", squintStrabismus_LeftEye) :
                new ObjectParameter("SquintStrabismus_LeftEye", typeof(int));
    
            var lazyEyeAmblyopia_LeftEyeParameter = lazyEyeAmblyopia_LeftEye.HasValue ?
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", lazyEyeAmblyopia_LeftEye) :
                new ObjectParameter("LazyEyeAmblyopia_LeftEye", typeof(int));
    
            var colorblindnessAchromatopsia_LeftEyeParameter = colorblindnessAchromatopsia_LeftEye.HasValue ?
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", colorblindnessAchromatopsia_LeftEye) :
                new ObjectParameter("ColorblindnessAchromatopsia_LeftEye", typeof(int));
    
            var cataract_LeftEyeParameter = cataract_LeftEye.HasValue ?
                new ObjectParameter("Cataract_LeftEye", cataract_LeftEye) :
                new ObjectParameter("Cataract_LeftEye", typeof(int));
    
            var traumaticCataract_LeftEyeParameter = traumaticCataract_LeftEye.HasValue ?
                new ObjectParameter("TraumaticCataract_LeftEye", traumaticCataract_LeftEye) :
                new ObjectParameter("TraumaticCataract_LeftEye", typeof(int));
    
            var keratoconus_LeftEyeParameter = keratoconus_LeftEye.HasValue ?
                new ObjectParameter("Keratoconus_LeftEye", keratoconus_LeftEye) :
                new ObjectParameter("Keratoconus_LeftEye", typeof(int));
    
            var anisometropia_LeftEyeParameter = anisometropia_LeftEye.HasValue ?
                new ObjectParameter("Anisometropia_LeftEye", anisometropia_LeftEye) :
                new ObjectParameter("Anisometropia_LeftEye", typeof(int));
    
            var ptosis_LeftEyeParameter = ptosis_LeftEye.HasValue ?
                new ObjectParameter("Ptosis_LeftEye", ptosis_LeftEye) :
                new ObjectParameter("Ptosis_LeftEye", typeof(int));
    
            var nystagmus_LeftEyeParameter = nystagmus_LeftEye.HasValue ?
                new ObjectParameter("Nystagmus_LeftEye", nystagmus_LeftEye) :
                new ObjectParameter("Nystagmus_LeftEye", typeof(int));
    
            var corneadefects_LeftEyeParameter = corneadefects_LeftEye.HasValue ?
                new ObjectParameter("Corneadefects_LeftEye", corneadefects_LeftEye) :
                new ObjectParameter("Corneadefects_LeftEye", typeof(int));
    
            var puplidefects_LeftEyeParameter = puplidefects_LeftEye.HasValue ?
                new ObjectParameter("Puplidefects_LeftEye", puplidefects_LeftEye) :
                new ObjectParameter("Puplidefects_LeftEye", typeof(int));
    
            var pterygium_LeftEyeParameter = pterygium_LeftEye.HasValue ?
                new ObjectParameter("Pterygium_LeftEye", pterygium_LeftEye) :
                new ObjectParameter("Pterygium_LeftEye", typeof(int));
    
            var other_LeftEyeParameter = other_LeftEye.HasValue ?
                new ObjectParameter("Other_LeftEye", other_LeftEye) :
                new ObjectParameter("Other_LeftEye", typeof(int));
    
            var daignosisRemarks_LeftEyeParameter = daignosisRemarks_LeftEye != null ?
                new ObjectParameter("DaignosisRemarks_LeftEye", daignosisRemarks_LeftEye) :
                new ObjectParameter("DaignosisRemarks_LeftEye", typeof(string));
    
            var subDaignosisParameter = subDaignosis.HasValue ?
                new ObjectParameter("SubDaignosis", subDaignosis) :
                new ObjectParameter("SubDaignosis", typeof(int));
    
            var subDaignosis_LeftEyeParameter = subDaignosis_LeftEye.HasValue ?
                new ObjectParameter("SubDaignosis_LeftEye", subDaignosis_LeftEye) :
                new ObjectParameter("SubDaignosis_LeftEye", typeof(int));
    
            var treatmentParameter = treatment.HasValue ?
                new ObjectParameter("Treatment", treatment) :
                new ObjectParameter("Treatment", typeof(int));
    
            var subTreatmentParameter = subTreatment.HasValue ?
                new ObjectParameter("SubTreatment", subTreatment) :
                new ObjectParameter("SubTreatment", typeof(int));
    
            var medicineParameter = medicine != null ?
                new ObjectParameter("Medicine", medicine) :
                new ObjectParameter("Medicine", typeof(string));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(int));
    
            var surgeryParameter = surgery.HasValue ?
                new ObjectParameter("Surgery", surgery) :
                new ObjectParameter("Surgery", typeof(int));
    
            var surgeryDetailParameter = surgeryDetail.HasValue ?
                new ObjectParameter("SurgeryDetail", surgeryDetail) :
                new ObjectParameter("SurgeryDetail", typeof(int));
    
            var surgeryDetailRemarksParameter = surgeryDetailRemarks != null ?
                new ObjectParameter("SurgeryDetailRemarks", surgeryDetailRemarks) :
                new ObjectParameter("SurgeryDetailRemarks", typeof(string));
    
            var referalParameter = referal.HasValue ?
                new ObjectParameter("Referal", referal) :
                new ObjectParameter("Referal", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var entDateParameter = entDate.HasValue ?
                new ObjectParameter("EntDate", entDate) :
                new ObjectParameter("EntDate", typeof(System.DateTime));
    
            var entOperationParameter = entOperation != null ?
                new ObjectParameter("EntOperation", entOperation) :
                new ObjectParameter("EntOperation", typeof(string));
    
            var entTerminalParameter = entTerminal != null ?
                new ObjectParameter("EntTerminal", entTerminal) :
                new ObjectParameter("EntTerminal", typeof(string));
    
            var entTerminalIPParameter = entTerminalIP != null ?
                new ObjectParameter("EntTerminalIP", entTerminalIP) :
                new ObjectParameter("EntTerminalIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblVisitForFurtherAssessmentStudent_InsertUpdate_Result>("sp_tblVisitForFurtherAssessmentStudent_InsertUpdate", visitForFurtherAssessmentStudentIdParameter, visitForFurtherAssessmentStudentTransDateParameter, studentAutoIdParameter, hospitalAutoIdParameter, doctorAutoIdParameter, distanceVision_RightEye_UnaidedParameter, distanceVision_RightEye_WithGlassesParameter, distanceVision_RightEye_PinHoleParameter, nearVision_RightEyeParameter, needCycloRefraction_RightEyeParameter, needCycloRefractionRemarks_RightEyeParameter, distanceVision_LeftEye_UnaidedParameter, distanceVision_LeftEye_WithGlassesParameter, distanceVision_LeftEye_PinHoleParameter, nearVision_LeftEyeParameter, needCycloRefraction_LeftEyeParameter, needCycloRefractionRemarks_LeftEyeParameter, right_Spherical_StatusParameter, right_Spherical_PointsParameter, right_Cyclinderical_StatusParameter, right_Cyclinderical_PointsParameter, right_Axix_FromParameter, right_Axix_ToParameter, right_Near_StatusParameter, right_Near_PointsParameter, left_Spherical_StatusParameter, left_Spherical_PointsParameter, left_Cyclinderical_StatusParameter, left_Cyclinderical_PointsParameter, left_Axix_FromParameter, left_Axix_ToParameter, left_Near_StatusParameter, left_Near_PointsParameter, douchromeParameter, achromatopsiaParameter, retinoScopy_RightEyeParameter, cycloplegicRefraction_RightEyeParameter, condition_RightEyeParameter, meridian1_RightEyeParameter, meridian2_RightEyeParameter, finalPrescription_RightEyeParameter, retinoScopy_LeftEyeParameter, cycloplegicRefraction_LeftEyeParameter, condition_LeftEyeParameter, meridian1_LeftEyeParameter, meridian2_LeftEyeParameter, finalPrescription_LeftEyeParameter, hirchberg_DistanceParameter, hirchberg_NearParameter, ophthalmoscope_RightEyeParameter, pupillaryReactions_RightEyeParameter, coverUncovertTest_RightEyeParameter, coverUncovertTestRemarks_RightEyeParameter, extraOccularMuscleRemarks_RightEyeParameter, ophthalmoscope_LeftEyeParameter, pupillaryReactions_LeftEyeParameter, coverUncovertTest_LeftEyeParameter, coverUncovertTestRemarks_LeftEyeParameter, extraOccularMuscleRemarks_LeftEyeParameter, normal_RightEyeParameter, refractiveError_RightEyeParameter, lowVision_RightEyeParameter, needsCycloplegicRefraction_RightEyeParameter, squintStrabismus_RightEyeParameter, lazyEyeAmblyopia_RightEyeParameter, colorblindnessAchromatopsia_RightEyeParameter, cataract_RightEyeParameter, traumaticCataract_RightEyeParameter, keratoconus_RightEyeParameter, anisometropia_RightEyeParameter, ptosis_RightEyeParameter, nystagmus_RightEyeParameter, corneadefects_RightEyeParameter, puplidefects_RightEyeParameter, pterygium_RightEyeParameter, other_RightEyeParameter, daignosisRemarksParameter, normal_LeftEyeParameter, refractiveError_LeftEyeParameter, lowVision_LeftEyeParameter, needsCycloplegicRefraction_LeftEyeParameter, squintStrabismus_LeftEyeParameter, lazyEyeAmblyopia_LeftEyeParameter, colorblindnessAchromatopsia_LeftEyeParameter, cataract_LeftEyeParameter, traumaticCataract_LeftEyeParameter, keratoconus_LeftEyeParameter, anisometropia_LeftEyeParameter, ptosis_LeftEyeParameter, nystagmus_LeftEyeParameter, corneadefects_LeftEyeParameter, puplidefects_LeftEyeParameter, pterygium_LeftEyeParameter, other_LeftEyeParameter, daignosisRemarks_LeftEyeParameter, subDaignosisParameter, subDaignosis_LeftEyeParameter, treatmentParameter, subTreatmentParameter, medicineParameter, frequencyParameter, nextVisitParameter, surgeryParameter, surgeryDetailParameter, surgeryDetailRemarksParameter, referalParameter, userIdParameter, entDateParameter, entOperationParameter, entTerminalParameter, entTerminalIPParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_Result> sp_DailyReport_School(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_Result>("sp_DailyReport_School", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_TeacherWithAbnormality_Result> sp_DailyReport_School_TeacherWithAbnormality(Nullable<int> schoolAutoId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var schoolAutoIdParameter = schoolAutoId.HasValue ?
                new ObjectParameter("SchoolAutoId", schoolAutoId) :
                new ObjectParameter("SchoolAutoId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_TeacherWithAbnormality_Result>("sp_DailyReport_School_TeacherWithAbnormality", schoolAutoIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_GlassDispenseDetail_Result> sp_DailyReport_School_GlassDispenseDetail(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_GlassDispenseDetail_Result>("sp_DailyReport_School_GlassDispenseDetail", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_GlassDispenseDetail_Student_Result> sp_DailyReport_School_GlassDispenseDetail_Student(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_GlassDispenseDetail_Student_Result>("sp_DailyReport_School_GlassDispenseDetail_Student", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_DailyReport_School_GlassDispenseDetail_Teacher_Result> sp_DailyReport_School_GlassDispenseDetail_Teacher(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyReport_School_GlassDispenseDetail_Teacher_Result>("sp_DailyReport_School_GlassDispenseDetail_Teacher", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_StaffPerformanceReport_DailyReport_Result> sp_StaffPerformanceReport_DailyReport(Nullable<System.DateTime> transactionDate)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StaffPerformanceReport_DailyReport_Result>("sp_StaffPerformanceReport_DailyReport", transactionDateParameter);
        }
    
        public virtual ObjectResult<sp_GetMenuNew_Result_Result> sp_GetMenuNew_Result(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMenuNew_Result_Result>("sp_GetMenuNew_Result", useridParameter);
        }
    }
}
